(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["main"],{

/***/ "./lib/bam.iobio2.js":
/*!***************************!*\
  !*** ./lib/bam.iobio2.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

//
// Javascript ZLib
// By Thomas Down 2010-2011
//
// Based very heavily on portions of jzlib (by ymnk@jcraft.com), who in
// turn credits Jean-loup Gailly and Mark Adler for the original zlib code.
//
// inflate.js: ZLib inflate code
//

//
// Shared constants
//

var MAX_WBITS=15; // 32K LZ77 window
var DEF_WBITS=MAX_WBITS;
var MAX_MEM_LEVEL=9;
var MANY=1440;
var BMAX = 15;

// preset dictionary flag in zlib header
var PRESET_DICT=0x20;

var Z_NO_FLUSH=0;
var Z_PARTIAL_FLUSH=1;
var Z_SYNC_FLUSH=2;
var Z_FULL_FLUSH=3;
var Z_FINISH=4;

var Z_DEFLATED=8;

var Z_OK=0;
var Z_STREAM_END=1;
var Z_NEED_DICT=2;
var Z_ERRNO=-1;
var Z_STREAM_ERROR=-2;
var Z_DATA_ERROR=-3;
var Z_MEM_ERROR=-4;
var Z_BUF_ERROR=-5;
var Z_VERSION_ERROR=-6;

var METHOD=0;   // waiting for method byte
var FLAG=1;     // waiting for flag byte
var DICT4=2;    // four dictionary check bytes to go
var DICT3=3;    // three dictionary check bytes to go
var DICT2=4;    // two dictionary check bytes to go
var DICT1=5;    // one dictionary check byte to go
var DICT0=6;    // waiting for inflateSetDictionary
var BLOCKS=7;   // decompressing blocks
var CHECK4=8;   // four check bytes to go
var CHECK3=9;   // three check bytes to go
var CHECK2=10;  // two check bytes to go
var CHECK1=11;  // one check byte to go
var DONE=12;    // finished check, done
var BAD=13;     // got an error--stay here

var inflate_mask = [0x00000000, 0x00000001, 0x00000003, 0x00000007, 0x0000000f, 0x0000001f, 0x0000003f, 0x0000007f, 0x000000ff, 0x000001ff, 0x000003ff, 0x000007ff, 0x00000fff, 0x00001fff, 0x00003fff, 0x00007fff, 0x0000ffff];

var IB_TYPE=0;  // get type bits (3, including end bit)
var IB_LENS=1;  // get lengths for stored
var IB_STORED=2;// processing stored block
var IB_TABLE=3; // get table lengths
var IB_BTREE=4; // get bit lengths tree for a dynamic block
var IB_DTREE=5; // get length, distance trees for a dynamic block
var IB_CODES=6; // processing fixed or dynamic block
var IB_DRY=7;   // output remaining window bytes
var IB_DONE=8;  // finished last block, done
var IB_BAD=9;   // ot a data error--stuck here

var fixed_bl = 9;
var fixed_bd = 5;

var fixed_tl = [
    96,7,256, 0,8,80, 0,8,16, 84,8,115,
    82,7,31, 0,8,112, 0,8,48, 0,9,192,
    80,7,10, 0,8,96, 0,8,32, 0,9,160,
    0,8,0, 0,8,128, 0,8,64, 0,9,224,
    80,7,6, 0,8,88, 0,8,24, 0,9,144,
    83,7,59, 0,8,120, 0,8,56, 0,9,208,
    81,7,17, 0,8,104, 0,8,40, 0,9,176,
    0,8,8, 0,8,136, 0,8,72, 0,9,240,
    80,7,4, 0,8,84, 0,8,20, 85,8,227,
    83,7,43, 0,8,116, 0,8,52, 0,9,200,
    81,7,13, 0,8,100, 0,8,36, 0,9,168,
    0,8,4, 0,8,132, 0,8,68, 0,9,232,
    80,7,8, 0,8,92, 0,8,28, 0,9,152,
    84,7,83, 0,8,124, 0,8,60, 0,9,216,
    82,7,23, 0,8,108, 0,8,44, 0,9,184,
    0,8,12, 0,8,140, 0,8,76, 0,9,248,
    80,7,3, 0,8,82, 0,8,18, 85,8,163,
    83,7,35, 0,8,114, 0,8,50, 0,9,196,
    81,7,11, 0,8,98, 0,8,34, 0,9,164,
    0,8,2, 0,8,130, 0,8,66, 0,9,228,
    80,7,7, 0,8,90, 0,8,26, 0,9,148,
    84,7,67, 0,8,122, 0,8,58, 0,9,212,
    82,7,19, 0,8,106, 0,8,42, 0,9,180,
    0,8,10, 0,8,138, 0,8,74, 0,9,244,
    80,7,5, 0,8,86, 0,8,22, 192,8,0,
    83,7,51, 0,8,118, 0,8,54, 0,9,204,
    81,7,15, 0,8,102, 0,8,38, 0,9,172,
    0,8,6, 0,8,134, 0,8,70, 0,9,236,
    80,7,9, 0,8,94, 0,8,30, 0,9,156,
    84,7,99, 0,8,126, 0,8,62, 0,9,220,
    82,7,27, 0,8,110, 0,8,46, 0,9,188,
    0,8,14, 0,8,142, 0,8,78, 0,9,252,
    96,7,256, 0,8,81, 0,8,17, 85,8,131,
    82,7,31, 0,8,113, 0,8,49, 0,9,194,
    80,7,10, 0,8,97, 0,8,33, 0,9,162,
    0,8,1, 0,8,129, 0,8,65, 0,9,226,
    80,7,6, 0,8,89, 0,8,25, 0,9,146,
    83,7,59, 0,8,121, 0,8,57, 0,9,210,
    81,7,17, 0,8,105, 0,8,41, 0,9,178,
    0,8,9, 0,8,137, 0,8,73, 0,9,242,
    80,7,4, 0,8,85, 0,8,21, 80,8,258,
    83,7,43, 0,8,117, 0,8,53, 0,9,202,
    81,7,13, 0,8,101, 0,8,37, 0,9,170,
    0,8,5, 0,8,133, 0,8,69, 0,9,234,
    80,7,8, 0,8,93, 0,8,29, 0,9,154,
    84,7,83, 0,8,125, 0,8,61, 0,9,218,
    82,7,23, 0,8,109, 0,8,45, 0,9,186,
    0,8,13, 0,8,141, 0,8,77, 0,9,250,
    80,7,3, 0,8,83, 0,8,19, 85,8,195,
    83,7,35, 0,8,115, 0,8,51, 0,9,198,
    81,7,11, 0,8,99, 0,8,35, 0,9,166,
    0,8,3, 0,8,131, 0,8,67, 0,9,230,
    80,7,7, 0,8,91, 0,8,27, 0,9,150,
    84,7,67, 0,8,123, 0,8,59, 0,9,214,
    82,7,19, 0,8,107, 0,8,43, 0,9,182,
    0,8,11, 0,8,139, 0,8,75, 0,9,246,
    80,7,5, 0,8,87, 0,8,23, 192,8,0,
    83,7,51, 0,8,119, 0,8,55, 0,9,206,
    81,7,15, 0,8,103, 0,8,39, 0,9,174,
    0,8,7, 0,8,135, 0,8,71, 0,9,238,
    80,7,9, 0,8,95, 0,8,31, 0,9,158,
    84,7,99, 0,8,127, 0,8,63, 0,9,222,
    82,7,27, 0,8,111, 0,8,47, 0,9,190,
    0,8,15, 0,8,143, 0,8,79, 0,9,254,
    96,7,256, 0,8,80, 0,8,16, 84,8,115,
    82,7,31, 0,8,112, 0,8,48, 0,9,193,

    80,7,10, 0,8,96, 0,8,32, 0,9,161,
    0,8,0, 0,8,128, 0,8,64, 0,9,225,
    80,7,6, 0,8,88, 0,8,24, 0,9,145,
    83,7,59, 0,8,120, 0,8,56, 0,9,209,
    81,7,17, 0,8,104, 0,8,40, 0,9,177,
    0,8,8, 0,8,136, 0,8,72, 0,9,241,
    80,7,4, 0,8,84, 0,8,20, 85,8,227,
    83,7,43, 0,8,116, 0,8,52, 0,9,201,
    81,7,13, 0,8,100, 0,8,36, 0,9,169,
    0,8,4, 0,8,132, 0,8,68, 0,9,233,
    80,7,8, 0,8,92, 0,8,28, 0,9,153,
    84,7,83, 0,8,124, 0,8,60, 0,9,217,
    82,7,23, 0,8,108, 0,8,44, 0,9,185,
    0,8,12, 0,8,140, 0,8,76, 0,9,249,
    80,7,3, 0,8,82, 0,8,18, 85,8,163,
    83,7,35, 0,8,114, 0,8,50, 0,9,197,
    81,7,11, 0,8,98, 0,8,34, 0,9,165,
    0,8,2, 0,8,130, 0,8,66, 0,9,229,
    80,7,7, 0,8,90, 0,8,26, 0,9,149,
    84,7,67, 0,8,122, 0,8,58, 0,9,213,
    82,7,19, 0,8,106, 0,8,42, 0,9,181,
    0,8,10, 0,8,138, 0,8,74, 0,9,245,
    80,7,5, 0,8,86, 0,8,22, 192,8,0,
    83,7,51, 0,8,118, 0,8,54, 0,9,205,
    81,7,15, 0,8,102, 0,8,38, 0,9,173,
    0,8,6, 0,8,134, 0,8,70, 0,9,237,
    80,7,9, 0,8,94, 0,8,30, 0,9,157,
    84,7,99, 0,8,126, 0,8,62, 0,9,221,
    82,7,27, 0,8,110, 0,8,46, 0,9,189,
    0,8,14, 0,8,142, 0,8,78, 0,9,253,
    96,7,256, 0,8,81, 0,8,17, 85,8,131,
    82,7,31, 0,8,113, 0,8,49, 0,9,195,
    80,7,10, 0,8,97, 0,8,33, 0,9,163,
    0,8,1, 0,8,129, 0,8,65, 0,9,227,
    80,7,6, 0,8,89, 0,8,25, 0,9,147,
    83,7,59, 0,8,121, 0,8,57, 0,9,211,
    81,7,17, 0,8,105, 0,8,41, 0,9,179,
    0,8,9, 0,8,137, 0,8,73, 0,9,243,
    80,7,4, 0,8,85, 0,8,21, 80,8,258,
    83,7,43, 0,8,117, 0,8,53, 0,9,203,
    81,7,13, 0,8,101, 0,8,37, 0,9,171,
    0,8,5, 0,8,133, 0,8,69, 0,9,235,
    80,7,8, 0,8,93, 0,8,29, 0,9,155,
    84,7,83, 0,8,125, 0,8,61, 0,9,219,
    82,7,23, 0,8,109, 0,8,45, 0,9,187,
    0,8,13, 0,8,141, 0,8,77, 0,9,251,
    80,7,3, 0,8,83, 0,8,19, 85,8,195,
    83,7,35, 0,8,115, 0,8,51, 0,9,199,
    81,7,11, 0,8,99, 0,8,35, 0,9,167,
    0,8,3, 0,8,131, 0,8,67, 0,9,231,
    80,7,7, 0,8,91, 0,8,27, 0,9,151,
    84,7,67, 0,8,123, 0,8,59, 0,9,215,
    82,7,19, 0,8,107, 0,8,43, 0,9,183,
    0,8,11, 0,8,139, 0,8,75, 0,9,247,
    80,7,5, 0,8,87, 0,8,23, 192,8,0,
    83,7,51, 0,8,119, 0,8,55, 0,9,207,
    81,7,15, 0,8,103, 0,8,39, 0,9,175,
    0,8,7, 0,8,135, 0,8,71, 0,9,239,
    80,7,9, 0,8,95, 0,8,31, 0,9,159,
    84,7,99, 0,8,127, 0,8,63, 0,9,223,
    82,7,27, 0,8,111, 0,8,47, 0,9,191,
    0,8,15, 0,8,143, 0,8,79, 0,9,255
];
var fixed_td = [
    80,5,1, 87,5,257, 83,5,17, 91,5,4097,
    81,5,5, 89,5,1025, 85,5,65, 93,5,16385,
    80,5,3, 88,5,513, 84,5,33, 92,5,8193,
    82,5,9, 90,5,2049, 86,5,129, 192,5,24577,
    80,5,2, 87,5,385, 83,5,25, 91,5,6145,
    81,5,7, 89,5,1537, 85,5,97, 93,5,24577,
    80,5,4, 88,5,769, 84,5,49, 92,5,12289,
    82,5,13, 90,5,3073, 86,5,193, 192,5,24577
];

  // Tables for deflate from PKZIP's appnote.txt.
  var cplens = [ // Copy lengths for literal codes 257..285
        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
        35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
  ];

  // see note #13 above about 258
  var cplext = [ // Extra bits for literal codes 257..285
        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,
        3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 112, 112  // 112==invalid
  ];

 var cpdist = [ // Copy offsets for distance codes 0..29
        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
        257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
        8193, 12289, 16385, 24577
  ];

  var cpdext = [ // Extra bits for distance codes
        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,
        7, 7, 8, 8, 9, 9, 10, 10, 11, 11,
        12, 12, 13, 13];

//
// ZStream.java
//

function ZStream() {
}


ZStream.prototype.inflateInit = function(w, nowrap) {
    if (!w) {
	w = DEF_WBITS;
    }
    if (nowrap) {
	nowrap = false;
    }
    this.istate = new Inflate();
    return this.istate.inflateInit(this, nowrap?-w:w);
}

ZStream.prototype.inflate = function(f) {
    if(this.istate==null) return Z_STREAM_ERROR;
    return this.istate.inflate(this, f);
}

ZStream.prototype.inflateEnd = function(){
    if(this.istate==null) return Z_STREAM_ERROR;
    var ret=istate.inflateEnd(this);
    this.istate = null;
    return ret;
}
ZStream.prototype.inflateSync = function(){
    // if(istate == null) return Z_STREAM_ERROR;
    return istate.inflateSync(this);
}
ZStream.prototype.inflateSetDictionary = function(dictionary, dictLength){
    // if(istate == null) return Z_STREAM_ERROR;
    return istate.inflateSetDictionary(this, dictionary, dictLength);
}

/*

  public int deflateInit(int level){
    return deflateInit(level, MAX_WBITS);
  }
  public int deflateInit(int level, boolean nowrap){
    return deflateInit(level, MAX_WBITS, nowrap);
  }
  public int deflateInit(int level, int bits){
    return deflateInit(level, bits, false);
  }
  public int deflateInit(int level, int bits, boolean nowrap){
    dstate=new Deflate();
    return dstate.deflateInit(this, level, nowrap?-bits:bits);
  }
  public int deflate(int flush){
    if(dstate==null){
      return Z_STREAM_ERROR;
    }
    return dstate.deflate(this, flush);
  }
  public int deflateEnd(){
    if(dstate==null) return Z_STREAM_ERROR;
    int ret=dstate.deflateEnd();
    dstate=null;
    return ret;
  }
  public int deflateParams(int level, int strategy){
    if(dstate==null) return Z_STREAM_ERROR;
    return dstate.deflateParams(this, level, strategy);
  }
  public int deflateSetDictionary (byte[] dictionary, int dictLength){
    if(dstate == null)
      return Z_STREAM_ERROR;
    return dstate.deflateSetDictionary(this, dictionary, dictLength);
  }

*/

/*
  // Flush as much pending output as possible. All deflate() output goes
  // through this function so some applications may wish to modify it
  // to avoid allocating a large strm->next_out buffer and copying into it.
  // (See also read_buf()).
  void flush_pending(){
    int len=dstate.pending;

    if(len>avail_out) len=avail_out;
    if(len==0) return;

    if(dstate.pending_buf.length<=dstate.pending_out ||
       next_out.length<=next_out_index ||
       dstate.pending_buf.length<(dstate.pending_out+len) ||
       next_out.length<(next_out_index+len)){
      System.out.println(dstate.pending_buf.length+", "+dstate.pending_out+
			 ", "+next_out.length+", "+next_out_index+", "+len);
      System.out.println("avail_out="+avail_out);
    }

    System.arraycopy(dstate.pending_buf, dstate.pending_out,
		     next_out, next_out_index, len);

    next_out_index+=len;
    dstate.pending_out+=len;
    total_out+=len;
    avail_out-=len;
    dstate.pending-=len;
    if(dstate.pending==0){
      dstate.pending_out=0;
    }
  }

  // Read a new buffer from the current input stream, update the adler32
  // and total number of bytes read.  All deflate() input goes through
  // this function so some applications may wish to modify it to avoid
  // allocating a large strm->next_in buffer and copying from it.
  // (See also flush_pending()).
  int read_buf(byte[] buf, int start, int size) {
    int len=avail_in;

    if(len>size) len=size;
    if(len==0) return 0;

    avail_in-=len;

    if(dstate.noheader==0) {
      adler=_adler.adler32(adler, next_in, next_in_index, len);
    }
    System.arraycopy(next_in, next_in_index, buf, start, len);
    next_in_index  += len;
    total_in += len;
    return len;
  }

  public void free(){
    next_in=null;
    next_out=null;
    msg=null;
    _adler=null;
  }
}
*/


//
// Inflate.java
//

function Inflate() {
    this.was = [0];
}

Inflate.prototype.inflateReset = function(z) {
    if(z == null || z.istate == null) return Z_STREAM_ERROR;

    z.total_in = z.total_out = 0;
    z.msg = null;
    z.istate.mode = z.istate.nowrap!=0 ? BLOCKS : METHOD;
    z.istate.blocks.reset(z, null);
    return Z_OK;
}

Inflate.prototype.inflateEnd = function(z){
    if(this.blocks != null)
      this.blocks.free(z);
    this.blocks=null;
    return Z_OK;
}

Inflate.prototype.inflateInit = function(z, w){
    z.msg = null;
    this.blocks = null;

    // handle undocumented nowrap option (no zlib header or check)
    nowrap = 0;
    if(w < 0){
      w = - w;
      nowrap = 1;
    }

    // set window size
    if(w<8 ||w>15){
      this.inflateEnd(z);
      return Z_STREAM_ERROR;
    }
    this.wbits=w;

    z.istate.blocks=new InfBlocks(z,
				  z.istate.nowrap!=0 ? null : this,
				  1<<w);

    // reset state
    this.inflateReset(z);
    return Z_OK;
  }

Inflate.prototype.inflate = function(z, f){
    var r, b;

    if(z == null || z.istate == null || z.next_in == null)
      return Z_STREAM_ERROR;
    f = f == Z_FINISH ? Z_BUF_ERROR : Z_OK;
    r = Z_BUF_ERROR;
    while (true){
      switch (z.istate.mode){
      case METHOD:

        if(z.avail_in==0)return r;r=f;

        z.avail_in--; z.total_in++;
        if(((z.istate.method = z.next_in[z.next_in_index++])&0xf)!=Z_DEFLATED){
          z.istate.mode = BAD;
          z.msg="unknown compression method";
          z.istate.marker = 5;       // can't try inflateSync
          break;
        }
        if((z.istate.method>>4)+8>z.istate.wbits){
          z.istate.mode = BAD;
          z.msg="invalid window size";
          z.istate.marker = 5;       // can't try inflateSync
          break;
        }
        z.istate.mode=FLAG;
      case FLAG:

        if(z.avail_in==0)return r;r=f;

        z.avail_in--; z.total_in++;
        b = (z.next_in[z.next_in_index++])&0xff;

        if((((z.istate.method << 8)+b) % 31)!=0){
          z.istate.mode = BAD;
          z.msg = "incorrect header check";
          z.istate.marker = 5;       // can't try inflateSync
          break;
        }

        if((b&PRESET_DICT)==0){
          z.istate.mode = BLOCKS;
          break;
        }
        z.istate.mode = DICT4;
      case DICT4:

        if(z.avail_in==0)return r;r=f;

        z.avail_in--; z.total_in++;
        z.istate.need=((z.next_in[z.next_in_index++]&0xff)<<24)&0xff000000;
        z.istate.mode=DICT3;
      case DICT3:

        if(z.avail_in==0)return r;r=f;

        z.avail_in--; z.total_in++;
        z.istate.need+=((z.next_in[z.next_in_index++]&0xff)<<16)&0xff0000;
        z.istate.mode=DICT2;
      case DICT2:

        if(z.avail_in==0)return r;r=f;

        z.avail_in--; z.total_in++;
        z.istate.need+=((z.next_in[z.next_in_index++]&0xff)<<8)&0xff00;
        z.istate.mode=DICT1;
      case DICT1:

        if(z.avail_in==0)return r;r=f;

        z.avail_in--; z.total_in++;
        z.istate.need += (z.next_in[z.next_in_index++]&0xff);
        z.adler = z.istate.need;
        z.istate.mode = DICT0;
        return Z_NEED_DICT;
      case DICT0:
        z.istate.mode = BAD;
        z.msg = "need dictionary";
        z.istate.marker = 0;       // can try inflateSync
        return Z_STREAM_ERROR;
      case BLOCKS:

        r = z.istate.blocks.proc(z, r);
        if(r == Z_DATA_ERROR){
          z.istate.mode = BAD;
          z.istate.marker = 0;     // can try inflateSync
          break;
        }
        if(r == Z_OK){
          r = f;
        }
        if(r != Z_STREAM_END){
          return r;
        }
        r = f;
        z.istate.blocks.reset(z, z.istate.was);
        if(z.istate.nowrap!=0){
          z.istate.mode=DONE;
          break;
        }
        z.istate.mode=CHECK4;
      case CHECK4:

        if(z.avail_in==0)return r;r=f;

        z.avail_in--; z.total_in++;
        z.istate.need=((z.next_in[z.next_in_index++]&0xff)<<24)&0xff000000;
        z.istate.mode=CHECK3;
      case CHECK3:

        if(z.avail_in==0)return r;r=f;

        z.avail_in--; z.total_in++;
        z.istate.need+=((z.next_in[z.next_in_index++]&0xff)<<16)&0xff0000;
        z.istate.mode = CHECK2;
      case CHECK2:

        if(z.avail_in==0)return r;r=f;

        z.avail_in--; z.total_in++;
        z.istate.need+=((z.next_in[z.next_in_index++]&0xff)<<8)&0xff00;
        z.istate.mode = CHECK1;
      case CHECK1:

        if(z.avail_in==0)return r;r=f;

        z.avail_in--; z.total_in++;
        z.istate.need+=(z.next_in[z.next_in_index++]&0xff);

        if(((z.istate.was[0])) != ((z.istate.need))){
          z.istate.mode = BAD;
          z.msg = "incorrect data check";
          z.istate.marker = 5;       // can't try inflateSync
          break;
        }

        z.istate.mode = DONE;
      case DONE:
        return Z_STREAM_END;
      case BAD:
        return Z_DATA_ERROR;
      default:
        return Z_STREAM_ERROR;
      }
    }
  }


Inflate.prototype.inflateSetDictionary = function(z,  dictionary, dictLength) {
    var index=0;
    var length = dictLength;
    if(z==null || z.istate == null|| z.istate.mode != DICT0)
      return Z_STREAM_ERROR;

    if(z._adler.adler32(1, dictionary, 0, dictLength)!=z.adler){
      return Z_DATA_ERROR;
    }

    z.adler = z._adler.adler32(0, null, 0, 0);

    if(length >= (1<<z.istate.wbits)){
      length = (1<<z.istate.wbits)-1;
      index=dictLength - length;
    }
    z.istate.blocks.set_dictionary(dictionary, index, length);
    z.istate.mode = BLOCKS;
    return Z_OK;
  }

//  static private byte[] mark = {(byte)0, (byte)0, (byte)0xff, (byte)0xff};
var mark = [0, 0, 255, 255]

Inflate.prototype.inflateSync = function(z){
    var n;       // number of bytes to look at
    var p;       // pointer to bytes
    var m;       // number of marker bytes found in a row
    var r, w;   // temporaries to save total_in and total_out

    // set up
    if(z == null || z.istate == null)
      return Z_STREAM_ERROR;
    if(z.istate.mode != BAD){
      z.istate.mode = BAD;
      z.istate.marker = 0;
    }
    if((n=z.avail_in)==0)
      return Z_BUF_ERROR;
    p=z.next_in_index;
    m=z.istate.marker;

    // search
    while (n!=0 && m < 4){
      if(z.next_in[p] == mark[m]){
        m++;
      }
      else if(z.next_in[p]!=0){
        m = 0;
      }
      else{
        m = 4 - m;
      }
      p++; n--;
    }

    // restore
    z.total_in += p-z.next_in_index;
    z.next_in_index = p;
    z.avail_in = n;
    z.istate.marker = m;

    // return no joy or set up to restart on a new block
    if(m != 4){
      return Z_DATA_ERROR;
    }
    r=z.total_in;  w=z.total_out;
    this.inflateReset(z);
    z.total_in=r;  z.total_out = w;
    z.istate.mode = BLOCKS;
    return Z_OK;
}

  // Returns true if inflate is currently at the end of a block generated
  // by Z_SYNC_FLUSH or Z_FULL_FLUSH. This function is used by one PPP
  // implementation to provide an additional safety check. PPP uses Z_SYNC_FLUSH
  // but removes the length bytes of the resulting empty stored block. When
  // decompressing, PPP checks that at the end of input packet, inflate is
  // waiting for these length bytes.
Inflate.prototype.inflateSyncPoint = function(z){
    if(z == null || z.istate == null || z.istate.blocks == null)
      return Z_STREAM_ERROR;
    return z.istate.blocks.sync_point();
}


//
// InfBlocks.java
//

var INFBLOCKS_BORDER = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];

function InfBlocks(z, checkfn, w) {
    this.hufts=new Int32Array(MANY*3);
    this.window=new Uint8Array(w);
    this.end=w;
    this.checkfn = checkfn;
    this.mode = IB_TYPE;
    this.reset(z, null);

    this.left = 0;            // if STORED, bytes left to copy

    this.table = 0;           // table lengths (14 bits)
    this.index = 0;           // index into blens (or border)
    this.blens = null;         // bit lengths of codes
    this.bb=new Int32Array(1); // bit length tree depth
    this.tb=new Int32Array(1); // bit length decoding tree

    this.codes = new InfCodes();

    this.last = 0;            // true if this block is the last block

  // mode independent information
    this.bitk = 0;            // bits in bit buffer
    this.bitb = 0;            // bit buffer
    this.read = 0;            // window read pointer
    this.write = 0;           // window write pointer
    this.check = 0;          // check on output

    this.inftree=new InfTree();
}




InfBlocks.prototype.reset = function(z, c){
    if(c) c[0]=this.check;
    if(this.mode==IB_CODES){
      this.codes.free(z);
    }
    this.mode=IB_TYPE;
    this.bitk=0;
    this.bitb=0;
    this.read=this.write=0;

    if(this.checkfn)
      z.adler=this.check=z._adler.adler32(0, null, 0, 0);
  }

 InfBlocks.prototype.proc = function(z, r){
    var t;              // temporary storage
    var b;              // bit buffer
    var k;              // bits in bit buffer
    var p;              // input data pointer
    var n;              // bytes available there
    var q;              // output window write pointer
    var m;              // bytes to end of window or read pointer

    // copy input/output information to locals (UPDATE macro restores)
    {p=z.next_in_index;n=z.avail_in;b=this.bitb;k=this.bitk;}
    {q=this.write;m=(q<this.read ? this.read-q-1 : this.end-q);}

    // process input based on current state
    while(true){
      switch (this.mode){
      case IB_TYPE:

	while(k<(3)){
	  if(n!=0){
	    r=Z_OK;
	  }
	  else{
	    this.bitb=b; this.bitk=k;
	    z.avail_in=n;
	    z.total_in+=p-z.next_in_index;z.next_in_index=p;
	    this.write=q;
	    return this.inflate_flush(z,r);
	  };
	  n--;
	  b|=(z.next_in[p++]&0xff)<<k;
	  k+=8;
	}
	t = (b & 7);
	this.last = t & 1;

	switch (t >>> 1){
        case 0:                         // stored
          {b>>>=(3);k-=(3);}
          t = k & 7;                    // go to byte boundary

          {b>>>=(t);k-=(t);}
          this.mode = IB_LENS;                  // get length of stored block
          break;
        case 1:                         // fixed
          {
              var bl=new Int32Array(1);
	      var bd=new Int32Array(1);
              var tl=[];
	      var td=[];

	      inflate_trees_fixed(bl, bd, tl, td, z);
              this.codes.init(bl[0], bd[0], tl[0], 0, td[0], 0, z);
          }

          {b>>>=(3);k-=(3);}

          this.mode = IB_CODES;
          break;
        case 2:                         // dynamic

          {b>>>=(3);k-=(3);}

          this.mode = IB_TABLE;
          break;
        case 3:                         // illegal

          {b>>>=(3);k-=(3);}
          this.mode = BAD;
          z.msg = "invalid block type";
          r = Z_DATA_ERROR;

	  this.bitb=b; this.bitk=k;
	  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	  this.write=q;
	  return this.inflate_flush(z,r);
	}
	break;
      case IB_LENS:
	while(k<(32)){
	  if(n!=0){
	    r=Z_OK;
	  }
	  else{
	    this.bitb=b; this.bitk=k;
	    z.avail_in=n;
	    z.total_in+=p-z.next_in_index;z.next_in_index=p;
	    this.write=q;
	    return this.inflate_flush(z,r);
	  };
	  n--;
	  b|=(z.next_in[p++]&0xff)<<k;
	  k+=8;
	}

	if ((((~b) >>> 16) & 0xffff) != (b & 0xffff)){
	  this.mode = BAD;
	  z.msg = "invalid stored block lengths";
	  r = Z_DATA_ERROR;

	  this.bitb=b; this.bitk=k;
	  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	  this.write=q;
	  return this.inflate_flush(z,r);
	}
	this.left = (b & 0xffff);
	b = k = 0;                       // dump bits
	this.mode = left!=0 ? IB_STORED : (this.last!=0 ? IB_DRY : IB_TYPE);
	break;
      case IB_STORED:
	if (n == 0){
	  this.bitb=b; this.bitk=k;
	  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	  write=q;
	  return this.inflate_flush(z,r);
	}

	if(m==0){
	  if(q==end&&read!=0){
	    q=0; m=(q<this.read ? this.read-q-1 : this.end-q);
	  }
	  if(m==0){
	    this.write=q;
	    r=this.inflate_flush(z,r);
	    q=this.write; m = (q < this.read ? this.read-q-1 : this.end-q);
	    if(q==this.end && this.read != 0){
	      q=0; m = (q < this.read ? this.read-q-1 : this.end-q);
	    }
	    if(m==0){
	      this.bitb=b; this.bitk=k;
	      z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	      this.write=q;
	      return this.inflate_flush(z,r);
	    }
	  }
	}
	r=Z_OK;

	t = this.left;
	if(t>n) t = n;
	if(t>m) t = m;
	arrayCopy(z.next_in, p, window, q, t);
	p += t;  n -= t;
	q += t;  m -= t;
	if ((this.left -= t) != 0)
	  break;
	this.mode = (this.last != 0 ? IB_DRY : IB_TYPE);
	break;
      case IB_TABLE:

	while(k<(14)){
	  if(n!=0){
	    r=Z_OK;
	  }
	  else{
	    this.bitb=b; this.bitk=k;
	    z.avail_in=n;
	    z.total_in+=p-z.next_in_index;z.next_in_index=p;
	    this.write=q;
	    return this.inflate_flush(z,r);
	  };
	  n--;
	  b|=(z.next_in[p++]&0xff)<<k;
	  k+=8;
	}

	this.table = t = (b & 0x3fff);
	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29)
	  {
	    this.mode = IB_BAD;
	    z.msg = "too many length or distance symbols";
	    r = Z_DATA_ERROR;

	    this.bitb=b; this.bitk=k;
	    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	    this.write=q;
	    return this.inflate_flush(z,r);
	  }
	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);
	if(this.blens==null || this.blens.length<t){
	    this.blens=new Int32Array(t);
	}
	else{
	  for(var i=0; i<t; i++){
              this.blens[i]=0;
          }
	}

	{b>>>=(14);k-=(14);}

	this.index = 0;
	mode = IB_BTREE;
      case IB_BTREE:
	while (this.index < 4 + (this.table >>> 10)){
	  while(k<(3)){
	    if(n!=0){
	      r=Z_OK;
	    }
	    else{
	      this.bitb=b; this.bitk=k;
	      z.avail_in=n;
	      z.total_in+=p-z.next_in_index;z.next_in_index=p;
	      this.write=q;
	      return this.inflate_flush(z,r);
	    };
	    n--;
	    b|=(z.next_in[p++]&0xff)<<k;
	    k+=8;
	  }

	  this.blens[INFBLOCKS_BORDER[this.index++]] = b&7;

	  {b>>>=(3);k-=(3);}
	}

	while(this.index < 19){
	  this.blens[INFBLOCKS_BORDER[this.index++]] = 0;
	}

	this.bb[0] = 7;
	t = this.inftree.inflate_trees_bits(this.blens, this.bb, this.tb, this.hufts, z);
	if (t != Z_OK){
	  r = t;
	  if (r == Z_DATA_ERROR){
	    this.blens=null;
	    this.mode = IB_BAD;
	  }

	  this.bitb=b; this.bitk=k;
	  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	  write=q;
	  return this.inflate_flush(z,r);
	}

	this.index = 0;
	this.mode = IB_DTREE;
      case IB_DTREE:
	while (true){
	  t = this.table;
	  if(!(this.index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))){
	    break;
	  }

	  var h; //int[]
	  var i, j, c;

	  t = this.bb[0];

	  while(k<(t)){
	    if(n!=0){
	      r=Z_OK;
	    }
	    else{
	      this.bitb=b; this.bitk=k;
	      z.avail_in=n;
	      z.total_in+=p-z.next_in_index;z.next_in_index=p;
	      this.write=q;
	      return this.inflate_flush(z,r);
	    };
	    n--;
	    b|=(z.next_in[p++]&0xff)<<k;
	    k+=8;
	  }

//	  if (this.tb[0]==-1){
//            dlog("null...");
//	  }

	  t=this.hufts[(this.tb[0]+(b & inflate_mask[t]))*3+1];
	  c=this.hufts[(this.tb[0]+(b & inflate_mask[t]))*3+2];

	  if (c < 16){
	    b>>>=(t);k-=(t);
	    this.blens[this.index++] = c;
	  }
	  else { // c == 16..18
	    i = c == 18 ? 7 : c - 14;
	    j = c == 18 ? 11 : 3;

	    while(k<(t+i)){
	      if(n!=0){
		r=Z_OK;
	      }
	      else{
		this.bitb=b; this.bitk=k;
		z.avail_in=n;
		z.total_in+=p-z.next_in_index;z.next_in_index=p;
		this.write=q;
		return this.inflate_flush(z,r);
	      };
	      n--;
	      b|=(z.next_in[p++]&0xff)<<k;
	      k+=8;
	    }

	    b>>>=(t);k-=(t);

	    j += (b & inflate_mask[i]);

	    b>>>=(i);k-=(i);

	    i = this.index;
	    t = this.table;
	    if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) ||
		(c == 16 && i < 1)){
	      this.blens=null;
	      this.mode = IB_BAD;
	      z.msg = "invalid bit length repeat";
	      r = Z_DATA_ERROR;

	      this.bitb=b; this.bitk=k;
	      z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	      this.write=q;
	      return this.inflate_flush(z,r);
	    }

	    c = c == 16 ? this.blens[i-1] : 0;
	    do{
	      this.blens[i++] = c;
	    }
	    while (--j!=0);
	    this.index = i;
	  }
	}

	this.tb[0]=-1;
	{
	    var bl=new Int32Array(1);
	    var bd=new Int32Array(1);
	    var tl=new Int32Array(1);
	    var td=new Int32Array(1);
	    bl[0] = 9;         // must be <= 9 for lookahead assumptions
	    bd[0] = 6;         // must be <= 9 for lookahead assumptions

	    t = this.table;
	    t = this.inftree.inflate_trees_dynamic(257 + (t & 0x1f),
					      1 + ((t >> 5) & 0x1f),
					      this.blens, bl, bd, tl, td, this.hufts, z);

	    if (t != Z_OK){
	        if (t == Z_DATA_ERROR){
	            this.blens=null;
	            this.mode = BAD;
	        }
	        r = t;

	        this.bitb=b; this.bitk=k;
	        z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	        this.write=q;
	        return this.inflate_flush(z,r);
	    }
	    this.codes.init(bl[0], bd[0], this.hufts, tl[0], this.hufts, td[0], z);
	}
	this.mode = IB_CODES;
      case IB_CODES:
	this.bitb=b; this.bitk=k;
	z.avail_in=n; z.total_in+=p-z.next_in_index;z.next_in_index=p;
	this.write=q;

	if ((r = this.codes.proc(this, z, r)) != Z_STREAM_END){
	  return this.inflate_flush(z, r);
	}
	r = Z_OK;
	this.codes.free(z);

	p=z.next_in_index; n=z.avail_in;b=this.bitb;k=this.bitk;
	q=this.write;m = (q < this.read ? this.read-q-1 : this.end-q);

	if (this.last==0){
	  this.mode = IB_TYPE;
	  break;
	}
	this.mode = IB_DRY;
      case IB_DRY:
	this.write=q;
	r = this.inflate_flush(z, r);
	q=this.write; m = (q < this.read ? this.read-q-1 : this.end-q);
	if (this.read != this.write){
	  this.bitb=b; this.bitk=k;
	  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	  this.write=q;
	  return this.inflate_flush(z, r);
	}
	mode = DONE;
      case IB_DONE:
	r = Z_STREAM_END;

	this.bitb=b; this.bitk=k;
	z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	this.write=q;
	return this.inflate_flush(z, r);
      case IB_BAD:
	r = Z_DATA_ERROR;

	this.bitb=b; this.bitk=k;
	z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	this.write=q;
	return this.inflate_flush(z, r);

      default:
	r = Z_STREAM_ERROR;

	this.bitb=b; this.bitk=k;
	z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	this.write=q;
	return this.inflate_flush(z, r);
      }
    }
  }

InfBlocks.prototype.free = function(z){
    this.reset(z, null);
    this.window=null;
    this.hufts=null;
}

InfBlocks.prototype.set_dictionary = function(d, start, n){
    arrayCopy(d, start, window, 0, n);
    this.read = this.write = n;
}

  // Returns true if inflate is currently at the end of a block generated
  // by Z_SYNC_FLUSH or Z_FULL_FLUSH.
InfBlocks.prototype.sync_point = function(){
    return this.mode == IB_LENS;
}

  // copy as much as possible from the sliding window to the output area
InfBlocks.prototype.inflate_flush = function(z, r){
    var n;
    var p;
    var q;

    // local copies of source and destination pointers
    p = z.next_out_index;
    q = this.read;

    // compute number of bytes to copy as far as end of window
    n = ((q <= this.write ? this.write : this.end) - q);
    if (n > z.avail_out) n = z.avail_out;
    if (n!=0 && r == Z_BUF_ERROR) r = Z_OK;

    // update counters
    z.avail_out -= n;
    z.total_out += n;

    // update check information
    if(this.checkfn != null)
      z.adler=this.check=z._adler.adler32(this.check, this.window, q, n);

    // copy as far as end of window
    arrayCopy(this.window, q, z.next_out, p, n);
    p += n;
    q += n;

    // see if more to copy at beginning of window
    if (q == this.end){
      // wrap pointers
      q = 0;
      if (this.write == this.end)
        this.write = 0;

      // compute bytes to copy
      n = this.write - q;
      if (n > z.avail_out) n = z.avail_out;
      if (n!=0 && r == Z_BUF_ERROR) r = Z_OK;

      // update counters
      z.avail_out -= n;
      z.total_out += n;

      // update check information
      if(this.checkfn != null)
	z.adler=this.check=z._adler.adler32(this.check, this.window, q, n);

      // copy
      arrayCopy(this.window, q, z.next_out, p, n);
      p += n;
      q += n;
    }

    // update pointers
    z.next_out_index = p;
    this.read = q;

    // done
    return r;
  }

//
// InfCodes.java
//

var IC_START=0;  // x: set up for LEN
var IC_LEN=1;    // i: get length/literal/eob next
var IC_LENEXT=2; // i: getting length extra (have base)
var IC_DIST=3;   // i: get distance next
var IC_DISTEXT=4;// i: getting distance extra
var IC_COPY=5;   // o: copying bytes in window, waiting for space
var IC_LIT=6;    // o: got literal, waiting for output space
var IC_WASH=7;   // o: got eob, possibly still output waiting
var IC_END=8;    // x: got eob and all data flushed
var IC_BADCODE=9;// x: got error

function InfCodes() {
}

InfCodes.prototype.init = function(bl, bd, tl, tl_index, td, td_index, z) {
    this.mode=IC_START;
    this.lbits=bl;
    this.dbits=bd;
    this.ltree=tl;
    this.ltree_index=tl_index;
    this.dtree = td;
    this.dtree_index=td_index;
    this.tree=null;
}

InfCodes.prototype.proc = function(s, z, r){
    var j;              // temporary storage
    var t;              // temporary pointer (int[])
    var tindex;         // temporary pointer
    var e;              // extra bits or operation
    var b=0;            // bit buffer
    var k=0;            // bits in bit buffer
    var p=0;            // input data pointer
    var n;              // bytes available there
    var q;              // output window write pointer
    var m;              // bytes to end of window or read pointer
    var f;              // pointer to copy strings from

    // copy input/output information to locals (UPDATE macro restores)
    p=z.next_in_index;n=z.avail_in;b=s.bitb;k=s.bitk;
    q=s.write;m=q<s.read?s.read-q-1:s.end-q;

    // process input and output based on current state
    while (true){
      switch (this.mode){
	// waiting for "i:"=input, "o:"=output, "x:"=nothing
      case IC_START:         // x: set up for LEN
	if (m >= 258 && n >= 10){

	  s.bitb=b;s.bitk=k;
	  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	  s.write=q;
	  r = this.inflate_fast(this.lbits, this.dbits,
			   this.ltree, this.ltree_index,
			   this.dtree, this.dtree_index,
			   s, z);

	  p=z.next_in_index;n=z.avail_in;b=s.bitb;k=s.bitk;
	  q=s.write;m=q<s.read?s.read-q-1:s.end-q;

	  if (r != Z_OK){
	    this.mode = r == Z_STREAM_END ? IC_WASH : IC_BADCODE;
	    break;
	  }
	}
	this.need = this.lbits;
	this.tree = this.ltree;
	this.tree_index=this.ltree_index;

	this.mode = IC_LEN;
      case IC_LEN:           // i: get length/literal/eob next
	j = this.need;

	while(k<(j)){
	  if(n!=0)r=Z_OK;
	  else{

	    s.bitb=b;s.bitk=k;
	    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	    s.write=q;
	    return s.inflate_flush(z,r);
	  }
	  n--;
	  b|=(z.next_in[p++]&0xff)<<k;
	  k+=8;
	}

	tindex=(this.tree_index+(b&inflate_mask[j]))*3;

	b>>>=(this.tree[tindex+1]);
	k-=(this.tree[tindex+1]);

	e=this.tree[tindex];

	if(e == 0){               // literal
	  this.lit = this.tree[tindex+2];
	  this.mode = IC_LIT;
	  break;
	}
	if((e & 16)!=0 ){          // length
	  this.get = e & 15;
	  this.len = this.tree[tindex+2];
	  this.mode = IC_LENEXT;
	  break;
	}
	if ((e & 64) == 0){        // next table
	  this.need = e;
	  this.tree_index = tindex/3 + this.tree[tindex+2];
	  break;
	}
	if ((e & 32)!=0){               // end of block
	  this.mode = IC_WASH;
	  break;
	}
	this.mode = IC_BADCODE;        // invalid code
	z.msg = "invalid literal/length code";
	r = Z_DATA_ERROR;

	s.bitb=b;s.bitk=k;
	z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	s.write=q;
	return s.inflate_flush(z,r);

      case IC_LENEXT:        // i: getting length extra (have base)
	j = this.get;

	while(k<(j)){
	  if(n!=0)r=Z_OK;
	  else{

	    s.bitb=b;s.bitk=k;
	    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	    s.write=q;
	    return s.inflate_flush(z,r);
	  }
	  n--; b|=(z.next_in[p++]&0xff)<<k;
	  k+=8;
	}

	this.len += (b & inflate_mask[j]);

	b>>=j;
	k-=j;

	this.need = this.dbits;
	this.tree = this.dtree;
	this.tree_index = this.dtree_index;
	this.mode = IC_DIST;
      case IC_DIST:          // i: get distance next
	j = this.need;

	while(k<(j)){
	  if(n!=0)r=Z_OK;
	  else{

	    s.bitb=b;s.bitk=k;
	    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	    s.write=q;
	    return s.inflate_flush(z,r);
	  }
	  n--; b|=(z.next_in[p++]&0xff)<<k;
	  k+=8;
	}

	tindex=(this.tree_index+(b & inflate_mask[j]))*3;

	b>>=this.tree[tindex+1];
	k-=this.tree[tindex+1];

	e = (this.tree[tindex]);
	if((e & 16)!=0){               // distance
	  this.get = e & 15;
	  this.dist = this.tree[tindex+2];
	  this.mode = IC_DISTEXT;
	  break;
	}
	if ((e & 64) == 0){        // next table
	  this.need = e;
	  this.tree_index = tindex/3 + this.tree[tindex+2];
	  break;
	}
	this.mode = IC_BADCODE;        // invalid code
	z.msg = "invalid distance code";
	r = Z_DATA_ERROR;

	s.bitb=b;s.bitk=k;
	z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	s.write=q;
	return s.inflate_flush(z,r);

      case IC_DISTEXT:       // i: getting distance extra
	j = this.get;

	while(k<(j)){
	  if(n!=0)r=Z_OK;
	  else{

	    s.bitb=b;s.bitk=k;
	    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	    s.write=q;
	    return s.inflate_flush(z,r);
	  }
	  n--; b|=(z.next_in[p++]&0xff)<<k;
	  k+=8;
	}

	this.dist += (b & inflate_mask[j]);

	b>>=j;
	k-=j;

	this.mode = IC_COPY;
      case IC_COPY:          // o: copying bytes in window, waiting for space
        f = q - this.dist;
        while(f < 0){     // modulo window size-"while" instead
          f += s.end;     // of "if" handles invalid distances
	}
	while (this.len!=0){

	  if(m==0){
	    if(q==s.end&&s.read!=0){q=0;m=q<s.read?s.read-q-1:s.end-q;}
	    if(m==0){
	      s.write=q; r=s.inflate_flush(z,r);
	      q=s.write;m=q<s.read?s.read-q-1:s.end-q;

	      if(q==s.end&&s.read!=0){q=0;m=q<s.read?s.read-q-1:s.end-q;}

	      if(m==0){
		s.bitb=b;s.bitk=k;
		z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
		s.write=q;
		return s.inflate_flush(z,r);
	      }
	    }
	  }

	  s.window[q++]=s.window[f++]; m--;

	  if (f == s.end)
            f = 0;
	  this.len--;
	}
	this.mode = IC_START;
	break;
      case IC_LIT:           // o: got literal, waiting for output space
	if(m==0){
	  if(q==s.end&&s.read!=0){q=0;m=q<s.read?s.read-q-1:s.end-q;}
	  if(m==0){
	    s.write=q; r=s.inflate_flush(z,r);
	    q=s.write;m=q<s.read?s.read-q-1:s.end-q;

	    if(q==s.end&&s.read!=0){q=0;m=q<s.read?s.read-q-1:s.end-q;}
	    if(m==0){
	      s.bitb=b;s.bitk=k;
	      z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	      s.write=q;
	      return s.inflate_flush(z,r);
	    }
	  }
	}
	r=Z_OK;

	s.window[q++]=this.lit; m--;

	this.mode = IC_START;
	break;
      case IC_WASH:           // o: got eob, possibly more output
	if (k > 7){        // return unused byte, if any
	  k -= 8;
	  n++;
	  p--;             // can always return one
	}

	s.write=q; r=s.inflate_flush(z,r);
	q=s.write;m=q<s.read?s.read-q-1:s.end-q;

	if (s.read != s.write){
	  s.bitb=b;s.bitk=k;
	  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	  s.write=q;
	  return s.inflate_flush(z,r);
	}
	this.mode = IC_END;
      case IC_END:
	r = Z_STREAM_END;
	s.bitb=b;s.bitk=k;
	z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	s.write=q;
	return s.inflate_flush(z,r);

      case IC_BADCODE:       // x: got error

	r = Z_DATA_ERROR;

	s.bitb=b;s.bitk=k;
	z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	s.write=q;
	return s.inflate_flush(z,r);

      default:
	r = Z_STREAM_ERROR;

	s.bitb=b;s.bitk=k;
	z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	s.write=q;
	return s.inflate_flush(z,r);
      }
    }
  }

InfCodes.prototype.free = function(z){
    //  ZFREE(z, c);
}

  // Called with number of bytes left to write in window at least 258
  // (the maximum string length) and number of input bytes available
  // at least ten.  The ten bytes are six bytes for the longest length/
  // distance pair plus four bytes for overloading the bit buffer.

InfCodes.prototype.inflate_fast = function(bl, bd, tl, tl_index, td, td_index, s, z) {
    var t;                // temporary pointer
    var   tp;             // temporary pointer (int[])
    var tp_index;         // temporary pointer
    var e;                // extra bits or operation
    var b;                // bit buffer
    var k;                // bits in bit buffer
    var p;                // input data pointer
    var n;                // bytes available there
    var q;                // output window write pointer
    var m;                // bytes to end of window or read pointer
    var ml;               // mask for literal/length tree
    var md;               // mask for distance tree
    var c;                // bytes to copy
    var d;                // distance back to copy from
    var r;                // copy source pointer

    var tp_index_t_3;     // (tp_index+t)*3

    // load input, output, bit values
    p=z.next_in_index;n=z.avail_in;b=s.bitb;k=s.bitk;
    q=s.write;m=q<s.read?s.read-q-1:s.end-q;

    // initialize masks
    ml = inflate_mask[bl];
    md = inflate_mask[bd];

    // do until not enough input or output space for fast loop
    do {                          // assume called with m >= 258 && n >= 10
      // get literal/length code
      while(k<(20)){              // max bits for literal/length code
	n--;
	b|=(z.next_in[p++]&0xff)<<k;k+=8;
      }

      t= b&ml;
      tp=tl;
      tp_index=tl_index;
      tp_index_t_3=(tp_index+t)*3;
      if ((e = tp[tp_index_t_3]) == 0){
	b>>=(tp[tp_index_t_3+1]); k-=(tp[tp_index_t_3+1]);

	s.window[q++] = tp[tp_index_t_3+2];
	m--;
	continue;
      }
      do {

	b>>=(tp[tp_index_t_3+1]); k-=(tp[tp_index_t_3+1]);

	if((e&16)!=0){
	  e &= 15;
	  c = tp[tp_index_t_3+2] + (b & inflate_mask[e]);

	  b>>=e; k-=e;

	  // decode distance base of block to copy
	  while(k<(15)){           // max bits for distance code
	    n--;
	    b|=(z.next_in[p++]&0xff)<<k;k+=8;
	  }

	  t= b&md;
	  tp=td;
	  tp_index=td_index;
          tp_index_t_3=(tp_index+t)*3;
	  e = tp[tp_index_t_3];

	  do {

	    b>>=(tp[tp_index_t_3+1]); k-=(tp[tp_index_t_3+1]);

	    if((e&16)!=0){
	      // get extra bits to add to distance base
	      e &= 15;
	      while(k<(e)){         // get extra bits (up to 13)
		n--;
		b|=(z.next_in[p++]&0xff)<<k;k+=8;
	      }

	      d = tp[tp_index_t_3+2] + (b&inflate_mask[e]);

	      b>>=(e); k-=(e);

	      // do the copy
	      m -= c;
	      if (q >= d){                // offset before dest
		//  just copy
		r=q-d;
		if(q-r>0 && 2>(q-r)){
		  s.window[q++]=s.window[r++]; // minimum count is three,
		  s.window[q++]=s.window[r++]; // so unroll loop a little
		  c-=2;
		}
		else{
		  s.window[q++]=s.window[r++]; // minimum count is three,
		  s.window[q++]=s.window[r++]; // so unroll loop a little
		  c-=2;
		}
	      }
	      else{                  // else offset after destination
                r=q-d;
                do{
                  r+=s.end;          // force pointer in window
                }while(r<0);         // covers invalid distances
		e=s.end-r;
		if(c>e){             // if source crosses,
		  c-=e;              // wrapped copy
		  if(q-r>0 && e>(q-r)){
		    do{s.window[q++] = s.window[r++];}
		    while(--e!=0);
		  }
		  else{
		    arrayCopy(s.window, r, s.window, q, e);
		    q+=e; r+=e; e=0;
		  }
		  r = 0;                  // copy rest from start of window
		}

	      }

	      // copy all or what's left
              do{s.window[q++] = s.window[r++];}
		while(--c!=0);
	      break;
	    }
	    else if((e&64)==0){
	      t+=tp[tp_index_t_3+2];
	      t+=(b&inflate_mask[e]);
	      tp_index_t_3=(tp_index+t)*3;
	      e=tp[tp_index_t_3];
	    }
	    else{
	      z.msg = "invalid distance code";

	      c=z.avail_in-n;c=(k>>3)<c?k>>3:c;n+=c;p-=c;k-=c<<3;

	      s.bitb=b;s.bitk=k;
	      z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	      s.write=q;

	      return Z_DATA_ERROR;
	    }
	  }
	  while(true);
	  break;
	}

	if((e&64)==0){
	  t+=tp[tp_index_t_3+2];
	  t+=(b&inflate_mask[e]);
	  tp_index_t_3=(tp_index+t)*3;
	  if((e=tp[tp_index_t_3])==0){

	    b>>=(tp[tp_index_t_3+1]); k-=(tp[tp_index_t_3+1]);

	    s.window[q++]=tp[tp_index_t_3+2];
	    m--;
	    break;
	  }
	}
	else if((e&32)!=0){

	  c=z.avail_in-n;c=(k>>3)<c?k>>3:c;n+=c;p-=c;k-=c<<3;

	  s.bitb=b;s.bitk=k;
	  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	  s.write=q;

	  return Z_STREAM_END;
	}
	else{
	  z.msg="invalid literal/length code";

	  c=z.avail_in-n;c=(k>>3)<c?k>>3:c;n+=c;p-=c;k-=c<<3;

	  s.bitb=b;s.bitk=k;
	  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	  s.write=q;

	  return Z_DATA_ERROR;
	}
      }
      while(true);
    }
    while(m>=258 && n>= 10);

    // not enough input or output--restore pointers and return
    c=z.avail_in-n;c=(k>>3)<c?k>>3:c;n+=c;p-=c;k-=c<<3;

    s.bitb=b;s.bitk=k;
    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
    s.write=q;

    return Z_OK;
}

//
// InfTree.java
//

function InfTree() {
}

InfTree.prototype.huft_build = function(b, bindex, n, s, d, e, t, m, hp, hn, v) {

    // Given a list of code lengths and a maximum table size, make a set of
    // tables to decode that set of codes.  Return Z_OK on success, Z_BUF_ERROR
    // if the given code set is incomplete (the tables are still built in this
    // case), Z_DATA_ERROR if the input is invalid (an over-subscribed set of
    // lengths), or Z_MEM_ERROR if not enough memory.

    var a;                       // counter for codes of length k
    var f;                       // i repeats in table every f entries
    var g;                       // maximum code length
    var h;                       // table level
    var i;                       // counter, current code
    var j;                       // counter
    var k;                       // number of bits in current code
    var l;                       // bits per table (returned in m)
    var mask;                    // (1 << w) - 1, to avoid cc -O bug on HP
    var p;                       // pointer into c[], b[], or v[]
    var q;                       // points to current table
    var w;                       // bits before this table == (l * h)
    var xp;                      // pointer into x
    var y;                       // number of dummy codes added
    var z;                       // number of entries in current table

    // Generate counts for each bit length

    p = 0; i = n;
    do {
      this.c[b[bindex+p]]++; p++; i--;   // assume all entries <= BMAX
    }while(i!=0);

    if(this.c[0] == n){                // null input--all zero length codes
      t[0] = -1;
      m[0] = 0;
      return Z_OK;
    }

    // Find minimum and maximum length, bound *m by those
    l = m[0];
    for (j = 1; j <= BMAX; j++)
      if(this.c[j]!=0) break;
    k = j;                        // minimum code length
    if(l < j){
      l = j;
    }
    for (i = BMAX; i!=0; i--){
      if(this.c[i]!=0) break;
    }
    g = i;                        // maximum code length
    if(l > i){
      l = i;
    }
    m[0] = l;

    // Adjust last length count to fill out codes, if needed
    for (y = 1 << j; j < i; j++, y <<= 1){
      if ((y -= this.c[j]) < 0){
        return Z_DATA_ERROR;
      }
    }
    if ((y -= this.c[i]) < 0){
      return Z_DATA_ERROR;
    }
    this.c[i] += y;

    // Generate starting offsets into the value table for each length
    this.x[1] = j = 0;
    p = 1;  xp = 2;
    while (--i!=0) {                 // note that i == g from above
      this.x[xp] = (j += this.c[p]);
      xp++;
      p++;
    }

    // Make a table of values in order of bit lengths
    i = 0; p = 0;
    do {
      if ((j = b[bindex+p]) != 0){
        this.v[this.x[j]++] = i;
      }
      p++;
    }
    while (++i < n);
    n = this.x[g];                     // set n to length of v

    // Generate the Huffman codes and for each, make the table entries
    this.x[0] = i = 0;                 // first Huffman code is zero
    p = 0;                        // grab values in bit order
    h = -1;                       // no tables yet--level -1
    w = -l;                       // bits decoded == (l * h)
    this.u[0] = 0;                     // just to keep compilers happy
    q = 0;                        // ditto
    z = 0;                        // ditto

    // go through the bit lengths (k already is bits in shortest code)
    for (; k <= g; k++){
      a = this.c[k];
      while (a--!=0){
	// here i is the Huffman code of length k bits for value *p
	// make tables up to required level
        while (k > w + l){
          h++;
          w += l;                 // previous table always l bits
	  // compute minimum size table less than or equal to l bits
          z = g - w;
          z = (z > l) ? l : z;        // table size upper limit
          if((f=1<<(j=k-w))>a+1){     // try a k-w bit table
                                      // too few codes for k-w bit table
            f -= a + 1;               // deduct codes from patterns left
            xp = k;
            if(j < z){
              while (++j < z){        // try smaller tables up to z bits
                if((f <<= 1) <= this.c[++xp])
                  break;              // enough codes to use up j bits
                f -= this.c[xp];           // else deduct codes from patterns
              }
	    }
          }
          z = 1 << j;                 // table entries for j-bit table

	  // allocate new table
          if (this.hn[0] + z > MANY){       // (note: doesn't matter for fixed)
            return Z_DATA_ERROR;       // overflow of MANY
          }
          this.u[h] = q = /*hp+*/ this.hn[0];   // DEBUG
          this.hn[0] += z;

	  // connect to last table, if there is one
	  if(h!=0){
            this.x[h]=i;           // save pattern for backing up
            this.r[0]=j;     // bits in this table
            this.r[1]=l;     // bits to dump before this table
            j=i>>>(w - l);
            this.r[2] = (q - this.u[h-1] - j);               // offset to this table
            arrayCopy(this.r, 0, hp, (this.u[h-1]+j)*3, 3); // connect to last table
          }
          else{
            t[0] = q;               // first table is returned result
	  }
        }

	// set up table entry in r
        this.r[1] = (k - w);
        if (p >= n){
          this.r[0] = 128 + 64;      // out of values--invalid code
	}
        else if (v[p] < s){
          this.r[0] = (this.v[p] < 256 ? 0 : 32 + 64);  // 256 is end-of-block
          this.r[2] = this.v[p++];          // simple code is just the value
        }
        else{
          this.r[0]=(e[this.v[p]-s]+16+64); // non-simple--look up in lists
          this.r[2]=d[this.v[p++] - s];
        }

        // fill code-like entries with r
        f=1<<(k-w);
        for (j=i>>>w;j<z;j+=f){
          arrayCopy(this.r, 0, hp, (q+j)*3, 3);
	}

	// backwards increment the k-bit code i
        for (j = 1 << (k - 1); (i & j)!=0; j >>>= 1){
          i ^= j;
	}
        i ^= j;

	// backup over finished tables
        mask = (1 << w) - 1;      // needed on HP, cc -O bug
        while ((i & mask) != this.x[h]){
          h--;                    // don't need to update q
          w -= l;
          mask = (1 << w) - 1;
        }
      }
    }
    // Return Z_BUF_ERROR if we were given an incomplete table
    return y != 0 && g != 1 ? Z_BUF_ERROR : Z_OK;
}

InfTree.prototype.inflate_trees_bits = function(c, bb, tb, hp, z) {
    var result;
    this.initWorkArea(19);
    this.hn[0]=0;
    result = this.huft_build(c, 0, 19, 19, null, null, tb, bb, hp, this.hn, this.v);

    if(result == Z_DATA_ERROR){
      z.msg = "oversubscribed dynamic bit lengths tree";
    }
    else if(result == Z_BUF_ERROR || bb[0] == 0){
      z.msg = "incomplete dynamic bit lengths tree";
      result = Z_DATA_ERROR;
    }
    return result;
}

InfTree.prototype.inflate_trees_dynamic = function(nl, nd, c, bl, bd, tl, td, hp, z) {
    var result;

    // build literal/length tree
    this.initWorkArea(288);
    this.hn[0]=0;
    result = this.huft_build(c, 0, nl, 257, cplens, cplext, tl, bl, hp, this.hn, this.v);
    if (result != Z_OK || bl[0] == 0){
      if(result == Z_DATA_ERROR){
        z.msg = "oversubscribed literal/length tree";
      }
      else if (result != Z_MEM_ERROR){
        z.msg = "incomplete literal/length tree";
        result = Z_DATA_ERROR;
      }
      return result;
    }

    // build distance tree
    this.initWorkArea(288);
    result = this.huft_build(c, nl, nd, 0, cpdist, cpdext, td, bd, hp, this.hn, this.v);

    if (result != Z_OK || (bd[0] == 0 && nl > 257)){
      if (result == Z_DATA_ERROR){
        z.msg = "oversubscribed distance tree";
      }
      else if (result == Z_BUF_ERROR) {
        z.msg = "incomplete distance tree";
        result = Z_DATA_ERROR;
      }
      else if (result != Z_MEM_ERROR){
        z.msg = "empty distance tree with lengths";
        result = Z_DATA_ERROR;
      }
      return result;
    }

    return Z_OK;
}
/*
  static int inflate_trees_fixed(int[] bl,  //literal desired/actual bit depth
                                 int[] bd,  //distance desired/actual bit depth
                                 int[][] tl,//literal/length tree result
                                 int[][] td,//distance tree result
                                 ZStream z  //for memory allocation
				 ){

*/

function inflate_trees_fixed(bl, bd, tl, td, z) {
    bl[0]=fixed_bl;
    bd[0]=fixed_bd;
    tl[0]=fixed_tl;
    td[0]=fixed_td;
    return Z_OK;
}

InfTree.prototype.initWorkArea = function(vsize){
    if(this.hn==null){
        this.hn=new Int32Array(1);
        this.v=new Int32Array(vsize);
        this.c=new Int32Array(BMAX+1);
        this.r=new Int32Array(3);
        this.u=new Int32Array(BMAX);
        this.x=new Int32Array(BMAX+1);
    }
    if(this.v.length<vsize){
        this.v=new Int32Array(vsize);
    }
    for(var i=0; i<vsize; i++){this.v[i]=0;}
    for(var i=0; i<BMAX+1; i++){this.c[i]=0;}
    for(var i=0; i<3; i++){this.r[i]=0;}
//  for(int i=0; i<BMAX; i++){u[i]=0;}
    arrayCopy(this.c, 0, this.u, 0, BMAX);
//  for(int i=0; i<BMAX+1; i++){x[i]=0;}
    arrayCopy(this.c, 0, this.x, 0, BMAX+1);
}

var testArray = new Uint8Array(1);
var hasSubarray = (typeof testArray.subarray === 'function');
var hasSlice = false; /* (typeof testArray.slice === 'function'); */ // Chrome slice performance is so dire that we're currently not using it...

function arrayCopy(src, srcOffset, dest, destOffset, count) {
    if (count == 0) {
        return;
    }
    if (!src) {
        throw "Undef src";
    } else if (!dest) {
        throw "Undef dest";
    }

    if (srcOffset == 0 && count == src.length) {
        arrayCopy_fast(src, dest, destOffset);
    } else if (hasSubarray) {
        arrayCopy_fast(src.subarray(srcOffset, srcOffset + count), dest, destOffset);
    } else if (src.BYTES_PER_ELEMENT == 1 && count > 100) {
        arrayCopy_fast(new Uint8Array(src.buffer, src.byteOffset + srcOffset, count), dest, destOffset);
    } else {
        arrayCopy_slow(src, srcOffset, dest, destOffset, count);
    }

}

function arrayCopy_slow(src, srcOffset, dest, destOffset, count) {

    // dlog('_slow call: srcOffset=' + srcOffset + '; destOffset=' + destOffset + '; count=' + count);

     for (var i = 0; i < count; ++i) {
        dest[destOffset + i] = src[srcOffset + i];
    }
}

function arrayCopy_fast(src, dest, destOffset) {
    dest.set(src, destOffset);
}


  // largest prime smaller than 65536
var ADLER_BASE=65521;
  // NMAX is the largest n such that 255n(n+1)/2 + (n+1)(BASE-1) <= 2^32-1
var ADLER_NMAX=5552;

function adler32(adler, /* byte[] */ buf,  index, len){
    if(buf == null){ return 1; }

    var s1=adler&0xffff;
    var s2=(adler>>16)&0xffff;
    var k;

    while(len > 0) {
      k=len<ADLER_NMAX?len:ADLER_NMAX;
      len-=k;
      while(k>=16){
        s1+=buf[index++]&0xff; s2+=s1;
        s1+=buf[index++]&0xff; s2+=s1;
        s1+=buf[index++]&0xff; s2+=s1;
        s1+=buf[index++]&0xff; s2+=s1;
        s1+=buf[index++]&0xff; s2+=s1;
        s1+=buf[index++]&0xff; s2+=s1;
        s1+=buf[index++]&0xff; s2+=s1;
        s1+=buf[index++]&0xff; s2+=s1;
        s1+=buf[index++]&0xff; s2+=s1;
        s1+=buf[index++]&0xff; s2+=s1;
        s1+=buf[index++]&0xff; s2+=s1;
        s1+=buf[index++]&0xff; s2+=s1;
        s1+=buf[index++]&0xff; s2+=s1;
        s1+=buf[index++]&0xff; s2+=s1;
        s1+=buf[index++]&0xff; s2+=s1;
        s1+=buf[index++]&0xff; s2+=s1;
        k-=16;
      }
      if(k!=0){
        do{
          s1+=buf[index++]&0xff; s2+=s1;
        }
        while(--k!=0);
      }
      s1%=ADLER_BASE;
      s2%=ADLER_BASE;
    }
    return (s2<<16)|s1;
}



function jszlib_inflate_buffer(buffer, start, length, afterUncOffset) {
    if (!start) {
        buffer = new Uint8Array(buffer);
    } else {
        buffer = new Uint8Array(buffer, start, length);
    }

    var z = new ZStream();
    z.inflateInit(DEF_WBITS, true);
    z.next_in = buffer;
    z.next_in_index = 0;
    z.avail_in = buffer.length;

    var oBlockList = [];
    var totalSize = 0;
    while (true) {
        var obuf = new Uint8Array(32000);
        z.next_out = obuf;
        z.next_out_index = 0;
        z.avail_out = obuf.length;
        var status = z.inflate(Z_NO_FLUSH);
        if (status != Z_OK && status != Z_STREAM_END) {
            throw z.msg;
        }
        if (z.avail_out != 0) {
            var newob = new Uint8Array(obuf.length - z.avail_out);
            arrayCopy(obuf, 0, newob, 0, (obuf.length - z.avail_out));
            obuf = newob;
        }
        oBlockList.push(obuf);
        totalSize += obuf.length;
        if (status == Z_STREAM_END) {
            break;
        }
    }

    if (afterUncOffset) {
        afterUncOffset[0] = (start || 0) + z.next_in_index;
    }

    if (oBlockList.length == 1) {
        return oBlockList[0].buffer;
    } else {
        var out = new Uint8Array(totalSize);
        var cursor = 0;
        for (var i = 0; i < oBlockList.length; ++i) {
            var b = oBlockList[i];
            arrayCopy(b, 0, out, cursor, b.length);
            cursor += b.length;
        }
        return out.buffer;
    }
}

//##############################################################
//##############################################################
//##############################################################
//##############################################################

/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

//
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2011
//
// bin.js general binary data support
//

function BlobFetchable(b) {
    this.blob = b;
}

BlobFetchable.prototype.slice = function(start, length) {
    var b;

    if (this.blob.slice) {
        if (length) {
            b = this.blob.slice(start, start + length);
        } else {
            b = this.blob.slice(start);
        }
    } else {
        if (length) {
            b = this.blob.webkitSlice(start, start + length);
        } else {
            b = this.blob.webkitSlice(start);
        }
    }
    return new BlobFetchable(b);
}

BlobFetchable.prototype.fetch = function(callback, options) {
    var reader = new FileReader();
    reader.onloadend = function(ev) {
        if (options && options.raw)
           callback(reader.result);
        else
           callback(bstringToBuffer(reader.result));
    };
    reader.readAsBinaryString(this.blob);
}

function URLFetchable(url, start, end, opts) {
    if (!opts) {
        if (typeof start === 'object') {
            opts = start;
            start = undefined;
        } else {
            opts = {};
        }
    }

    this.url = url;
    this.start = start || 0;
    if (end) {
        this.end = end;
    }
    this.opts = opts;
}

URLFetchable.prototype.slice = function(s, l) {
    var ns = this.start, ne = this.end;
    if (ns && s) {
        ns = ns + s;
    } else {
        ns = s || ns;
    }
    if (l && ns) {
        ne = ns + l - 1;
    } else {
        ne = ne || l - 1;
    }
    return new URLFetchable(this.url, ns, ne, this.opts);
}

var seed=0;
var isIOS = navigator.userAgent.indexOf('Safari') >= 0 && navigator.userAgent.indexOf('Chrome') < 0 ;

URLFetchable.prototype.fetch = function(callback, attempt, truncatedLength) {
    var thisB = this;

    attempt = attempt || 1;
    if (attempt > 3) {
        return callback(null);
    }

    var req = new XMLHttpRequest();
    var length;
    var url = this.url;
    if (isIOS) {
        // console.log('Safari hack');
        url = url + '?salt=' + (++seed);
    }
    req.open('GET', url, true);
    req.overrideMimeType('text/plain; charset=x-user-defined');
    if (this.end) {
        // console.log('req bytes=' + this.start + '-' + this.end);
        req.setRequestHeader('Range', 'bytes=' + this.start + '-' + this.end);
        length = this.end - this.start + 1;
    }
    req.responseType = 'arraybuffer';
    req.onreadystatechange = function() {
        if (req.readyState == 4) {
            if (req.status == 200 || req.status == 206) {
                if (req.response) {
                    var bl = req.response.byteLength;
                    // dlog('Got ' + bl + ' expected ' + length);
                    if (length && length != bl && (!truncatedLength || bl != truncatedLength)) {
                        return thisB.fetch(callback, attempt + 1, bl);
                    } else {
                        return callback(req.response);
                    }
                } else if (req.mozResponseArrayBuffer) {
                    return callback(req.mozResponseArrayBuffer);
                } else {
                    var r = req.responseText;
                    if (length && length != r.length && (!truncatedLength || r.length != truncatedLength)) {
                        return thisB.fetch(callback, attempt + 1, r.length);
                    } else {
                        return callback(bstringToBuffer(req.responseText));
                    }
                }
            } else {
                return thisB.fetch(callback, attempt + 1);
            }
        }
    };
    if (this.opts.credentials) {
        req.withCredentials = true;
    }
    req.send('');
}

function bstringToBuffer(result) {
    if (!result) {
        return null;
    }

//    var before = Date.now();
    var ba = new Uint8Array(result.length);
    for (var i = 0; i < ba.length; ++i) {
        ba[i] = result.charCodeAt(i);
    }
//    var after  = Date.now();
//    dlog('bb took ' + (after - before) + 'ms');
    return ba.buffer;
}

//##############################################################
//##############################################################
//##############################################################
//##############################################################



/* Simple JavaScript Inheritance

 * By John Resig http://ejohn.org/

 * MIT Licensed.
 */
// Inspired by base2 and Prototype

(function(){
  var initializing = false, fnTest = /xyz/.test(function(){xyz;}) ? /\b_super\b/ : /.*/;
  // The base Class implementation (does nothing)
  this.Class = function(){};

  // Create a new Class that inherits from this class
  Class.extend = function(prop) {
    var _super = this.prototype;

    // Instantiate a base class (but only create the instance,
    // don't run the init constructor)
    initializing = true;
    var prototype = new this();
    initializing = false;

    // Copy the properties over onto the new prototype
    for (var name in prop) {
      // Check if we're overwriting an existing function
      prototype[name] = typeof prop[name] == "function" &&
        typeof _super[name] == "function" && fnTest.test(prop[name]) ?
        (function(name, fn){
          return function() {
            var tmp = this._super;

            // Add a new ._super() method that is the same method
            // but on the super-class
            this._super = _super[name];

            // The method only need to be bound temporarily, so we
            // remove it when we're done executing
            var ret = fn.apply(this, arguments);
            this._super = tmp;

            return ret;
          };
        })(name, prop[name]) :
        prop[name];
    }

    // The dummy class constructor

    function Class() {
      // All construction is actually done in the init method
      if ( !initializing && this.init )
        this.init.apply(this, arguments);
    }

    // Populate our constructed prototype object
    Class.prototype = prototype;

    // Enforce the constructor to be what we expect
    Class.constructor = Class;

    // And make this class extendable
    Class.extend = arguments.callee;

    return Class;
  };
})();


//##############################################################
//##############################################################
//##############################################################
//##############################################################
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

//
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2011
//
// bam.js: indexed binary alignments
//

var BAM_MAGIC = 21840194;
var BAI_MAGIC = 21578050;

function BamFile() {
}

function Vob(b, o) {
    this.block = b;
    this.offset = o;
}

Vob.prototype.toString = function() {
    return '' + this.block + ':' + this.offset;
}

function Chunk(minv, maxv) {
    this.minv = minv; this.maxv = maxv;
}

function makeBam(data, bai, callback) {
    var bam = new BamFile();
    bam.data = data;
    bam.bai = bai;

    bam.data.slice(0, 65536).fetch(function(r) {
        if (!r) {
            return dlog("Couldn't access BAM");
        }

        var unc = unbgzf(r);
        var uncba = new Uint8Array(unc);

        var magic = readInt(uncba, 0);
        var headLen = readInt(uncba, 4);
        var header = '';
        for (var i = 0; i < headLen; ++i) {
            header += String.fromCharCode(uncba[i + 8]);
        }
        bam.header = header;
        var nRef = readInt(uncba, headLen + 8);
        var p = headLen + 12;

        bam.chrToIndex = {};
        bam.indexToChr = [];
        for (var i = 0; i < nRef; ++i) {
            var lName = readInt(uncba, p);
            var name = '';
            for (var j = 0; j < lName-1; ++j) {
                name += String.fromCharCode(uncba[p + 4 + j]);
            }
            var lRef = readInt(uncba, p + lName + 4);
            // dlog(name + ': ' + lRef);
            bam.chrToIndex[name] = i;
            if (name.indexOf('chr') == 0) {
                bam.chrToIndex[name.substring(3)] = i;
            } else {
                bam.chrToIndex['chr' + name] = i;
            }
            bam.indexToChr.push(name);

            p = p + 8 + lName;
        }

        if (bam.indices) {
            return callback(bam);
        }
    });

    bam.bai.fetch(function(header) {   // Do we really need to fetch the whole thing? :-(
        if (!header) {
            return dlog("Couldn't access BAI");
        }

        var uncba = new Uint8Array(header);
        var baiMagic = readInt(uncba, 0);
        if (baiMagic != BAI_MAGIC) {
            return dlog('Not a BAI file');
        }

        var nref = readInt(uncba, 4);

        bam.indices = [];

        var p = 8;
        for (var ref = 0; ref < nref; ++ref) {
            var blockStart = p;
            var nbin = readInt(uncba, p); p += 4;
            for (var b = 0; b < nbin; ++b) {
                var bin = readInt(uncba, p);
                var nchnk = readInt(uncba, p+4);
                p += 8 + (nchnk * 16);
            }
            var nintv = readInt(uncba, p); p += 4;
            p += (nintv * 8);
            if (nbin > 0) {
                bam.indices[ref] = new Uint8Array(header, blockStart, p - blockStart);
            }
        }
        if (bam.chrToIndex) {
            return callback(bam);
        }
    });
}



BamFile.prototype.blocksForRange = function(refId, min, max) {
    var index = this.indices[refId];
    if (!index) {
        return [];
    }

    var intBinsL = reg2bins(min, max);
    var intBins = [];
    for (var i = 0; i < intBinsL.length; ++i) {
        intBins[intBinsL[i]] = true;
    }
    var leafChunks = [], otherChunks = [];

    var nbin = readInt(index, 0);
    var p = 4;
    for (var b = 0; b < nbin; ++b) {
        var bin = readInt(index, p);
        var nchnk = readInt(index, p+4);
//        dlog('bin=' + bin + '; nchnk=' + nchnk);
        p += 8;
        if (intBins[bin]) {
            for (var c = 0; c < nchnk; ++c) {
                var cs = readVob(index, p);
                var ce = readVob(index, p + 8);
                (bin < 4681 ? otherChunks : leafChunks).push(new Chunk(cs, ce));
                p += 16;
            }
        } else {
            p +=  (nchnk * 16);
        }
    }
//    dlog('leafChunks = ' + miniJSONify(leafChunks));
//    dlog('otherChunks = ' + miniJSONify(otherChunks));

    var nintv = readInt(index, p);
    var lowest = null;
    var minLin = Math.min(min>>14, nintv - 1), maxLin = Math.min(max>>14, nintv - 1);
    for (var i = minLin; i <= maxLin; ++i) {
        var lb =  readVob(index, p + 4 + (i * 8));
        if (!lb) {
            continue;
        }
        if (!lowest || lb.block < lowest.block || lb.offset < lowest.offset) {
            lowest = lb;
        }
    }
    // dlog('Lowest LB = ' + lowest);

    var prunedOtherChunks = [];
    if (lowest != null) {
        for (var i = 0; i < otherChunks.length; ++i) {
            var chnk = otherChunks[i];
            if (chnk.maxv.block >= lowest.block && chnk.maxv.offset >= lowest.offset) {
                prunedOtherChunks.push(chnk);
            }
        }
    }
    // dlog('prunedOtherChunks = ' + miniJSONify(prunedOtherChunks));
    otherChunks = prunedOtherChunks;

    var intChunks = [];
    for (var i = 0; i < otherChunks.length; ++i) {
        intChunks.push(otherChunks[i]);
    }
    for (var i = 0; i < leafChunks.length; ++i) {
        intChunks.push(leafChunks[i]);
    }

    intChunks.sort(function(c0, c1) {
        var dif = c0.minv.block - c1.minv.block;
        if (dif != 0) {
            return dif;
        } else {
            return c0.minv.offset - c1.minv.offset;
        }
    });
    var mergedChunks = [];
    if (intChunks.length > 0) {
        var cur = intChunks[0];
        for (var i = 1; i < intChunks.length; ++i) {
            var nc = intChunks[i];
            if (nc.minv.block == cur.maxv.block /* && nc.minv.offset == cur.maxv.offset */) { // no point splitting mid-block
                cur = new Chunk(cur.minv, nc.maxv);
            } else {
                mergedChunks.push(cur);
                cur = nc;
            }
        }
        mergedChunks.push(cur);
    }
//    dlog('mergedChunks = ' + miniJSONify(mergedChunks));

    return mergedChunks;
}

BamFile.prototype.fetch = function(chr, min, max, callback, options) {
    var thisB = this;

    var chrId = this.chrToIndex[chr];
    var chunks;
    if (chrId === undefined) {
        chunks = [];
    } else {
        chunks = this.blocksForRange(chrId, min, max);
        if (!chunks) {
            callback(null, 'Error in index fetch');
        }
    }

    var records = [];
    var index = 0;
    var data;
    var binData = "";

    function tramp() {
        if (index >= chunks.length) {
            if (options && options.raw) {
               return callback(binData);
            } else if (options && options.format) {
               var converted = ""
               records.forEach(function(r) { converted += r.convertTo(options.format); });
               return callback(converted);
            } else {
               return callback(records);
            }
        } else if (!data) {
            // dlog('fetching ' + index);
            var c = chunks[index];
            var fetchMin = c.minv.block;
            var fetchMax = c.maxv.block + (1<<16); // *sigh*
            thisB.data.slice(fetchMin, fetchMax - fetchMin).fetch(function(r) {
                if (options && options.raw)
                   data = r;
                else
                   data = unbgzf(r, c.maxv.block - c.minv.block + 1);
                return tramp();
            }, options);
        } else {
            if (options && options.raw) {
               binData += data;
            } else {
               var ba = new Uint8Array(data);
               thisB.readBamRecords(ba, chunks[index].minv.offset, records, min, max, chrId);
            }
            data = null;
            ++index;
            return tramp();
        }
    }
    tramp();
}

var SEQRET_DECODER = ['=', 'A', 'C', 'x', 'G', 'x', 'x', 'x', 'T', 'x', 'x', 'x', 'x', 'x', 'x', 'N'];
var CIGAR_DECODER = ['M', 'I', 'D', 'N', 'S', 'H', 'P', '=', 'X', '?', '?', '?', '?', '?', '?', '?'];

function BamRecord() {

}

BamRecord.prototype.convertTo = function(format) {
 var record = "";
 var keys = [ "readName", "flag", "segment", "pos", "mq", "cigar", "rnext", "pnext", "tlen", "seq", "quals", "tags"   ]

 if (format == "sam") {
    for (var i=0; i < keys.length; i++)
      record += this[keys[i]] + '\t'
    record = record.slice(0, record.length-1) + "\n";
 }

 return record;
}

BamFile.prototype.readBamRecords = function(ba, offset, sink, min, max, chrId) {;
    while (true) {
        var blockSize = readInt(ba, offset);
        var blockEnd = offset + blockSize + 4;
        if (blockEnd >= ba.length) {
            return sink;
        }

        var record = new BamRecord();

        var refID = readInt(ba, offset + 4);
        var pos = readInt(ba, offset + 8);

        var bmn = readInt(ba, offset + 12);
        var bin = (bmn & 0xffff0000) >> 16;
        var mq = (bmn & 0xff00) >> 8;
        var nl = bmn & 0xff;

        var flag_nc = readInt(ba, offset + 16);
        var flag = (flag_nc & 0xffff0000) >> 16;
        var nc = flag_nc & 0xffff;

        //record.flag = flag;

        var lseq = readInt(ba, offset + 20);

        var nextRef  = readInt(ba, offset + 24);
        var nextPos = readInt(ba, offset + 28);

        //record.rnext = nextRef + 1;
        //record.pnext = nextPos;

        var tlen = readInt(ba, offset + 32);
        //record.tlen = tlen;

        var readName = '';
        for (var j = 0; j < nl-1; ++j) {
            readName += String.fromCharCode(ba[offset + 36 + j]);
        }

        var p = offset + 36 + nl;

        var cigar = '';
        for (var c = 0; c < nc; ++c) {
            var cigop = readInt(ba, p);
            cigar = cigar + (cigop>>4) + CIGAR_DECODER[cigop & 0xf];
            p += 4;
        }
        //record.cigar = cigar;

        var seq = '';
        var seqBytes = (lseq + 1 ) >> 1;
        for (var j = 0; j < seqBytes; ++j) {
            var sb = ba[p + j];
            seq += SEQRET_DECODER[(sb & 0xf0) >> 4];
            seq += SEQRET_DECODER[(sb & 0x0f)];
        }
        // acount for odd sequences and remove last character
        // this is needed b\c each character is a half byte and we are taking a byte at a time
        if (lseq % 2 == 1) seq = seq.slice(0, seq.length-1);
        p += seqBytes;
        record.seq = seq.length;

        /*var qseq = '';
        for (var j = 0; j < lseq; ++j) {
            qseq += String.fromCharCode(ba[p + j] + 33);
        }
        p += lseq;
        record.quals = qseq;
        */
        record.pos = pos;
      // record.mq = mq;
        //record.readName = readName;
        record.segment = this.indexToChr[refID];
        /*record.tags = "";

        while (p < blockEnd) {
            var tag = String.fromCharCode(ba[p]) + String.fromCharCode(ba[p + 1]);
            var type = String.fromCharCode(ba[p + 2]);
            var value;

            if (type == 'A') {
                value = String.fromCharCode(ba[p + 3]);
                p += 4;
            } else if (type == 'i' || type == 'I') {
                value = readInt(ba, p + 3);
                p += 7;
            } else if (type == 'c' || type == 'C') {
                value = ba[p + 3];
                type = "i";
                p += 4;
            } else if (type == 's' || type == 'S') {
                value = readShort(ba, p + 3);
                type = "i";
                p += 5;
            } else if (type == 'f') {
                throw 'FIXME need floats';
            } else if (type == 'Z') {
                p += 3;
                value = '';
                for (;;) {
                    var cc = ba[p++];
                    if (cc == 0) {
                        break;
                    } else {
                        value += String.fromCharCode(cc);
                    }
                }
            } else {
                throw 'Unknown type '+ type;
            }
            record[tag] = value;
            record.tags += tag + ":" + type + ":" + value + "\t";
        }
        record.tags = record.tags.trim();
	*/
        if (!min || record.pos <= max && record.pos + lseq >= min) {
            if (chrId === undefined || refID == chrId) {
                sink.push(record);
            }
        }
        offset = blockEnd;
    }

    // if (options && options.format)
    //   sink.forEach(function(elem) { data += elem.convertTo(options.format) })
    // else

    // Exits via top of loop.
}

function readInt(ba, offset) {
    return (ba[offset + 3] << 24) | (ba[offset + 2] << 16) | (ba[offset + 1] << 8) | (ba[offset]);
}

function readShort(ba, offset) {
    return (ba[offset + 1] << 8) | (ba[offset]);
}

function readVob(ba, offset) {
    var block = ((ba[offset+6] & 0xff) * 0x100000000) + ((ba[offset+5] & 0xff) * 0x1000000) + ((ba[offset+4] & 0xff) * 0x10000) + ((ba[offset+3] & 0xff) * 0x100) + ((ba[offset+2] & 0xff));
    var bint = (ba[offset+1] << 8) | (ba[offset]);
    // if (block == 0 && bint == 0) {
    //     return null;  // Should only happen in the linear index?
    // } else {
        return new Vob(block, bint);
    //}
}

function unbgzf(data, lim) {
    lim = Math.min(lim || 1, data.byteLength - 100);
    var oBlockList = [];
    var ptr = [0];
    var totalSize = 0;

    while (ptr[0] < lim) {
        var ba = new Uint8Array(data, ptr[0], 100); // FIXME is this enough for all credible BGZF block headers?
        var xlen = (ba[11] << 8) | (ba[10]);
        // dlog('xlen[' + (ptr[0]) +']=' + xlen);
        var unc = jszlib_inflate_buffer(data, 12 + xlen + ptr[0], Math.min(65536, data.byteLength - 12 - xlen - ptr[0]), ptr);
        ptr[0] += 8;
        totalSize += unc.byteLength;
        oBlockList.push(unc);
    }

    if (oBlockList.length == 1) {
        return oBlockList[0];
    } else {
        var out = new Uint8Array(totalSize);
        var cursor = 0;
        for (var i = 0; i < oBlockList.length; ++i) {
            var b = new Uint8Array(oBlockList[i]);
            arrayCopy(b, 0, out, cursor, b.length);
            cursor += b.length;
        }
        return out.buffer;
    }
}

//
// Binning (transliterated from SAM1.3 spec)
//

/* calculate bin given an alignment covering [beg,end) (zero-based, half-close-half-open) */
function reg2bin(beg, end)
{
    --end;
    if (beg>>14 == end>>14) return ((1<<15)-1)/7 + (beg>>14);
    if (beg>>17 == end>>17) return ((1<<12)-1)/7 + (beg>>17);
    if (beg>>20 == end>>20) return ((1<<9)-1)/7 + (beg>>20);
    if (beg>>23 == end>>23) return ((1<<6)-1)/7 + (beg>>23);
    if (beg>>26 == end>>26) return ((1<<3)-1)/7 + (beg>>26);
    return 0;
}

/* calculate the list of bins that may overlap with region [beg,end) (zero-based) */
var MAX_BIN = (((1<<18)-1)/7);
function reg2bins(beg, end)
{
    var i = 0, k, list = [];
    --end;
    list.push(0);
    for (k = 1 + (beg>>26); k <= 1 + (end>>26); ++k) list.push(k);
    for (k = 9 + (beg>>23); k <= 9 + (end>>23); ++k) list.push(k);
    for (k = 73 + (beg>>20); k <= 73 + (end>>20); ++k) list.push(k);
    for (k = 585 + (beg>>17); k <= 585 + (end>>17); ++k) list.push(k);
    for (k = 4681 + (beg>>14); k <= 4681 + (end>>14); ++k) list.push(k);
    return list;
}

//##############################################################
//##############################################################
//##############################################################
//##############################################################
// extending Thomas Down's original BAM js work

var Bam = Class.extend({

   init: function(bamUri, options) {
      this.bamUri = bamUri;
      this.options = options; // *** add options mapper ***
      // test if file or url
      if (typeof(this.bamUri) == "object") {
         this.sourceType = "file";
         this.bamBlob = new BlobFetchable(bamUri);
         this.baiBlob = new BlobFetchable(this.options.bai); // *** add if statement if here ***
         this.promises = [];
         this.bam = undefined;
         var me = this;
         makeBam(this.bamBlob, this.baiBlob, function(bam) {
            me.setHeader(bam.header);
            me.provide(bam);
         });
      } else if ( this.bamUri.slice(0,4) == "http" ) {
         this.sourceType = "url";
      }

      // set iobio servers
      this.iobio = {}
      this.iobio.bamtools = "ws://bamtools.iobio.io";
      this.iobio.samtools = "ws://samtools.iobio.io";
      this.iobio.bamReadDepther = "ws://bamReadDepther.iobio.io";
      this.iobio.bamMerger = "ws://bammerger.iobio.io";
      this.iobio.bamstatsAlive = "ws://bamstatsalive.iobio.io"
      return this;
   },

   fetch: function( name, start, end, callback, options ) {
      var me = this;
      // handle bam has been created yet
      if(this.bam == undefined) // **** TEST FOR BAD BAM ***
         this.promise(function() { me.fetch( name, start, end, callback, options ); });
      else
         this.bam.fetch( name, start, end, callback, options );
   },

   promise: function( callback ) {
      this.promises.push( callback );
   },

   provide: function(bam) {
      this.bam = bam;
      while( this.promises.length != 0 )
         this.promises.shift()();
   },

   _makeid: function() {
      // make unique string id;
       var text = "";
       var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

       for( var i=0; i < 5; i++ )
           text += possible.charAt(Math.floor(Math.random() * possible.length));

       return text;
   },

   _getBamUrl: function(name, start, end) {
      return this._getBamRegionsUrl([ {'name':name,'start':start,'end':end} ]);
   },

   _getBamRegionsUrl: function(regions) {
      if ( this.sourceType == "url") {
         var regionStr = "";
         regions.forEach(function(region) { regionStr += " " + region.name + ":" + region.start + "-" + region.end });
         var url = this.iobio.samtools + "?cmd= view -b " + this.bamUri + regionStr + "&encoding=binary";
      } else {
         // creates a url for a new bam that is sliced from an old bam
         // open connection to iobio webservice that will request this data, since connections can only be opened from browser
         var me = this;
         var connectionID = this._makeid();
         var client = BinaryClient(this.iobio.samtools + '?id=', {'connectionID' : connectionID} );
         client.on('open', function(stream){
            var stream = client.createStream({event:'setID', 'connectionID':connectionID});
            stream.end();
         })

         var url = this.iobio.samtools + "?protocol=websocket&encoding=binary&cmd=view -S -b " + encodeURIComponent("http://client?&id="+connectionID);
         var ended = 0;
         var me = this;
         // send data to samtools when it asks for it
         client.on('stream', function(stream, options) {
            stream.write(me.header.toStr);
            regions.forEach(function(region){
               me.convert('sam', region.name, region.start, region.end, function(data,e) {
                  stream.write(data);
                  ended += 1;
                  if ( regions.length == ended) stream.end();
               }, {noHeader:true});
            })
         })
      }
      return encodeURI(url);
   },

   _generateExomeBed: function(id) {
      var bed = "";
      var readDepth = this.readDepth[id];
      var start, end;
      var sum =0;
      // for (var i=0; i < readDepth.length; i++){
      //    sum += readDepth[i].depth;
      // }
      // console.log("avg = " + parseInt(sum / readDepth.length));
      // merge contiguous blocks into a single block and convert to bed format
      for( var i=0; i < readDepth.length; i++){
         if (readDepth[i].depth < 20) {
            if (start != undefined)
               bed += id + "\t" + start + "\t" + end + "\t.\t.\t.\t.\t.\t.\t.\t.\t.\n"
            start = undefined;
         }
         else {
            if (start == undefined) start = readDepth[i].pos;
            end = readDepth[i].pos + 16384;
         }
      }
      // add final record if data stopped on non-zero
      if (start != undefined)
         bed += id + "\t" + start + "\t" + end + "\t.\t.\t.\t.\t.\t.\t.\t.\t.\n"
      return bed;
   },

   _mapToBedCoordinates: function(ref, regions, bed) {
      var a = this._bedToCoordinateArray(ref, bed);
      var a_i = 0;
      var bedRegions = [];
      if (a.length == 0) {
         alert("Bed file doesn't have coordinates for reference: " + regions[0].name + ". Sampling normally");
         return null;
      }
      regions.forEach(function(reg){
         for (a_i; a_i < a.length; a_i++) {
            if (a[a_i].end > reg.end)
               break;

            if (a[a_i].start >= reg.start)
               bedRegions.push( {name:reg.name, start:a[a_i].start, end:a[a_i].end})
         }
      })
      return bedRegions
   },

   _bedToCoordinateArray: function(ref, bed) {
      var a = [];
      bed.split("\n").forEach(function(line){
        if (line[0] == '#' || line == "") return;

        var fields = line.split("\t");
        if (fields[0] == ref)
           a.push({ chr:fields[0], start:parseInt(fields[1]), end:parseInt(fields[2]) });
      });
      return a;
   },

   _getClosestValueIndex: function(a, x) {
       var lo = -1, hi = a.length;
       while (hi - lo > 1) {
           var mid = Math.round((lo + hi)/2);
           if (a[mid].start <= x) {
               lo = mid;
           } else {
               hi = mid;
           }
       }
       if (lo == -1 ) return 0;
       if ( a[lo].end > x )
           return lo;
       else
           return hi;
   },

   getReferencesWithReads: function(callback) {
      var refs = [];
      var me = this;
      if (this.sourceType == 'url') {

      } else {
         this.getHeader(function(header) {
            for (var i=0; i < header.sq.length; i++) {
               if ( me.bam.indices[me.bam.chrToIndex[header.sq[i].name]] != undefined )
                  refs.push( header.sq[i] );
            }
            callback(refs);
         })
      }
   },

   // *** bamtools functionality ***

   convert: function(format, name, start, end, callback, options) {
      // Converts between BAM and a number of other formats
      if (!format || !name || !start || !end)
         return "Error: must supply format, sequenceid, start nucleotide and end nucleotide"

      if (format.toLowerCase() != "sam")
         return "Error: format + " + options.format + " is not supported"
      var me = this;
      this.fetch(name, start, end, function(data,e) {
         if(options && options.noHeader)
            callback(data, e);
         else {
            me.getHeader(function(h) {
               callback(h.toStr + data, e);
            })
         }
      }, { 'format': format })
   },

   count: function() {
      // Prints number of alignments in BAM file(s)
   },

   coverage: function() {
      // Prints coverage statistics from the input BAM file
   },

   filter: function() {
      // Filters BAM file(s) by user-specified criteria
   },

   estimateBaiReadDepth: function(callback) {
      var me = this, readDepth = {};
      me.readDepth = {};

      function cb() {
         if (me.header) {
            for (var id in readDepth) {
              if (readDepth.hasOwnProperty(id))
              var name = me.header.sq[parseInt(id)].name;
               if ( me.readDepth[ name ] == undefined){
                  me.readDepth[ name ] = readDepth[id];
                  callback( name, readDepth[id] );
               }
            }
         }
      }

      me.getHeader(function(header) {
         if (Object.keys(me.readDepth).length > 0)
            cb();
      });
      if ( Object.keys(me.readDepth).length > 0 )
         callback(me.readDepth)
      else if (me.sourceType == 'url') {
         var client = BinaryClient(me.iobio.bamReadDepther);
         var url = encodeURI( me.iobio.bamReadDepther + '?cmd=-i ' + me.bamUri + ".bai")
         client.on('open', function(stream){
            var stream = client.createStream({event:'run', params : {'url':url}});
            var currentSequence;
            stream.on('data', function(data, options) {
               data = data.split("\n");
               for (var i=0; i < data.length; i++)  {
                  if ( data[i][0] == '#' ) {
                     if ( Object.keys(readDepth).length > 0 ) { cb() };
                     currentSequence = data[i].substr(1);
                     readDepth[currentSequence] = [];
                  }
                  else {
                     if (data[i] != "") {
                        var d = data[i].split("\t");
                        readDepth[currentSequence].push({ pos:parseInt(d[0]), depth:parseInt(d[1]) });
                     }
                  }
               }
            });
            stream.on('end', function() {
               cb();
            });
         });
      } else if (me.sourceType == 'file') {
          me.baiBlob.fetch(function(header){
             if (!header) {
                  return dlog("Couldn't access BAI");
              }

              var uncba = new Uint8Array(header);
              var baiMagic = readInt(uncba, 0);
              if (baiMagic != BAI_MAGIC) {
                  return dlog('Not a BAI file');
              }
              var nref = readInt(uncba, 4);

              bam.indices = [];
              var p = 8;

              for (var ref = 0; ref < nref; ++ref) {
                  var bins = [];
                  var blockStart = p;
                  var nbin = readInt(uncba, p); p += 4;
                  if (nbin > 0) readDepth[ref] = [];
                  for (var b = 0; b < nbin; ++b) {
                      var bin = readInt(uncba, p);
                      var nchnk = readInt(uncba, p+4);
                      p += 8;
                      // p += 8 + (nchnk * 16);
                      var byteCount = 0;
                      for (var c=0; c < nchnk; ++c) {
                         var startBlockAddress = readVob(uncba, p);
                         var endBlockAddress = readVob(uncba, p+8);
                         p += 16;
                         byteCount += (endBlockAddress.block - startBlockAddress.block);
                      }
                     if ( bin >=  4681 && bin <= 37449) {
                        var position = (bin - 4681) * 16384;
                        readDepth[ref][bin-4681] = {pos:position, depth:byteCount};
                        // readDepth[ref].push({pos:position, depth:byteCount});
                       //bins[bin - 4681] = byteCount;
                     }
                  }
                  var nintv = readInt(uncba, p); p += 4;
                  p += (nintv * 8);

                  if (nbin > 0) {
                     for (var i=0 ; i < readDepth[ref].length; i++) {
                        if(readDepth[ref][i] == undefined)
                           readDepth[ref][i] = {pos : (i+1)*16000, depth:0};
                     }
                  }
              }
              cb();
          });
      }

   },

   getHeader: function(callback) {
      var me = this;
      if (me.header)
         callback(me.header);
      else if (me.sourceType == 'file')
         me.promise(function() { me.getHeader(callback); })
      else {
         var client = BinaryClient(me.iobio.samtools);
         var url = encodeURI( me.iobio.samtools + '?cmd=view -H ' + this.bamUri)
         client.on('open', function(stream){
            var stream = client.createStream({event:'run', params : {'url':url}});
            var rawHeader = ""
            stream.on('data', function(data, options) {
               rawHeader += data;
            });
            stream.on('end', function() {
               me.setHeader(rawHeader);
               callback( me.header);
            });
         });
      }

      // need to make this work for URL bams
      // need to incorporate real promise framework throughout
   },

   setHeader: function(headerStr) {
      var header = { sq:[], toStr : headerStr };
      var lines = headerStr.split("\n");
      for ( var i=0; i<lines.length > 0; i++) {
         var fields = lines[i].split("\t");
         if (fields[0] == "@SQ") {
            var name = fields[1].split("SN:")[1];
            var length = parseInt(fields[2].split("LN:")[1]);
            header.sq.push({name:name, end:1+length});
         }
      }
      this.header = header;
   },

   index: function() {
      // Generates index for BAM file
   },

   merge: function() {
      // Merge multiple BAM files into single file
   },

   random: function() {
      // Select random alignments from existing BAM file(s), intended more as a testing tool.
   },

   resolve: function() {
      // Resolves paired-end reads (marking the IsProperPair flag as needed)
   },

   revert: function() {
      // Removes duplicate marks and restores original base qualities
   },

   sort: function() {
      // Sorts the BAM file according to some criteria
   },

   split: function() {
      // Splits a BAM file on user-specified property, creating a new BAM output file for each value found
   },

   stats: function(name, start, end, callback) {
      // Prints some basic statistics from input BAM file(s)
      var client = BinaryClient(this.iobio.bamstatsAlive);
      var url = encodeURI( this.iobio.bamstatsAlive + '?cmd=-u 1000 -s ' + start + " -l " + parseInt(end-start) + " " + encodeURIComponent(this._getBamUrl(name,start,end)) );
      client.on('open', function(stream){
         var stream = client.createStream({event:'run', params : {'url':url}});
         var buffer = "";
         stream.on('data', function(data, options) {
            if (data == undefined) return;
            var success = true;
            try {
              var obj = JSON.parse(buffer + data)
            } catch(e) {
              success = false;
              buffer += data;
            }
            if(success) {
              buffer = "";
              callback(obj);
            }
         });
      });
   },

   sampleStats: function(callback, options) {
      // Prints some basic statistics from sampled input BAM file(s)
      options = $.extend({
         binSize : 60000, // defaults
         binNumber : 30,
         start : 1,
      },options);
      var me = this;

      function goSampling(SQs) {
         var regions = [];
         var bedRegions;
         var sqStart = options.start;
         var totalLengthToSample = SQs.reduce(function(prev, curr) { return (curr.end - sqStart + prev) }, 0)

         // handle small data
         if (totalLengthToSample < options.binSize * options.binNumber)
          return;
         else {
           // create random reference coordinates
           for (var k=0; k < options.binNumber; k++) {
              var start=parseInt(Math.random()*totalLengthToSample);
              var end = start + options.binSize;
              var culmLength = 0;
              for (var i=0; i < SQs.length; i++ ) {
                var sq = SQs[i];
                var culmStart = culmLength;
                culmLength += sq.end - sqStart;
                // test if start is inside this references
                if ( start < (culmLength)) {
                  // test if it goes into next reference
                  if (end < (culmLength)) {
                    regions.push( {
                       'name' : sq.name,
                       'start' : start-culmStart + sqStart,
                       'end' : end - culmStart + sqStart
                    });
                    break;
                  } else {
                    regions.push( {
                       'name' : sq.name,
                       'start' : start-culmStart,
                       'end' : end - culmStart
                    });
                    start = culmLength+1;
                  }
                }
              }

           }
           // sort by start value
           regions = regions.sort(function(a,b) {
              var x = a.start; var y = b.start;
              return ((x < y) ? -1 : ((x > y) ? 1 : 0));
           });

           // intelligently determine exome bed coordinates **experimental**
           if (options.exomeSampling)
              options.bed = me._generateExomeBed(options.sequenceNames[0]);

           // map random region coordinates to bed coordinates
           if (options.bed != undefined)
              bedRegions = me._mapToBedCoordinates(SQs[0].name, regions, options.bed)
        }


         var client = BinaryClient(me.iobio.bamstatsAlive);
         var regStr = JSON.stringify((bedRegions || regions).map(function(d) { return {start:d.start,end:d.end,chr:d.name};}));
         // var url = encodeURI( me.iobio.bamstatsAlive + '?cmd=-u 30000 -f 2000 -r \'' + regStr + '\' ' + encodeURIComponent(me._getBamRegionsUrl(regions)));
         var url = encodeURI( me.iobio.bamstatsAlive + '?cmd=-u 3000 -r \'' + regStr + '\' ' + encodeURIComponent(me._getBamRegionsUrl(regions)));
         var buffer = "";
         client.on('open', function(stream){
            var stream = client.createStream({event:'run', params : {'url':url}});
            stream.on('data', function(data, options) {
               if (data == undefined) return;
               var success = true;
               try {
                 var obj = JSON.parse(buffer + data)
               } catch(e) {
                 success = false;
                 buffer += data;
               }
               if(success) {
                 buffer = "";
                 callback(obj);
               }
            });
            stream.on('end', function() {
               if (options.onEnd != undefined)
                  options.onEnd();
            });
         });
      }

      if ( options.sequenceNames != undefined && options.end != undefined) {
         var sqs = options.sequenceNames.map(function(d) { return {name:d, end:options.end}});
         goSampling(sqs);
      } else  if (options.sequenceNames != undefined){
         this.getHeader(function(header){
            var sq = [];
            $(header.sq).each( function(i,d) {
               if(options.sequenceNames.indexOf(d.name) != -1)
               sq.push( d );
            })
            goSampling(sq);
         });
      } else {
         this.getHeader(function(header){
            var sqs = header.sq;
            if (options.end != undefined)
              var sqs = options.sequenceNames.map(function(d) { return {name:d, end:options.end}});
            goSampling(sqs);
         });
         // this.getReferencesWithReads(function(refs) {
         //    goSampling(refs);
         // })
      }
   }

});


/***/ }),

/***/ "./lib/biocircos.js":
/*!**************************!*\
  !*** ./lib/biocircos.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {


/**
* BioCircos.js is an open source interactive Javascript library which
* provides an easy way to interactive display biological data on the web.
* It implements a raster-based SVG visualization using the open source
* Javascript framework jquery.js. BioCircos.js is multiplatform and works
* in all major internet browsers (Internet Explorer, Mozilla Firefox,
* Google Chrome, Safari, Opera). Its speed is determined by the client's
* hardware and internet browser. For smoothest user experience, we recommend
* Google Chrome.
*
* Source code, tutorial, documentation, and example data are freely available
* from BioCircos.js website "http://bioinfo.ibp.ac.cn/biocircos/".
*
* @author <a href="cui_ya@163.com">Ya Cui</a>, <a href="chenxiaowei@moon.ibp.ac.cn">Xiaowei Chen</a>
* @version 1.1.1
*
* @example
*      var BioCircosGenome = [
*         ["chr1" , 249250621],
*         ["chr2" , 243199373]
*      ];
*      BioCircos01 = new BioCircos(BioCircosGenome,{
*         target : "biocircos",
*         svgWidth : 900,
*         svgHeight : 600
*      });
*      BioCircos01.draw_genome(BioCircos01.genomeLength);
*
**/

var BioCircos;

(function($){

  BioCircos = function(){
      var self = this;

      var lastHoveredChromosome;
      var currentMousePosition;

      if(arguments.length >= 2){
            var modules = arguments[0];
            self.argumentsBiocircosSettings=arguments[2];
            self.argumentsBiocircosGenome=arguments[1];

            self.CNV = new Array();
            self.CNVConfig = new Array();
            for (var n=0; n< modules.length; n++){
                var reg=/^CNV/;
                if(reg.test(modules[n][0])){
                    self.CNVConfig.push(modules[n][1]);
                    self.CNV.push(modules[n][2]);
                }
            }

            self.HEATMAP = new Array();
            self.HEATMAPConfig = new Array();
            for (var n=0; n< modules.length; n++){
                var reg=/^HEATMAP/;
                if(reg.test(modules[n][0])){
                    self.HEATMAPConfig.push(modules[n][1]);
                    self.HEATMAP.push(modules[n][2]);
                }
            }

            //Module used only for ZOOMING BY SELECTING
            self.ZOOM_SLIDER = new Array();
            self.ZOOM_SLIDERConfig = new Array();
            for (var n=0; n< modules.length; n++){
                var reg=/^ZOOM_SLIDER/;
                if(reg.test(modules[n][0])){
                    self.ZOOM_SLIDERConfig.push(modules[n][1]);
                    self.ZOOM_SLIDER.push(modules[n][2]);
                }
            }
            self.SNP = new Array();
            self.SNPConfig = new Array();
            for (var n=0; n< modules.length; n++){
                var reg=/^SNP/;
                if(reg.test(modules[n][0])){
                    self.SNPConfig.push(modules[n][1]);
                    self.SNP.push(modules[n][2]);
                }
            }

            self.LINK = new Array();
            self.LINKConfig = new Array();
            for (var n=0; n< modules.length; n++){
                var reg=/^LINK/;
                if(reg.test(modules[n][0])){
                    self.LINKConfig.push(modules[n][1]);
                    self.LINK.push(modules[n][2]);
                }
            }

            self.HISTOGRAM = new Array();
            self.HISTOGRAMConfig = new Array();
            for (var n=0; n< modules.length; n++){
                var reg=/^HISTOGRAM/;
                if(reg.test(modules[n][0])){
                    self.HISTOGRAMConfig.push(modules[n][1]);
                    self.HISTOGRAM.push({list: modules[n][2], max: modules[n][3]});
                }
            }

            self.LINE = new Array();
            self.LINEConfig = new Array();
            for (var n=0; n< modules.length; n++){
                var reg=/^LINE/;
                if(reg.test(modules[n][0])){
                    self.LINEConfig.push(modules[n][1]);
                    self.LINE.push({list: modules[n][2], max: modules[n][3]});
                }
            }

            self.SCATTER = new Array();
            self.SCATTERConfig = new Array();
            for (var n=0; n< modules.length; n++){
                var reg=/^SCATTER/;
                if(reg.test(modules[n][0])){
                    self.SCATTERConfig.push(modules[n][1]);
                    self.SCATTER.push(modules[n][2]);
                }
            }

            self.BACKGROUND = new Array();
            self.BACKGROUNDConfig = new Array();
            for (var n=0; n< modules.length; n++){
                var reg=/^BACKGROUND/;
                if(reg.test(modules[n][0])){
                    self.BACKGROUNDConfig.push(modules[n][1]);
                    self.BACKGROUND.push(modules[n][2]);
                }
            }

            self.TEXT = new Array();
            self.TEXTConfig = new Array();
            for (var n=0; n< modules.length; n++){
                var reg=/^TEXT/;
                if(reg.test(modules[n][0])){
                    self.TEXTConfig.push(modules[n][1]);
                    self.TEXT.push(modules[n][2]);
                }
            }

            self.ARC = new Array();
            self.ARCConfig = new Array();
            for (var n=0; n< modules.length; n++){
                var reg=/^ARC/;
                if(reg.test(modules[n][0])){
                    self.ARCConfig.push(modules[n][1]);
                    self.ARC.push(modules[n][2]);
                }
            }

      }else{
            document.getElementById(self.settings.target).innerHTML='Arguments Error: at least two arguments must supplied.<br>example: new BioCircos([FUSION01,CNV01,SNP01,]BioCircosGenome,{target : "biocircos",zoom : true})';
      }

      self.settings = {
          "target" : "biocircos",
          "svgWidth" : 900,
          "svgHeight" : 600,
          "chrPad" : 0.04,
          "innerRadius" : 246,
          "outerRadius" : 270,
          "zoom" : false,
          "zoom_start":0,
          "zoom_end":0,
          "groupStart":0,
          "groupEnd":0,
          "genomeFillColor" : ["rgb(153,102,0)", "rgb(102,102,0)", "rgb(153,153,30)", "rgb(204,0,0)","rgb(255,0,0)", "rgb(255,0,204)", "rgb(255,204,204)", "rgb(255,153,0)", "rgb(255,204,0)", "rgb(255,255,0)", "rgb(204,255,0)", "rgb(0,255,0)","rgb(53,128,0)", "rgb(0,0,204)", "rgb(102,153,255)", "rgb(153,204,255)", "rgb(0,255,255)", "rgb(204,255,255)", "rgb(153,0,204)", "rgb(204,51,255)","rgb(204,153,255)", "rgb(102,102,102)", "rgb(153,153,153)", "rgb(204,204,204)"],
          "CNVMouseEvent" : true,
          "CNVMouseClickDisplay" : true,
          "CNVMouseClickColor" : "blue",
          "CNVMouseClickArcOpacity" : 1.0,
          "CNVMouseClickArcStrokeColor" : "#F26223",
          "CNVMouseClickArcStrokeWidth" : 0,
          "CNVMouseClickTextFromData" : "fourth",   //first,second,third,fourth column
          "CNVMouseClickTextOpacity" : 1,
          "CNVMouseClickTextColor" : "red",
          "CNVMouseClickTextSize" : 8,
          "CNVMouseClickTextPostionX" : 0,
          "CNVMouseClickTextPostionY" : 0,
          "CNVMouseClickTextDrag" : true,
          "CNVMouseDownDisplay" : false,
          "CNVMouseDownColor" : "green",
          "CNVMouseDownArcOpacity" : 1.0,
          "CNVMouseDownArcStrokeColor" : "#F26223",
          "CNVMouseDownArcStrokeWidth" : 0,
          "CNVMouseEnterDisplay" : false,
          "CNVMouseEnterColor" : "yellow",
          "CNVMouseEnterArcOpacity" : 1.0,
          "CNVMouseEnterArcStrokeColor" : "#F26223",
          "CNVMouseEnterArcStrokeWidth" : 0,
          "CNVMouseLeaveDisplay" : false,
          "CNVMouseLeaveColor" : "pink",
          "CNVMouseLeaveArcOpacity" : 1.0,
          "CNVMouseLeaveArcStrokeColor" : "#F26223",
          "CNVMouseLeaveArcStrokeWidth" : 0,
          "CNVMouseMoveDisplay" : false,
          "CNVMouseMoveColor" : "red",
          "CNVMouseMoveArcOpacity" : 1.0,
          "CNVMouseMoveArcStrokeColor" : "#F26223",
          "CNVMouseMoveArcStrokeWidth" : 0,
          "CNVMouseOutDisplay" : false,
          "CNVMouseOutAnimationTime" : 500,
          "CNVMouseOutColor" : "red",
          "CNVMouseOutArcOpacity" : 1.0,
          "CNVMouseOutArcStrokeColor" : "red",
          "CNVMouseOutArcStrokeWidth" : 0,
          "CNVMouseUpDisplay" : false,
          "CNVMouseUpColor" : "grey",
          "CNVMouseUpArcOpacity" : 1.0,
          "CNVMouseUpArcStrokeColor" : "#F26223",
          "CNVMouseUpArcStrokeWidth" : 0,
          "CNVMouseOverDisplay" : false,
          "CNVMouseOverColor" : "red",
          "CNVMouseOverArcOpacity" : 1.0,
          "CNVMouseOverArcStrokeColor" : "#F26223",
          "CNVMouseOverArcStrokeWidth" : 3,
          "CNVMouseOverTooltipsHtml01" : "chr : ",
          "CNVMouseOverTooltipsHtml02" : "<br>start : ",
          "CNVMouseOverTooltipsHtml03" : "<br>end : ",
          "CNVMouseOverTooltipsHtml04" : "<br>value : ",
          "CNVMouseOverTooltipsHtml05" : "",
          "CNVMouseOverTooltipsPosition" : "absolute",
          "CNVMouseOverTooltipsBackgroundColor" : "white",
          "CNVMouseOverTooltipsBorderStyle" : "solid",
          "CNVMouseOverTooltipsBorderWidth" : 0,
          "CNVMouseOverTooltipsPadding" : "3px",
          "CNVMouseOverTooltipsBorderRadius" : "3px",
          "CNVMouseOverTooltipsOpacity" : 0.8,
          "HEATMAPMouseEvent" : true,
          "HEATMAPMouseClickDisplay" : true,
          "HEATMAPMouseClickColor" : "green",            //"none","red"
          "HEATMAPMouseClickOpacity" : 1.0,            //"none",1.0
          "HEATMAPMouseClickStrokeColor" : "green",  //"none","#F26223"
          "HEATMAPMouseClickStrokeWidth" : 1.0,          //"none",3
          "HEATMAPMouseDownDisplay" : true,
          "HEATMAPMouseDownColor" : "green",            //"none","red"
          "HEATMAPMouseDownOpacity" : 1.0,            //"none",1.0
          "HEATMAPMouseDownStrokeColor" : "none",  //"none","#F26223"
          "HEATMAPMouseDownStrokeWidth" : "none",          //"none",3
          "HEATMAPMouseEnterDisplay" : true,
          "HEATMAPMouseEnterColor" : "green",            //"none","red"
          "HEATMAPMouseEnterOpacity" : 1.0,            //"none",1.0
          "HEATMAPMouseEnterStrokeColor" : "none",  //"none","#F26223"
          "HEATMAPMouseEnterStrokeWidth" : "none",          //"none",3
          "HEATMAPMouseLeaveDisplay" : true,
          "HEATMAPMouseLeaveColor" : "none",            //"none","red"
          "HEATMAPMouseLeaveOpacity" : 1.0,            //"none",1.0
          "HEATMAPMouseLeaveStrokeColor" : "none",  //"none","#F26223"
          "HEATMAPMouseLeaveStrokeWidth" : "none",          //"none",3
          "HEATMAPMouseMoveDisplay" : true,
          "HEATMAPMouseMoveColor" : "none",            //"none","red"
          "HEATMAPMouseMoveOpacity" : 1.0,            //"none",1.0
          "HEATMAPMouseMoveStrokeColor" : "none",  //"none","#F26223"
          "HEATMAPMouseMoveStrokeWidth" : "none",          //"none",3
          "HEATMAPMouseOutDisplay" : true,
          "HEATMAPMouseOutAnimationTime" : 50,
          "HEATMAPMouseOutColor" : "none",            //"none","red"
          "HEATMAPMouseOutOpacity" : 1.0,            //"none",1.0
          "HEATMAPMouseOutStrokeColor" : "none",  //"none","#F26223"
          "HEATMAPMouseOutStrokeWidth" : "none",          //"none",3
          "HEATMAPMouseUpDisplay" : true,
          "HEATMAPMouseUpColor" : "green",            //"none","red"
          "HEATMAPMouseUpOpacity" : 1.0,            //"none",1.0
          "HEATMAPMouseUpStrokeColor" : "none",  //"none","#F26223"
          "HEATMAPMouseUpStrokeWidth" : "none",          //"none",3
          "HEATMAPMouseOverDisplay" : true,
          "HEATMAPMouseOverColor" : "none",            //"none","red"
          "HEATMAPMouseOverOpacity" : 1.0,            //"none",1.0
          "HEATMAPMouseOverStrokeColor" : "none",  //"none","#F26223"
          "HEATMAPMouseOverStrokeWidth" : "none",          //"none",3
          "HEATMAPMouseOverTooltipsHtml01" : "chr : ",
          "HEATMAPMouseOverTooltipsHtml02" : "<br>position: ",
          "HEATMAPMouseOverTooltipsHtml03" : "-",
          "HEATMAPMouseOverTooltipsHtml04" : " / ",
          "HEATMAPMouseOverTooltipsHtml05" : "<br>Number of genes / region : ",
          "HEATMAPMouseOverTooltipsHtml06" : "",
          "HEATMAPMouseOverTooltipsPosition" : "absolute",
          "HEATMAPMouseOverTooltipsBackgroundColor" : "#bfe0fa",
          "HEATMAPMouseOverTooltipsBorderStyle" : "solid",
          "HEATMAPMouseOverTooltipsBorderWidth" : 1,
          "HEATMAPMouseOverTooltipsPadding" : "3px",
          "HEATMAPMouseOverTooltipsBorderRadius" : "5px",
          "HEATMAPMouseOverTooltipsOpacity" : 0.8,
          "SNPMouseEvent" : true,
          "SNPMouseClickDisplay" : false,
          "SNPMouseClickColor" : "red",
          "SNPMouseClickCircleSize" : 4,
          "SNPMouseClickCircleOpacity" : 1.0,
          "SNPMouseClickCircleStrokeColor" : "#F26223",
          "SNPMouseClickCircleStrokeWidth" : 0,
          "SNPMouseClickTextFromData" : "fourth",   //first,second,third,fourth column
          "SNPMouseClickTextOpacity" : 1.0,
          "SNPMouseClickTextColor" : "red",
          "SNPMouseClickTextSize" : 8,
          "SNPMouseClickTextPostionX" : 1.0,
          "SNPMouseClickTextPostionY" : 10.0,
          "SNPMouseClickTextDrag" : true,
          "SNPMouseDownDisplay" : false,
          "SNPMouseDownColor" : "green",
          "SNPMouseDownCircleSize" : 4,
          "SNPMouseDownCircleOpacity" : 1.0,
          "SNPMouseDownCircleStrokeColor" : "#F26223",
          "SNPMouseDownCircleStrokeWidth" : 0,
          "SNPMouseEnterDisplay" : false,
          "SNPMouseEnterColor" : "yellow",
          "SNPMouseEnterCircleSize" : 4,
          "SNPMouseEnterCircleOpacity" : 1.0,
          "SNPMouseEnterCircleStrokeColor" : "#F26223",
          "SNPMouseEnterCircleStrokeWidth" : 0,
          "SNPMouseLeaveDisplay" : false,
          "SNPMouseLeaveColor" : "pink",
          "SNPMouseLeaveCircleSize" : 4,
          "SNPMouseLeaveCircleOpacity" : 1.0,
          "SNPMouseLeaveCircleStrokeColor" : "#F26223",
          "SNPMouseLeaveCircleStrokeWidth" : 0,
          "SNPMouseMoveDisplay" : false,
          "SNPMouseMoveColor" : "red",
          "SNPMouseMoveCircleSize" : 2,
          "SNPMouseMoveCircleOpacity" : 1.0,
          "SNPMouseMoveCircleStrokeColor" : "#F26223",
          "SNPMouseMoveCircleStrokeWidth" : 0,
          "SNPMouseOutDisplay" : false,
          "SNPMouseOutAnimationTime" : 500,
          "SNPMouseOutColor" : "red",
          "SNPMouseOutCircleSize" : 2,
          "SNPMouseOutCircleOpacity" : 1.0,
          "SNPMouseOutCircleStrokeColor" : "red",
          "SNPMouseOutCircleStrokeWidth" : 0,
          "SNPMouseUpDisplay" : false,
          "SNPMouseUpColor" : "grey",
          "SNPMouseUpCircleSize" : 4,
          "SNPMouseUpCircleOpacity" : 1.0,
          "SNPMouseUpCircleStrokeColor" : "#F26223",
          "SNPMouseUpCircleStrokeWidth" : 0,
          "SNPMouseOverDisplay" : false,
          "SNPMouseOverColor" : "red",
          "SNPMouseOverCircleSize" : 2,
          "SNPMouseOverCircleOpacity" : 1.0,
          "SNPMouseOverCircleStrokeColor" : "#F26223",
          "SNPMouseOverCircleStrokeWidth" : 3,
          "SNPMouseOverTooltipsHtml01" : "chr : ",
          "SNPMouseOverTooltipsHtml02" : "<br>position : ",
          "SNPMouseOverTooltipsHtml03" : "<br>value : ",
          "SNPMouseOverTooltipsHtml04" : "<br>des : ",
          "SNPMouseOverTooltipsHtml05" : "",
          "SNPMouseOverTooltipsPosition" : "absolute",
          "SNPMouseOverTooltipsBackgroundColor" : "white",
          "SNPMouseOverTooltipsBorderStyle" : "solid",
          "SNPMouseOverTooltipsBorderWidth" : 0,
          "SNPMouseOverTooltipsPadding" : "3px",
          "SNPMouseOverTooltipsBorderRadius" : "3px",
          "SNPMouseOverTooltipsOpacity" : 0.8,
          "TEXTModuleDragEvent" : true,
          "LINKMouseEvent" : true,
          "LINKMouseClickDisplay" : false,
          "LINKMouseClickOpacity" : 1.0,
          "LINKMouseClickStrokeColor" : "green",
          "LINKMouseClickStrokeWidth" : 4,
          "LINKMouseDownDisplay" : false,
          "LINKMouseDownOpacity" : 1.0,
          "LINKMouseDownStrokeColor" : "#F26223",
          "LINKMouseDownStrokeWidth" : 4,
          "LINKMouseEnterDisplay" : false,
          "LINKMouseEnterOpacity" : 1.0,
          "LINKMouseEnterStrokeColor" : "#F26223",
          "LINKMouseEnterStrokeWidth" : 4,
          "LINKMouseLeaveDisplay" : false,
          "LINKMouseLeaveOpacity" : 1.0,
          "LINKMouseLeaveStrokeColor" : "#F26223",
          "LINKMouseLeaveStrokeWidth" : 4,
          "LINKMouseMoveDisplay" : false,
          "LINKMouseMoveOpacity" : 1.0,
          "LINKMouseMoveStrokeColor" : "#F26223",
          "LINKMouseMoveStrokeWidth" : 4,
          "LINKMouseOutDisplay" : false,
          "LINKMouseOutAnimationTime" : 500,
          "LINKMouseOutOpacity" : 1.0,
          "LINKMouseOutStrokeColor" : "red",
          "LINKMouseOutStrokeWidth" : 4,
          "LINKMouseUpDisplay" : false,
          "LINKMouseUpOpacity" : 1.0,
          "LINKMouseUpStrokeColor" : "#F26223",
          "LINKMouseUpStrokeWidth" : 4,
          "LINKMouseOverDisplay" : false,
          "LINKMouseOverOpacity" : 1.0,
          "LINKMouseOverStrokeColor" : "#F26223",
          "LINKMouseOverStrokeWidth" : 1,
          "LINKMouseOverTooltipsHtml01" : "Link : ",
          "LINKMouseOverTooltipsHtml02" : "",
          "LINKMouseOverTooltipsPosition" : "absolute",
          "LINKMouseOverTooltipsBackgroundColor" : "white",
          "LINKMouseOverTooltipsBorderStyle" : "solid",
          "LINKMouseOverTooltipsBorderWidth" : 0,
          "LINKMouseOverTooltipsPadding" : "3px",
          "LINKMouseOverTooltipsBorderRadius" : "3px",
          "LINKMouseOverTooltipsOpacity" : 0.8,
          "LINKLabelDragEvent" : false,
          "HISTOGRAMMouseEvent" : true,
          "HISTOGRAMMouseClickDisplay" : false,
          "HISTOGRAMMouseClickColor" : "red",            //"none","red"
          "HISTOGRAMMouseClickOpacity" : 1.0,            //"none",1.0
          "HISTOGRAMMouseClickStrokeColor" : "none",  //"none","#F26223"
          "HISTOGRAMMouseClickStrokeWidth" : "none",          //"none",3
          "HISTOGRAMMouseDownDisplay" : false,
          "HISTOGRAMMouseDownColor" : "red",            //"none","red"
          "HISTOGRAMMouseDownOpacity" : 1.0,            //"none",1.0
          "HISTOGRAMMouseDownStrokeColor" : "none",  //"none","#F26223"
          "HISTOGRAMMouseDownStrokeWidth" : "none",          //"none",3
          "HISTOGRAMMouseEnterDisplay" : false,
          "HISTOGRAMMouseEnterColor" : "red",            //"none","red"
          "HISTOGRAMMouseEnterOpacity" : 1.0,            //"none",1.0
          "HISTOGRAMMouseEnterStrokeColor" : "none",  //"none","#F26223"
          "HISTOGRAMMouseEnterStrokeWidth" : "none",          //"none",3
          "HISTOGRAMMouseLeaveDisplay" : true,
          "HISTOGRAMMouseLeaveColor" : "red",            //"none","red"
          "HISTOGRAMMouseLeaveOpacity" : 1.0,            //"none",1.0
          "HISTOGRAMMouseLeaveStrokeColor" : "none",  //"none","#F26223"
          "HISTOGRAMMouseLeaveStrokeWidth" : "none",          //"none",3
          "HISTOGRAMMouseMoveDisplay" : true  ,
          "HISTOGRAMMouseMoveColor" : "red",            //"none","red"
          "HISTOGRAMMouseMoveOpacity" : 1.0,            //"none",1.0
          "HISTOGRAMMouseMoveStrokeColor" : "none",  //"none","#F26223"
          "HISTOGRAMMouseMoveStrokeWidth" : "none",          //"none",3
          "HISTOGRAMMouseOutDisplay" : true,
          "HISTOGRAMMouseOutAnimationTime" : 500,
          "HISTOGRAMMouseOutColor" : "none",            //"none","red"
          "HISTOGRAMMouseOutOpacity" : 1.0,            //"none",1.0
          "HISTOGRAMMouseOutStrokeColor" : "none",  //"none","#F26223"
          "HISTOGRAMMouseOutStrokeWidth" : "none",          //"none",3
          "HISTOGRAMMouseUpDisplay" : false,
          "HISTOGRAMMouseUpColor" : "red",            //"none","red"
          "HISTOGRAMMouseUpOpacity" : 1.0,            //"none",1.0
          "HISTOGRAMMouseUpStrokeColor" : "none",  //"none","#F26223"
          "HISTOGRAMMouseUpStrokeWidth" : "none",          //"none",3
          "HISTOGRAMMouseOverDisplay" :true,
          "HISTOGRAMMouseOverColor" : "none",            //"none","red"
          "HISTOGRAMMouseOverOpacity" : 1.0,            //"none",1.0
          "HISTOGRAMMouseOverStrokeColor" : "none",  //"none","#F26223"
          "HISTOGRAMMouseOverStrokeWidth" : "none",          //"none",3
          "HISTOGRAMMouseOverTooltipsHtml01" : "chr :",
          "HISTOGRAMMouseOverTooltipsHtml02" : "<br>position: ",
          "HISTOGRAMMouseOverTooltipsHtml03" : "-",
          "HISTOGRAMMouseOverTooltipsHtml04" : " / ",
          "HISTOGRAMMouseOverTooltipsHtml05" : "<br>SNPs/region : ",
          "HISTOGRAMMouseOverTooltipsHtml06" : "",
          "HISTOGRAMMouseOverTooltipsPosition" : "absolute",
          "HISTOGRAMMouseOverTooltipsBackgroundColor" : "#bfe0fa",
          "HISTOGRAMMouseOverTooltipsBorderStyle" : "solid",
          "HISTOGRAMMouseOverTooltipsBorderWidth" : 1,
          "HISTOGRAMMouseOverTooltipsPadding" : "3px",
          "HISTOGRAMMouseOverTooltipsBorderRadius" : "5px",
          "HISTOGRAMMouseOverTooltipsOpacity" : 0.8,
          "LINEMouseEvent" : true,
          "LINEMouseClickDisplay" : false,
          "LINEMouseClickLineOpacity" : 1,           //"none"
          "LINEMouseClickLineStrokeColor" : "red",   //"none"
          "LINEMouseClickLineStrokeWidth" : "none",  //"none"
          "LINEMouseDownDisplay" : false,
          "LINEMouseDownLineOpacity" : 1,           //"none"
          "LINEMouseDownLineStrokeColor" : "red",   //"none"
          "LINEMouseDownLineStrokeWidth" : "none",  //"none"
          "LINEMouseEnterDisplay" : false,
          "LINEMouseEnterLineOpacity" : 1,           //"none"
          "LINEMouseEnterLineStrokeColor" : "red",   //"none"
          "LINEMouseEnterLineStrokeWidth" : "none",  //"none"
          "LINEMouseLeaveDisplay" : false,
          "LINEMouseLeaveLineOpacity" : 1,           //"none"
          "LINEMouseLeaveLineStrokeColor" : "red",   //"none"
          "LINEMouseLeaveLineStrokeWidth" : "none",  //"none"
          "LINEMouseMoveDisplay" : false,
          "LINEMouseMoveLineOpacity" : 1,           //"none"
          "LINEMouseMoveLineStrokeColor" : "red",   //"none"
          "LINEMouseMoveLineStrokeWidth" : "none",  //"none"
          "LINEMouseOutDisplay" : false,
          "LINEMouseOutAnimationTime" : 500,
          "LINEMouseOutLineOpacity" : 1.0,   //"none"
          "LINEMouseOutLineStrokeColor" : "red",    //"none"
          "LINEMouseOutLineStrokeWidth" : "none",    //"none"
          "LINEMouseUpDisplay" : false,
          "LINEMouseUpLineOpacity" : 1,           //"none"
          "LINEMouseUpLineStrokeColor" : "red",   //"none"
          "LINEMouseUpLineStrokeWidth" : "none",  //"none"
          "LINEMouseOverDisplay" : false,
          "LINEMouseOverLineOpacity" : 1,           //"none"
          "LINEMouseOverLineStrokeColor" : "red",   //"none"
          "LINEMouseOverLineStrokeWidth" : "none",  //"none"
          "LINEMouseOverTooltipsHtml01" : "Line",
          "LINEMouseOverTooltipsPosition" : "absolute",
          "LINEMouseOverTooltipsBackgroundColor" : "white",
          "LINEMouseOverTooltipsBorderStyle" : "solid",
          "LINEMouseOverTooltipsBorderWidth" : 0,
          "LINEMouseOverTooltipsPadding" : "3px",
          "LINEMouseOverTooltipsBorderRadius" : "3px",
          "LINEMouseOverTooltipsOpacity" : 0.8,
          "SCATTERMouseEvent" : true,
          "SCATTERMouseClickDisplay" : false,
          "SCATTERMouseClickColor" : "red",
          "SCATTERMouseClickCircleSize" : 4,
          "SCATTERMouseClickCircleOpacity" : 1.0,
          "SCATTERMouseClickCircleStrokeColor" : "#F26223",
          "SCATTERMouseClickCircleStrokeWidth" : 0,
          "SCATTERMouseClickTextFromData" : "fourth",   //first,second,third,fourth column
          "SCATTERMouseClickTextOpacity" : 1,
          "SCATTERMouseClickTextColor" : "red",
          "SCATTERMouseClickTextSize" : 8,
          "SCATTERMouseClickTextPostionX" : 1.0,
          "SCATTERMouseClickTextPostionY" : 10.0,
          "SCATTERMouseClickTextDrag" : true,
          "SCATTERMouseDownDisplay" : false,
          "SCATTERMouseDownColor" : "green",
          "SCATTERMouseDownCircleSize" : 4,
          "SCATTERMouseDownCircleOpacity" : 1.0,
          "SCATTERMouseDownCircleStrokeColor" : "#F26223",
          "SCATTERMouseDownCircleStrokeWidth" : 0,
          "SCATTERMouseEnterDisplay" : false,
          "SCATTERMouseEnterColor" : "yellow",
          "SCATTERMouseEnterCircleSize" : 4,
          "SCATTERMouseEnterCircleOpacity" : 1.0,
          "SCATTERMouseEnterCircleStrokeColor" : "#F26223",
          "SCATTERMouseEnterCircleStrokeWidth" : 0,
          "SCATTERMouseLeaveDisplay" : false,
          "SCATTERMouseLeaveColor" : "pink",
          "SCATTERMouseLeaveCircleSize" : 4,
          "SCATTERMouseLeaveCircleOpacity" : 1.0,
          "SCATTERMouseLeaveCircleStrokeColor" : "#F26223",
          "SCATTERMouseLeaveCircleStrokeWidth" : 0,
          "SCATTERMouseMoveDisplay" : false,
          "SCATTERMouseMoveColor" : "red",
          "SCATTERMouseMoveCircleSize" : 2,
          "SCATTERMouseMoveCircleOpacity" : 1.0,
          "SCATTERMouseMoveCircleStrokeColor" : "#F26223",
          "SCATTERMouseMoveCircleStrokeWidth" : 0,
          "SCATTERMouseOutDisplay" : false,
          "SCATTERMouseOutAnimationTime" : 500,
          "SCATTERMouseOutColor" : "red",
          "SCATTERMouseOutCircleSize" : 2,
          "SCATTERMouseOutCircleOpacity" : 1.0,
          "SCATTERMouseOutCircleStrokeColor" : "red",
          "SCATTERMouseOutCircleStrokeWidth" : 0,
          "SCATTERMouseUpDisplay" : false,
          "SCATTERMouseUpColor" : "grey",
          "SCATTERMouseUpCircleSize" : 4,
          "SCATTERMouseUpCircleOpacity" : 1.0,
          "SCATTERMouseUpCircleStrokeColor" : "#F26223",
          "SCATTERMouseUpCircleStrokeWidth" : 0,
          "SCATTERMouseOverDisplay" : false,
          "SCATTERMouseOverColor" : "red",
          "SCATTERMouseOverCircleSize" : 2,
          "SCATTERMouseOverCircleOpacity" : 1.0,
          "SCATTERMouseOverCircleStrokeColor" : "#F26223",
          "SCATTERMouseOverCircleStrokeWidth" : 3,
          "SCATTERMouseOverTooltipsHtml01" : "item : ",
          "SCATTERMouseOverTooltipsHtml02" : "<br>start : ",
          "SCATTERMouseOverTooltipsHtml03" : "<br>end : ",
          "SCATTERMouseOverTooltipsHtml04" : "<br>name : ",
          "SCATTERMouseOverTooltipsHtml05" : "<br>des : ",
          "SCATTERMouseOverTooltipsHtml06" : "",
          "SCATTERMouseOverTooltipsPosition" : "absolute",
          "SCATTERMouseOverTooltipsBackgroundColor" : "white",
          "SCATTERMouseOverTooltipsBorderStyle" : "solid",
          "SCATTERMouseOverTooltipsBorderWidth" : 0,
          "SCATTERMouseOverTooltipsPadding" : "3px",
          "SCATTERMouseOverTooltipsBorderRadius" : "3px",
          "SCATTERMouseOverTooltipsOpacity" : 0.8,
          "ARCMouseEvent" : true,
          "ARCMouseClickDisplay" : false,
          "ARCMouseClickColor" : "red",
          "ARCMouseClickArcOpacity" : 1.0,
          "ARCMouseClickArcStrokeColor" : "none",
          "ARCMouseClickArcStrokeWidth" : "none",
          "ARCMouseClickTextFromData" : "fourth",   //first,second,third,fourth column
          "ARCMouseClickTextOpacity" : 1,
          "ARCMouseClickTextColor" : "red",
          "ARCMouseClickTextSize" : 8,
          "ARCMouseClickTextPostionX" : 0,
          "ARCMouseClickTextPostionY" : 0,
          "ARCMouseClickTextDrag" : true,
          "ARCMouseDownDisplay" : false,
          "ARCMouseDownColor" : "green",
          "ARCMouseDownArcOpacity" : 1.0,
          "ARCMouseDownArcStrokeColor" : "#F26223",
          "ARCMouseDownArcStrokeWidth" : 0,
          "ARCMouseEnterDisplay" : false,
          "ARCMouseEnterColor" : "yellow",
          "ARCMouseEnterArcOpacity" : 1.0,
          "ARCMouseEnterArcStrokeColor" : "#F26223",
          "ARCMouseEnterArcStrokeWidth" : 0,
          "ARCMouseLeaveDisplay" : true,
          "ARCMouseLeaveColor" : "pink",
          "ARCMouseLeaveArcOpacity" : 1.0,
          "ARCMouseLeaveArcStrokeColor" : "#F26223",
          "ARCMouseLeaveArcStrokeWidth" : 0,
          "ARCMouseMoveDisplay" : true,
          "ARCMouseMoveColor" : "red",
          "ARCMouseMoveArcOpacity" : 1.0,
          "ARCMouseMoveArcStrokeColor" : "none",
          "ARCMouseMoveArcStrokeWidth" : "none",
          "ARCMouseOutDisplay" : true,
          "ARCMouseOutAnimationTime" : 500,
          "ARCMouseOutColor" : "none",
          "ARCMouseOutArcOpacity" : 1.0,
          "ARCMouseOutArcStrokeColor" : "red",
          "ARCMouseOutArcStrokeWidth" : 0,
          "ARCMouseUpDisplay" : false,
          "ARCMouseUpColor" : "grey",
          "ARCMouseUpArcOpacity" : 1.0,
          "ARCMouseUpArcStrokeColor" : "#F26223",
          "ARCMouseUpArcStrokeWidth" : 0,
          "ARCMouseOverDisplay" : true,
          "ARCMouseOverColor" : "none",
          "ARCMouseOverArcOpacity" : 1.0,
          "ARCMouseOverArcStrokeColor" : "none",
          "ARCMouseOverArcStrokeWidth" : "none",
          "ARCMouseOverTooltipsHtml01" : "chr : ",
          "ARCMouseOverTooltipsHtml02" : "<br>start : ",
          "ARCMouseOverTooltipsHtml03" : "<br>end : ",
          "ARCMouseOverTooltipsHtml04" : "<br>gene : ",
          "ARCMouseOverTooltipsHtml05" : "<br>logFC :",
          "ARCMouseOverTooltipsPosition" : "absolute",
          "ARCMouseOverTooltipsBackgroundColor" : "white",
          "ARCMouseOverTooltipsBorderStyle" : "solid",
          "ARCMouseOverTooltipsBorderWidth" : 1,
          "ARCMouseOverTooltipsPadding" : "3px",
          "ARCMouseOverTooltipsBorderRadius" : "5px",
          "ARCMouseOverTooltipsOpacity" : 0.8,
          "genomeBorder" : {
             "display" : true,
             "borderColor" : "#000",
             "borderSize" : 0.5
          },
          "ticks" : {
             "display" : true,
             "len" : 5,
             "color" : "#000",
             "textSize" : 10,
             "textColor" : "#000",
             "scale" : 30000000,
             "displayText" : true,
          },
          "genomeLabel" : {
             "display" : true,
             "textSize" : 15,
             "textColor" : "#000",
             "dx" : 0.028,
             "dy" : "-0.55em"
          }
      };

      self.CNVsettings = {
          "maxRadius": 200,
          "minRadius": 190,
          "CNVwidth": 10,
          "CNVColor": "#CAE1FF"
      };

      self.HEATMAPsettings = {
          "innerRadius": -100,
          "outerRadius": -100,
          "maxColor": "red",
          "minColor": "green",
          "posDown": null,
          "posUp": null
      };

      self.ZOOM_SLIDERsettings = {
          "minRadius": -100,
          "maxRadius": -100,
          "maxColor": "grey",
          "minColor": "grey",
          "posDown": null,
          "posUp": null
      };

      self.SNPsettings = {
          "maxRadius": 200,
          "minRadius": 190,
          "SNPFillColor": "red",
          "PointType": "circle", //circle,rect
          "circleSize": 2,
          "rectWidth": 2,
          "rectHeight": 2,
          "SNPAnimationDisplay": false,
          "SNPAnimationTime": 2000,
          "SNPAnimationDelay": 20,
          "SNPAnimationType": "bounce",  //linear,circle,elastic,bounce
      };

      self.LINKsettings = {
          "LinkRadius": 108,
          "LinkFillColor": "red",
          "LinkWidth": 1,
          "displayLinkAxis": true,
          "LinkAxisColor": "#B8B8B8",
          "LinkAxisWidth": 0.5,
          "LinkAxisPad": 3,
          "displayLinkLabel": true,
          "LinkLabelColor": "red",
          "LinkLabelSize": 13,
          "LinkLabelPad": 8
      };

      self.HISTOGRAMsettings = {
          "maxRadius": 108,
          "minRadius": 95,
          "histogramFillColor": "red"
      };

      self.LINEsettings = {
          "maxRadius": 108,
          "minRadius": 95,
          "LineFillColor": "red",
          "LineWidth": 0.5
      };

      self.SCATTERsettings = {
          "SCATTERRadius": 140,
          "innerCircleSize": 1,
          "outerCircleSize": 5,
          "innerCircleColor": "#F26223",
          "outerCircleColor": "#F26223",
          "innerPointType": "circle", //circle,rect
          "outerPointType": "circle", //circle,rect
          "innerrectWidth": 2,
          "innerrectHeight": 2,
          "outerrectWidth": 2,
          "outerrectHeight": 2,
          "outerCircleOpacity": 1,
          "random_data": 0,
          "SCATTERAnimationDisplay": false,
          "SCATTERAnimationTime": 2000,
          "SCATTERAnimationDelay": 20,
          "SCATTERAnimationType": "bounce",  //linear,circle,elastic,bounce
      };

      self.BACKGROUNDsettings = {
          "BginnerRadius": 180,
          "BgouterRadius": 230,
          "BgFillColor": "none",
          "BgborderColor": "#000",
          "BgborderSize" : 0.5,
          "axisShow": "false",
          "axisWidth": 0.3,
          "axisColor": "#000",
          "axisOpacity": 0.5,
          "axisNum": 4
      };

      self.TEXTsettings = {
          "x": 20,
          "y": 20,
          "textSize": 10,
          "textWeight": "normal", //normal,bold,bolder,lighter,100,200,300,400,500,600,700,800,900
          "textColor": "#000",
          "textOpacity": 1.0
      };

      self.ARCsettings = {
          "innerRadius": -30,
          "outerRadius": -30
      };

      self.update_settings(self.argumentsBiocircosSettings)

      self.target = "#" + self.settings.target;
      self.svgWidth = self.settings.svgWidth;
      self.svgHeight = self.settings.svgHeight;
      self.chrPad = self.settings.chrPad;
      self.innerRadius = self.settings.innerRadius;
      self.outerRadius = self.settings.outerRadius;
      self.zoom = self.settings.zoom;
      self.testTip = self.settings.testTip;
      self.genomeFillColor = self.settings.genomeFillColor;
      self.genomeBorderDisplay=self.settings.genomeBorder.display;
      self.genomeBorderColor=self.settings.genomeBorder.borderColor;
      self.genomeBorderSize=self.settings.genomeBorder.borderSize;
      self.genome = self.argumentsBiocircosGenome;
      self.genome_matrix(self.argumentsBiocircosGenome)
      self.ticksDisplay=self.settings.ticks.display;
      self.ticksDisplayText = self.settings.ticks.displayText;
      self.ticksStartRest=self.settings.ticks.rest;
      this.ticksStart=self.settings.ticks.zoomStart;
      self.ticksLength=self.settings.ticks.len;
      self.ticksColor=self.settings.ticks.color;
      self.ticksTextSize=self.settings.ticks.textSize;
      self.ticksTextColor=self.settings.ticks.textColor;
      self.ticksScale=self.settings.ticks.scale;
      self.genomeTextDisplay=self.settings.genomeLabel.display;
      self.genomeTextSize=self.settings.genomeLabel.textSize;
      self.genomeTextColor=self.settings.genomeLabel.textColor;
      self.genomeTextDx=self.settings.genomeLabel.dx;
      self.genomeTextDy=self.settings.genomeLabel.dy;

      var labeli= self.genomeLabel.length;
      var initGenome = new Object();
      for(var labelk=0;labelk<labeli;labelk++){
          var labelInit=self.genomeLabel[labelk];
          initGenome[labelInit]=labelk;
      }
      self.initGenome = initGenome;

  }

  BioCircos.prototype.update_settings = function(settings_object){
    var self = this;
    $.extend(self.settings, settings_object);
  }

  BioCircos.prototype.update_CNVsettings = function(settings_object){
    var self = this;
    $.extend(self.CNVsettings, settings_object);
  }

  BioCircos.prototype.update_HEATMAPsettings = function(settings_object){
    var self = this;
    $.extend(self.HEATMAPsettings, settings_object);
  }

  BioCircos.prototype.update_ZOOM_SLIDERsettings = function(settings_object){
    var self = this;
    $.extend(self.ZOOM_SLIDERsettings, settings_object);
  }

  BioCircos.prototype.update_SNPsettings = function(settings_object){
    var self = this;
    $.extend(self.SNPsettings, settings_object);
  }

  BioCircos.prototype.update_LINKsettings = function(settings_object){
    var self = this;
    $.extend(self.LINKsettings, settings_object);
  }

  BioCircos.prototype.update_HISTOGRAMsettings = function(settings_object){
    var self = this;
    $.extend(self.HISTOGRAMsettings, settings_object);
  }

  BioCircos.prototype.update_LINEsettings = function(settings_object){
    var self = this;
    $.extend(self.LINEsettings, settings_object);
  }

  BioCircos.prototype.update_SCATTERsettings = function(settings_object){
    var self = this;
    $.extend(self.SCATTERsettings, settings_object);
  }

  BioCircos.prototype.update_BACKGROUNDsettings = function(settings_object){
    var self = this;
    $.extend(self.BACKGROUNDsettings, settings_object);
  }

  BioCircos.prototype.update_TEXTsettings = function(settings_object){
    var self = this;
    $.extend(self.TEXTsettings, settings_object);
  }

  BioCircos.prototype.update_ARCsettings = function(settings_object){
    var self = this;
    $.extend(self.ARCsettings, settings_object);
  }

  BioCircos.prototype.init_CNVsettings = function(){
    var self = this;
    self.CNVsettings = {
          "maxRadius": 200,
          "minRadius": 190,
          "CNVwidth": 10,
          "CNVColor": "#CAE1FF"
    };
  }

  BioCircos.prototype.init_HEATMAPsettings = function(){
    var self = this;
    self.HEATMAPsettings = {
          "innerRadius": -100,
          "outerRadius": -100,
          "maxColor": "red",
          "minColor": "green"
    };
  }

  BioCircos.prototype.init_ZOOM_SLIDERsettings = function(){
    var self = this;
    self.ZOOM_SLIDERsettings = {
          "minRadius": -100,
          "maxRadius": -100,
          "maxColor": "grey",
          "minColor": "grey"
    };
  }

  BioCircos.prototype.init_SNPsettings = function(){
    var self = this;
    self.SNPsettings = {
          "maxRadius": 200,
          "minRadius": 190,
          "SNPFillColor": "red",
          "PointType": "circle",
          "circleSize": 2,
          "rectWidth": 2,
          "rectHeight": 2,
          "SNPAnimationDisplay": false,
          "SNPAnimationTime": 2000,
          "SNPAnimationDelay": 20,
          "SNPAnimationType": "bounce",  //linear,circle,elastic,bounce
    };
  }

  BioCircos.prototype.init_LINKsettings = function(){
    var self = this;
    self.LINKsettings = {
          "LinkRadius": 108,
          "LinkFillColor": "red",
          "LinkWidth": 3,
          "displayLinkAxis": true,
          "LinkAxisColor": "#B8B8B8",
          "LinkAxisWidth": 0.5,
          "LinkAxisPad": 3,
          "displayLinkLabel": true,
          "LinkLabelColor": "red",
          "LinkLabelSize": 13,
          "LinkLabelPad": 8
    };
  }


  BioCircos.prototype.init_HISTOGRAMsettings = function(){
    var self = this;
    self.HISTOGRAMsettings = {
          "maxRadius": 108,
          "minRadius": 95,
          "histogramFillColor": "red"
    };
  }

  BioCircos.prototype.init_LINEsettings = function(){
    var self = this;
    self.LINEsettings = {
          "maxRadius": 108,
          "minRadius": 95,
          "LineFillColor": "red",
          "LineWidth": 0.5
    };
  }

  BioCircos.prototype.init_SCATTERsettings = function(){
    var self = this;
    self.SCATTERsettings = {
          "SCATTERRadius": 140,
          "innerCircleSize": 1,
          "outerCircleSize": 5,
          "innerCircleColor": "#F26223",
          "outerCircleColor": "#F26223",
          "innerPointType": "circle", //circle,rect
          "outerPointType": "circle", //circle,rect
          "innerrectWidth": 2,
          "innerrectHeight": 2,
          "outerrectWidth": 2,
          "outerrectHeight": 2,
          "outerCircleOpacity": 1,
          "random_data": 0,
          "SCATTERAnimationDisplay": false,
          "SCATTERAnimationTime": 2000,
          "SCATTERAnimationDelay": 20,
          "SCATTERAnimationType": "bounce",  //linear,circle,elastic,bounce
      };
  }

  BioCircos.prototype.init_BACKGROUNDsettings = function(){
    var self = this;
    self.BACKGROUNDsettings = {
          "BginnerRadius": 180,
          "BgouterRadius": 230,
          "BgFillColor": "none",
          "BgborderColor": "#000",
          "BgborderSize" : 0.5,
          "axisShow": "false",
          "axisWidth": 0.3,
          "axisColor": "#000",
          "axisOpacity": 0.5,
          "axisNum": 4
    };
  }

  BioCircos.prototype.init_TEXTsettings = function(){
    var self = this;
    self.TEXTsettings = {
          "x": 20,
          "y": 20,
          "textSize": 10,
          "textColor": "#000",
          "textWeight": "normal", //normal,bold,bolder,lighter,100,200,300,400,500,600,700,800,900
          "textOpacity": 1.0
    };
  }

  BioCircos.prototype.init_ARCsettings = function(){
    var self = this;
    self.ARCsettings = {
          "innerRadius": -100,
          "outerRadius": -100
    };
  }

  BioCircos.prototype.genome_matrix = function(genome){
      var self = this;
      var i=self.genome.length;
      var genomeLabel = new Array();
      var genomeLength = new Array();
      for(var k=0;k<i;k++){
          genomeLabel[k]=self.genome[k][0];
      }
      for(var k=0;k<i;k++){
          genomeLength[k]=self.genome[k][1];
      }
      var i=genomeLength.length;
      var p=genomeLength.length;
      var genome = new Array();
      for(var k=0;k<i;k++){
         genome[k]=new Array();
           for(var j=0;j<p;j++){
              genome[k][j]=0;
           }
      }
      for(var k=0;k<i;k++){
         genome[k][0]=genomeLength[k];
      }
      self.genomeLabel = genomeLabel;
      self.genomeLength = genome;
  }

  BioCircos.prototype.heatmap_value_maxmin = function(heatmapIn){
      var self = this;
      var i=heatmapIn.length;
      var heatmapValueList = new Array();
      for(var k=0;k<i;k++){
          heatmapValueList[k]=heatmapIn[k].value;
      }
      Array.max=function(array){
          return Math.max.apply(Math,array);
      }
      Array.min=function(array){
         return Math.min.apply(Math,array);
      }
      var heatmapValueMax = Array.max(heatmapValueList);
      var heatmapValueMin = Array.min(heatmapValueList);
      var heatmapValueMaxmin = new Array();
      heatmapValueMaxmin[0]=heatmapValueMax;
      heatmapValueMaxmin[1]=heatmapValueMin;
      return heatmapValueMaxmin;
  }

    BioCircos.prototype.zoom_slider_value_maxmin = function(zoom_sliderIn){
        var self = this;
        var i=zoom_sliderIn.length;
        var zoom_sliderValueList = new Array();
        for(var k=0;k<i;k++){
            zoom_sliderValueList[k]=zoom_sliderIn[k].value;
        }
        Array.max=function(array){
            return Math.max.apply(Math,array);
        }
        Array.min=function(array){
           return Math.min.apply(Math,array);
        }
        var zoom_sliderValueMax = Array.max(zoom_sliderValueList);
        var zoom_sliderValueMin = Array.min(zoom_sliderValueList);
        var zoom_sliderValueMaxmin = new Array();
        zoom_sliderValueMaxmin[0]=zoom_sliderValueMax;
        zoom_sliderValueMaxmin[1]=zoom_sliderValueMin;
        return zoom_sliderValueMaxmin;
    }
  BioCircos.prototype.snp_value_maxmin = function(snpIn){
      var self = this;
      var i=snpIn.length;
      var snpValueList = new Array();
      for(var k=0;k<i;k++){
          snpValueList[k]=snpIn[k].value;
      }
      Array.max=function(array){
          return Math.max.apply(Math,array);
      }
      Array.min=function(array){
         return Math.min.apply(Math,array);
      }
      var snpValueMax = Array.max(snpValueList);
      var snpValueMin = Array.min(snpValueList);
      var snpValueMaxmin = new Array();
      snpValueMaxmin[0]=snpValueMax;
      snpValueMaxmin[1]=snpValueMin;
      return snpValueMaxmin;
  }

  BioCircos.prototype.cnv_value_maxmin = function(cnvIn){
      var self = this;
      var i=cnvIn.length;
      var cnvValueList = new Array();
      for(var k=0;k<i;k++){
          cnvValueList[k]=cnvIn[k].value;
      }
      Array.max=function(array){
          return Math.max.apply(Math,array);
      }
      Array.min=function(array){
         return Math.min.apply(Math,array);
      }
      var cnvValueMax = Array.max(cnvValueList);
      var cnvValueMin = Array.min(cnvValueList);
      var cnvValueMaxmin = new Array();
      cnvValueMaxmin[0]=cnvValueMax;
      cnvValueMaxmin[1]=cnvValueMin;
      return cnvValueMaxmin;
  }

  BioCircos.prototype.histogram_value_maxmin = function(histogramIn){
      var self = this;


      var maxIn = histogramIn.max;
      histogramIn = histogramIn.list;

      var i=histogramIn.length;

      var histogramValueList = new Array();
      for(var k=0;k<i;k++){
          histogramValueList[k]=histogramIn[k].value;
      }
      Array.max=function(array){
          return Math.max.apply(Math,array);
      }
      Array.min=function(array){
         return Math.min.apply(Math,array);
      }


      var histogramValueMax;
      if(maxIn){
        histogramValueMax = maxIn;
      }else{
        histogramValueMax = Array.max(histogramValueList);
      }


      var histogramValueMin = Array.min(histogramValueList);
      var histogramValueMaxmin = new Array();
      histogramValueMaxmin[0]=histogramValueMax;
      histogramValueMaxmin[1]=histogramValueMin;



      return histogramValueMaxmin;
  }

  BioCircos.prototype.line_value_maxmin = function(lineIn){
      var self = this;
      var maxIn = lineIn.max;
      lineIn = lineIn.list;

      var i=lineIn.length;
      var lineValueList = new Array();
      for(var k=0;k<i;k++){
          lineValueList[k]=lineIn[k].value;
      }
      Array.max=function(array){
          return Math.max.apply(Math,array);
      }
      Array.min=function(array){
         return Math.min.apply(Math,array);
      }

      var lineValueMax;
      if(maxIn){
        lineValueMax = maxIn;
      }else{

        lineValueMax = Array.max(lineValueList);
      }

      var lineValueMin = Array.min(lineValueList);
      var lineValueMaxmin = new Array();
      lineValueMaxmin[0]=lineValueMax;
      lineValueMaxmin[1]=lineValueMin;
      return lineValueMaxmin;
  }




  BioCircos.prototype.draw_genome = function(genome){
    var self = this;
   document.getElementById(self.settings.target).onmousemove = function(e){
     currentMousePosition = [e.clientX, e.clientY];
   }

    var chord = d3.layout.chord()
      .padding(self.chrPad)
      .sortSubgroups(d3.descending)
      .matrix(genome);

    var width = self.svgWidth,
      height = self.svgHeight,
      innerRadius = self.innerRadius,
      outerRadius = self.outerRadius;

    var fill = d3.scale.ordinal()
        .domain(d3.range(4))
        .range(self.genomeFillColor);

    if(self.zoom == true){


        function zoom() {

            a=d3.event.translate[0]
            b=d3.event.translate[1]

            svg.attr("transform", "translate("
                + a +","+ b
                + ")scale(" + d3.event.scale + ")");
        }

        var svg = d3.select(self.target).append("svg")
            .attr("width", width)
            .attr("height", height)
            .call(
                 d3.behavior.zoom(width / 2, height / 2)
                 .scaleExtent([0.9, 10])
                 .on("zoom", zoom)
            )
          .append("g")
            .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");


    }else{

        var svg = d3.select(self.target).append("svg")
            .attr("width", width)
            .attr("height", height)
          .append("g")
            .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");
    }

    if(self.genomeBorderDisplay == true){
        svg.append("g").selectAll("path")
            .data(chord.groups)
          .enter().append("path")
            .attr("class", function(d,i){ return "BioCircosGENOME chr"+i})
            .style("fill", function(d) { return fill(d.index); })
            .style("stroke", self.genomeBorderColor)
            .style("stroke-width", self.genomeBorderSize)
            .attr("d", d3.svg.arc().innerRadius(innerRadius).outerRadius(outerRadius))
            .attr("group", function(d,i) { return self.genomeLabel[i]; })
    }else{
        svg.append("g").selectAll("path")
            .data(chord.groups)
          .enter().append("path")
            .attr("class", function(d,i){ return "BioCircosGENOME chr"+i})
            .style("fill", function(d) { return fill(d.index); })
            .style("stroke", function(d) { return fill(d.index); })
            .attr("d", d3.svg.arc().innerRadius(innerRadius).outerRadius(outerRadius))
            .attr("group", function(d,i) { return self.genomeLabel[i]; })
    }

    var GENOMEMouseon = svg.selectAll("path.BioCircosGENOME");
    GENOMEMouseon.on("mouseover", function(d){
      lastHoveredChromosome=d.name;

      var g = d3.select(".BioCircosLINK")
      var chromosomesLinks = d3.selectAll("path.BioCircosLINK")[0];
      for(let link of chromosomesLinks){
        if(!link.classList.value.includes("chr"+lastHoveredChromosome)){
          link.style["opacity"]="0.1";
        }else{
          link.style["opacity"]="0.5";
        }
      }
    });

    GENOMEMouseon.on("mouseleave", function(d, e){

      var chr = d3.selectAll("path.BioCircosGENOME.chr"+e)[0];
      chr=chr[0];

      var box = chr.getBoundingClientRect()
      var boxCenter = [box.left+ (box.right-box.left)/2, box.top+(box.bottom-box.top)/2];

      var parent = chr.parentNode;
      var boxParent = parent.getBoundingClientRect()
      var boxCenterParent = [boxParent.left+ (boxParent.right-boxParent.left)/2, boxParent.top+(boxParent.bottom-boxParent.top)/2];


      if(Math.sqrt(Math.pow(currentMousePosition[0]-boxCenterParent[0], 2) + Math.pow(currentMousePosition[1]-boxCenterParent[1], 2)) >
      Math.sqrt(Math.pow(boxCenter[0]-boxCenterParent[0], 2) + Math.pow(boxCenter[1]-boxCenterParent[1], 2))){
        var chromosomesLinks = d3.selectAll("path.BioCircosLINK")[0];
        for(let link of chromosomesLinks){
          link.style["opacity"]="1";
        }
      }
    });

    if(self.genomeTextDisplay == true){
        svg.append("g").selectAll("text")
            .data(chord.groups)
          .enter().append("text")
            .style("fill", self.genomeTextColor)
            .style("font-size", self.genomeTextSize)
	    .each( function(d,i) {
               d.angle = (d.startAngle + d.endAngle) / 2 - self.genomeTextDx;
               d.name = self.genomeLabel[i].split("_")[1];
            })
	    .attr("dy",self.genomeTextDy)
	    .attr("transform", function(d){
	       return "rotate(" + ( d.angle * 180 / Math.PI ) + ")" +
	       "translate(0,"+ -1.0*(outerRadius+10) +")" +
	       ( ( d.angle > Math.PI*2 && d.angle < Math.PI*0 ) ? "rotate(180)" : "");
	    })
	    .text(function(d){
	       return d.name;
	    });
    }
  //  if(self.trackTextDisplay == true){
/*
          svg.append("text")
           .attr("x", self.TEXTsettings.x)
           .attr("y", self.TEXTsettings.y)
           .style("opacity", self.TEXTsettings.textOpacity)
           .style("font-size", self.TEXTsettings.textSize)
           .style("font-weight", self.TEXTsettings.textWeight) //normal,bold,bolder,lighter,100,200,300,400,500,600,700,800,900
           .attr("fill", self.TEXTsettings.textColor)
           .attr("class", "dragText")
           .text(self.TEXTsettings.text);
      self.init_TEXTsettings();
  */
    //}
    if(self.ticksDisplay == true){

        function groupTicks(d) {
          var k = (d.endAngle - d.startAngle) / d.value;
          var Dvalue=d.value;

          return d3.range(self.ticksStart, self.ticksStart+d.value, self.ticksScale).map(function(v, i) {
            var lab = {
              angle: v * k +d.startAngle,
              label: v / self.ticksScale + "",
              k :k,
              endAng:d.endAngle
            };
            return lab
          });
        }
        var oldAngle =0;
        var ticks = svg.append("g").selectAll("g")
            .data(chord.groups)
          .enter().append("g").selectAll("g")
            .data(groupTicks)
          .enter().append("g")
            .attr("transform", function(d) {
              if(oldAngle==0 && self.ticksStart!=0  ){
                oldAngle = d.angle;
              }
              if((d.angle-oldAngle+self.ticksStartRest*d.k)>d.endAng)
                return "translate(" + (outerRadius +100) + ",0)";
              var str =  "rotate(" + ((d.angle-oldAngle+self.ticksStartRest*d.k) * 180 / Math.PI - 90) + ")"
                  + "translate(" + (outerRadius - 0) + ",0)";

              return str;
            });

        ticks.append("line")
            .attr("x1", 1)
            .attr("y1", 0)
            .attr("x2", self.ticksLength)
            .attr("y2", 0)
            .style("stroke", self.ticksColor);
        if(self.ticksDisplayText){
        ticks.append("text")
            .attr("x", 8)
            .attr("dy", ".35em")
            .style("font-size", self.ticksTextSize)
            .style("fill", self.ticksTextColor)
            .attr("transform", function(d) { return d.angle > Math.PI ? "rotate(180)translate(-16)" : null; })
            .style("text-anchor", function(d) { return d.angle > Math.PI ? "end" : null; })
            .text(function(d) { return d.label; });
          }

    }

    var drag = d3.behavior.drag()
              .on("drag", dragmove);

    function dragmove(d) {
        d3.select(this)
          .attr("x", d3.event.x )
          .attr("y", d3.event.y );
    }

    //var draglinklabel = d3.behavior.drag()
    //          .on("drag", draglinkmove);

    //function draglinkmove(d) {
    //    d3.select(this)
    //      .attr("x", d3.event.x )
    //      .attr("y", d3.event.y );
    //}

    if(self.BACKGROUND.length > 0){
        for(var backgroundi=0; backgroundi<self.BACKGROUND.length; backgroundi++){
            self.update_BACKGROUNDsettings(self.BACKGROUNDConfig[backgroundi]);

            svg.append("g").selectAll("path")
                .data(chord.groups)
              .enter().append("path")
                .style("fill", self.BACKGROUNDsettings.BgFillColor)
                .style("stroke", self.BACKGROUNDsettings.BgborderColor)
                .style("stroke-width", self.BACKGROUNDsettings.BgborderSize)
                .attr("d", d3.svg.arc().innerRadius(self.BACKGROUNDsettings.BginnerRadius).outerRadius(self.BACKGROUNDsettings.BgouterRadius));

            if(self.BACKGROUNDsettings.axisShow=="true"){
                for(i=1;i<=self.BACKGROUNDsettings.axisNum;i++){
                    svg.append("g").selectAll("path")
                        .data(chord.groups)
                      .enter().append("path")
                        .style("fill", "none")
                        .style("opacity",self.BACKGROUNDsettings.axisOpacity)
                        .style("stroke", self.BACKGROUNDsettings.axisColor)
                        .style("stroke-width", self.BACKGROUNDsettings.axisWidth)
                        .attr("d", d3.svg.arc().innerRadius(self.BACKGROUNDsettings.BginnerRadius+(self.BACKGROUNDsettings.BgouterRadius-self.BACKGROUNDsettings.BginnerRadius)/(self.BACKGROUNDsettings.axisNum+1)*i).outerRadius(self.BACKGROUNDsettings.BginnerRadius+(self.BACKGROUNDsettings.BgouterRadius-self.BACKGROUNDsettings.BginnerRadius)/(self.BACKGROUNDsettings.axisNum+1)*i+self.BACKGROUNDsettings.axisWidth));
                }
            }

            self.init_BACKGROUNDsettings();

        }
    }

    if(self.ARC.length > 0){
            function BioCircosArc(d) {
              return self.ARC[arci].map(function(v, i) {
                var arc_k = (d[self.initGenome[v.chr]].endAngle - d[self.initGenome[v.chr]].startAngle) / d[self.initGenome[v.chr]].value;
                return {
                  startAngle: v.start * arc_k + d[self.initGenome[v.chr]].startAngle,
                  endAngle: v.end * arc_k + d[self.initGenome[v.chr]].startAngle,
                  arc_chr: v.chr,
                  arc_start: v.start,
                  arc_end: v.end,
                  arc_color: v.color,
                  arc_des: v.des,
                  arc_logFC:v.logFC,
                  arc_startTooltip :v.startTooltip,
                  arc_endTooltip:v.endTooltip,
                  arc_click_label: "arc"+arci+"_"+i,
                };
              });
            }
        for(var arci=0; arci<self.ARC.length; arci++){
            self.update_ARCsettings(self.ARCConfig[arci]);

            var arc_objects = BioCircosArc(chord.groups())

            var arc = d3.svg.arc()
                  .innerRadius(innerRadius+self.ARCsettings.innerRadius)
                  .outerRadius(outerRadius+self.ARCsettings.outerRadius);

            svg.append("g")
                .attr("class", "BioCircosARC")
                .selectAll("path.BioCircosARC")
                  .data(arc_objects)
                  .enter()
                .append("path")
                .attr("class", "BioCircosARC")
                .attr("fill", function(d,i) { return d.arc_color; })
                .attr("d", function(d,i) { return arc(d,i); });
                if(self.settings.ARCMouseClickTextFromData=="first"){
                    svg.append("g")
                        .attr("class", "BioCircosARClabel")
                      .selectAll("text")
                        .data(arc_objects)
                        .enter().append("text")
                        .attr("class", "dragText")
                        .attr("id", function(d,i) { return "arc"+arci+"_"+i; })
                        .text(function(d) { return d.arc_chr; })
                        .attr("x", -1000)
                        .attr("y", -1000)
                        .style("opacity", 0)
                        .style("font-size", 1)
                        .attr("fill", self.ARCsettings.ARCFillColor);
                }
                if(self.settings.ARCMouseClickTextFromData=="second"){
                    svg.append("g")
                        .attr("class", "BioCircosARClabel")
                      .selectAll("text")
                        .data(arc_objects)
                        .enter().append("text")
                        .attr("class", "dragText")
                        .attr("id", function(d,i) { return "arc"+arci+"_"+i; })
                        .text(function(d) { return d.arc_start; })
                        .attr("x", -1000)
                        .attr("y", -1000)
                        .style("opacity", 0)
                        .style("font-size", 1)
                        .attr("fill", self.ARCsettings.ARCFillColor);
                }
                if(self.settings.ARCMouseClickTextFromData=="third"){
                    svg.append("g")
                        .attr("class", "BioCircosARClabel")
                      .selectAll("text")
                        .data(arc_objects)
                        .enter().append("text")
                        .attr("class", "dragText")
                        .attr("id", function(d,i) { return "arc"+arci+"_"+i; })
                        .text(function(d) { return d.arc_end; })
                        .attr("x", -1000)
                        .attr("y", -1000)
                        .style("opacity", 0)
                        .style("font-size", 1)
                        .attr("fill", self.ARCsettings.ARCFillColor);
                }
                if(self.settings.ARCMouseClickTextFromData=="fifth"){
                    svg.append("g")
                        .attr("class", "BioCircosARClabel")
                      .selectAll("text")
                        .data(arc_objects)
                        .enter().append("text")
                        .attr("class", "dragText")
                        .attr("id", function(d,i) { return "arc"+arci+"_"+i; })
                        .text(function(d) { return d.arc_des; })
                        .attr("x", -1000)
                        .attr("y", -1000)
                        .style("opacity", 0)
                        .style("font-size", 1)
                        .attr("fill", self.ARCsettings.ARCFillColor);
                }

            self.init_ARCsettings();

        }

        if(self.settings.ARCMouseEvent==true){


            var ARCMouseOnTooltip = d3.select("body")
                .append("div")
                .attr("class","BioCircosARCTooltip")
                .attr("id","BioCircosARCTooltip")
                .style("visibility","hidden");

            var ARCMouseOn = svg.selectAll("path.BioCircosARC");
            if(self.settings.ARCMouseOverDisplay==true){
                   ARCMouseOn.on("mouseover",function(d){
                       ARCMouseOnTooltip.html(self.settings.ARCMouseOverTooltipsHtml01+d.arc_chr+self.settings.ARCMouseOverTooltipsHtml02+d.arc_startTooltip+self.settings.ARCMouseOverTooltipsHtml03+d.arc_endTooltip+self.settings.ARCMouseOverTooltipsHtml04+d.arc_des+self.settings.ARCMouseOverTooltipsHtml05+d.arc_logFC)
                              .style("left", (d3.event.pageX) + "px")
                              .style("top", (d3.event.pageY + 20) + "px")
                              .style("position", self.settings.ARCMouseOverTooltipsPosition)
                              .style("background-color", self.settings.ARCMouseOverTooltipsBackgroundColor)
                              .style("border-style", self.settings.ARCMouseOverTooltipsBorderStyle)
                              .style("border-width", self.settings.ARCMouseOverTooltipsBorderWidth)
                              .style("padding", self.settings.ARCMouseOverTooltipsPadding)
                              .style("border-radius", self.settings.ARCMouseOverTooltipsBorderRadius)
                              .style("visibility","visible")
                              .style("color", "#1765a3")
                              .style("font-size", "18px")
                              .style("z-index", "1000")
                              .style("font-family",  "Arial")
                              .style("font-weight", "bold")
                           d3.select(this)
                              .style("fill",  function(d,i) { if(self.settings.ARCMouseOverColor=="none"){return "";}else{return self.settings.ARCMouseOverColor;} })
                              .style("opacity",  function(d,i) { if(self.settings.ARCMouseOverArcOpacity=="none"){return "";}else{return self.settings.ARCMouseOverArcOpacity;} })
                              .style("stroke", function(d,i) { if(self.settings.ARCMouseOverArcStrokeColor=="none"){return "";}else{return self.settings.ARCMouseOverArcStrokeColor;} })
                              .style("stroke-width", function(d,i) { if(self.settings.ARCMouseOverArcStrokeWidth=="none"){return "";}else{return self.settings.ARCMouseOverArcStrokeWidth;} });
                   })
            }
            if(self.settings.ARCMouseClickDisplay==true){
                   ARCMouseOn.on("click",function(d){
                       d3.select(this)
                           .style("fill",  function(d,i) { if(self.settings.ARCMouseClickColor=="none"){return "";}else{return self.settings.ARCMouseClickColor;} })
                           .style("opacity",  function(d,i) { if(self.settings.ARCMouseClickArcOpacity=="none"){return "";}else{return self.settings.ARCMouseClickArcOpacity;} })
                           .style("stroke", function(d,i) { if(self.settings.ARCMouseClickArcStrokeColor=="none"){return "";}else{return self.settings.ARCMouseClickArcStrokeColor;} })
                           .style("stroke-width", function(d,i) { if(self.settings.ARCMouseClickArcStrokeWidth=="none"){return "";}else{return self.settings.ARCMouseClickArcStrokeWidth;} });
                       d3.select("#"+d.arc_click_label)
                           .style("opacity", self.settings.ARCMouseClickTextOpacity)
                           .style("fill", self.settings.ARCMouseClickTextColor)
                           .style("font-size", self.settings.ARCMouseClickTextSize)
                           .attr("x", d3.event.x - self.svgWidth/2 + self.settings.ARCMouseClickTextPostionX)
                           .attr("y", d3.event.y - self.svgHeight/2 + self.settings.ARCMouseClickTextPostionY);
                   })
            }

            if(self.settings.ARCMouseClickTextDrag==true){
                svg.selectAll("text.dragText").call(drag);
            }

            if(self.settings.ARCMouseDownDisplay==true){
                   ARCMouseOn.on("mousedown",function(d){
                      d3.select(this)
                          .style("fill",  function(d,i) { if(self.settings.ARCMouseDownColor=="none"){return "";}else{return self.settings.ARCMouseDownColor;} })
                          .style("opacity",  function(d,i) { if(self.settings.ARCMouseDownArcOpacity=="none"){return "";}else{return self.settings.ARCMouseDownArcOpacity;} })
                          .style("stroke", function(d,i) { if(self.settings.ARCMouseDownArcStrokeColor=="none"){return "";}else{return self.settings.ARCMouseDownArcStrokeColor;} })
                          .style("stroke-width", function(d,i) { if(self.settings.ARCMouseDownArcStrokeWidth=="none"){return "";}else{return self.settings.ARCMouseDownArcStrokeWidth;} });
                  })
            }

            if(self.settings.ARCMouseEnterDisplay==true){
                  ARCMouseOn.on("mouseenter",function(d){
                     ARCMouseOnTooltip.style("visibility", "visible");
                      d3.select(this)
                          .style("fill", function(d,i) { if(self.settings.ARCMouseEnterColor=="none"){return "";}else{return self.settings.ARCMouseEnterColor;} })
                          .style("opacity", function(d,i) { if(self.settings.ARCMouseEnterArcOpacity=="none"){return "";}else{return self.settings.ARCMouseEnterArcOpacity;} })
                          .style("stroke", function(d,i) { if(self.settings.ARCMouseEnterArcStrokeColor=="none"){return "";}else{return self.settings.ARCMouseEnterArcStrokeColor;} })
                          .style("stroke-width", function(d,i) { if(self.settings.ARCMouseEnterArcStrokeWidth=="none"){return "";}else{return self.settings.ARCMouseEnterArcStrokeWidth;} });
                  })
            }

            if(self.settings.ARCMouseLeaveDisplay==true){
                  ARCMouseOn.on("mouseleave",function(d){
                      ARCMouseOnTooltip.style("visibility", "hidden");
                      d3.select(this)
                          .style("fill",  function(d,i) { if(self.settings.ARCMouseLeaveColor=="none"){return "";}else{return self.settings.ARCMouseLeaveColor;} })
                          .style("opacity",  function(d,i) { if(self.settings.ARCMouseLeaveArcOpacity=="none"){return "";}else{return self.settings.ARCMouseLeaveArcOpacity;} })
                          .style("stroke", function(d,i) { if(self.settings.ARCMouseLeaveArcStrokeColor=="none"){return "";}else{return self.settings.ARCMouseLeaveArcStrokeColor;} })
                          .style("stroke-width", function(d,i) { if(self.settings.ARCMouseLeaveArcStrokeWidth=="none"){return "";}else{return self.settings.ARCMouseLeaveArcStrokeWidth;} });
                  })
            }

            if(self.settings.ARCMouseUpDisplay==true){
                   ARCMouseOn.on("mouseup",function(d){
                       d3.select(this)
                          .style("fill",  function(d,i) { if(self.settings.ARCMouseUpColor=="none"){return "";}else{return self.settings.ARCMouseUpColor;} })
                          .style("opacity",  function(d,i) { if(self.settings.ARCMouseUpArcOpacity=="none"){return "";}else{return self.settings.ARCMouseUpArcOpacity;} })
                          .style("stroke", function(d,i) { if(self.settings.ARCMouseUpArcStrokeColor=="none"){return "";}else{return self.settings.ARCMouseUpArcStrokeColor;} })
                          .style("stroke-width", function(d,i) { if(self.settings.ARCMouseUpArcStrokeWidth=="none"){return "";}else{return self.settings.ARCMouseUpArcStrokeWidth;} });
                   })
            }

            if(self.settings.ARCMouseMoveDisplay==true){
                   ARCMouseOn.on("mousemove",function(d){
                       d3.select(this)
                          .style("fill",  function(d,i) { if(self.settings.ARCMouseMoveColor=="none"){return "";}else{return self.settings.ARCMouseMoveColor;} })
                          .style("opacity",  function(d,i) { if(self.settings.ARCMouseMoveArcOpacity=="none"){return "";}else{return self.settings.ARCMouseMoveArcOpacity;} })
                          .style("stroke", function(d,i) { if(self.settings.ARCMouseMoveArcStrokeColor=="none"){return "";}else{return self.settings.ARCMouseMoveArcStrokeColor;} })
                          .style("stroke-width", function(d,i) { if(self.settings.ARCMouseMoveArcStrokeWidth=="none"){return "";}else{return self.settings.ARCMouseMoveArcStrokeWidth;} });
                       ARCMouseOnTooltip.style("left", (d3.event.pageX) + "px")
                       .style("top", (d3.event.pageY + 20) + "px");
                   })
            }

            if(self.settings.ARCMouseOutDisplay==true){
                   ARCMouseOn.on("mouseout",function(d){
                       ARCMouseOnTooltip.style("visibility", "hidden");
                       d3.select(this)
                           .transition()
                           .duration(self.settings.ARCMouseOutAnimationTime)
                          .style("fill",  function(d,i) { if(self.settings.ARCMouseOutColor=="none"){return "";}else{return self.settings.ARCMouseOutColor;} })
                          .style("opacity",  function(d,i) { if(self.settings.ARCMouseOutArcOpacity=="none"){return "";}else{return self.settings.ARCMouseOutArcOpacity;} })
                          .style("stroke", function(d,i) { if(self.settings.ARCMouseOutArcStrokeColor=="none"){return "";}else{return self.settings.ARCMouseOutArcStrokeColor;} })
                          .style("stroke-width", function(d,i) { if(self.settings.ARCMouseOutArcStrokeWidth=="none"){return "";}else{return self.settings.ARCMouseOutArcStrokeWidth;} });
                   });
            }
        }

    }

    if(self.HISTOGRAM.length > 0){
            function BioCircosHISTOGRAM(d) {

              return self.HISTOGRAM[histogrami].list.map(function(v, i) {
                var histogram_k = (d[self.initGenome[v.chr]].endAngle - d[self.initGenome[v.chr]].startAngle) / d[self.initGenome[v.chr]].value;
                return {
                  startAngle: v.start * histogram_k + d[self.initGenome[v.chr]].startAngle,
                  endAngle: v.end * histogram_k + d[self.initGenome[v.chr]].startAngle,
                  histogram_chr: v.chr,
                  histogram_start: v.start,
                  histogram_end: v.end,
                  histogram_name: v.name,
                  histogram_startTooltip: v.startTooltip,
                  histogram_endTooltip : v.endTooltip,
                  histogram_value: v.value,
                };
              });
            }
        for(var histogrami=0; histogrami<self.HISTOGRAM.length; histogrami++){
            self.update_HISTOGRAMsettings(self.HISTOGRAMConfig[histogrami]);

            var histogram_objects = BioCircosHISTOGRAM(chord.groups())

            svg.append("g")
                .attr("class", "BioCircosHISTOGRAM")
                .selectAll("path.BioCircosHISTOGRAM")
                  .data(histogram_objects)
                  .enter()
                .append("path")
                .attr("class", "BioCircosHISTOGRAM")
                .attr("fill", self.HISTOGRAMsettings.histogramFillColor)
                .attr("d", d3.svg.arc().innerRadius(self.HISTOGRAMsettings.minRadius).outerRadius(function(d) {return self.HISTOGRAMsettings.minRadius + ((d.histogram_value-self.histogram_value_maxmin(self.HISTOGRAM[histogrami])[1])*(self.HISTOGRAMsettings.maxRadius-self.HISTOGRAMsettings.minRadius)/(self.histogram_value_maxmin(self.HISTOGRAM[histogrami])[0]-self.histogram_value_maxmin(self.HISTOGRAM[histogrami])[1]));}));
            self.init_HISTOGRAMsettings();

        }

        if(self.settings.HISTOGRAMMouseEvent==true){
            var HISTOGRAMMouseOnTooltip = d3.select("body")
                .append("div")
                .attr("class","BioCircosHISTOGRAMTooltip")
                .attr("id","BioCircosHISTOGRAMTooltip")
                .style("visibility","hidden");

            var HISTOGRAMMouseOn = svg.selectAll("path.BioCircosHISTOGRAM");

            if(self.settings.HISTOGRAMMouseOverDisplay==true){
                HISTOGRAMMouseOn.on("mouseover",function(d){
                      HISTOGRAMMouseOnTooltip.html(self.settings.HISTOGRAMMouseOverTooltipsHtml01+d.histogram_chr+self.settings.HISTOGRAMMouseOverTooltipsHtml02+d.histogram_startTooltip+self.settings.HISTOGRAMMouseOverTooltipsHtml03+d.histogram_endTooltip+self.settings.HISTOGRAMMouseOverTooltipsHtml05+d.histogram_value+self.settings.HISTOGRAMMouseOverTooltipsHtml04+d.histogram_name+self.settings.HISTOGRAMMouseOverTooltipsHtml06)
                       .style("left", (d3.event.pageX) + "px")
                       .style("top", (d3.event.pageY + 20) + "px")
                       .style("position", self.settings.HISTOGRAMMouseOverTooltipsPosition)
                       .style("background-color", self.settings.HISTOGRAMMouseOverTooltipsBackgroundColor)
                       .style("border-style", self.settings.HISTOGRAMMouseOverTooltipsBorderStyle)
                       .style("border-width", self.settings.HISTOGRAMMouseOverTooltipsBorderWidth)
                       .style("padding", self.settings.HISTOGRAMMouseOverTooltipsPadding)
                       .style("border-radius", self.settings.HISTOGRAMMouseOverTooltipsBorderRadius)
                       .style("visibility","visible")
                       .style("color", "#1765a3")
                       .style("font-size", "18px")
                       .style("z-index", 1000)
                       .style("font-family",  "Arial")
                       .style("font-weight", "bold")
                    d3.select(this)
                       .style("fill",  function(d,i) { if(self.settings.HISTOGRAMMouseOverColor=="none"){return "";}else{return self.settings.HISTOGRAMMouseOverColor;} })
                       .style("opacity",  function(d,i) { if(self.settings.HISTOGRAMMouseOverOpacity=="none"){return "";}else{return self.settings.HISTOGRAMMouseOverOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.HISTOGRAMMouseOverStrokeColor=="none"){return "";}else{return self.settings.HISTOGRAMMouseOverStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.HISTOGRAMMouseOverStrokeWidth=="none"){return "";}else{return self.settings.HISTOGRAMMouseOverStrokeWidth;} });
                })
            }
            if(self.settings.HISTOGRAMMouseClickDisplay==true){
                HISTOGRAMMouseOn.on("click",function(d){
                    d3.select(this)
                       .style("fill",  function(d,i) { if(self.settings.HISTOGRAMMouseClickColor=="none"){return "";}else{return self.settings.HISTOGRAMMouseClickColor;} })
                       .style("opacity",  function(d,i) { if(self.settings.HISTOGRAMMouseClickOpacity=="none"){return "";}else{return self.settings.HISTOGRAMMouseClickOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.HISTOGRAMMouseClickStrokeColor=="none"){return "";}else{return self.settings.HISTOGRAMMouseClickStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.HISTOGRAMMouseClickStrokeWidth=="none"){return "";}else{return self.settings.HISTOGRAMMouseClickStrokeWidth;} });
                })
            }
            if(self.settings.HISTOGRAMMouseDownDisplay==true){
               HISTOGRAMMouseOn.on("mousedown",function(d){
                   d3.select(this)
                       .style("fill",  function(d,i) { if(self.settings.HISTOGRAMMouseDownColor=="none"){return "";}else{return self.settings.HISTOGRAMMouseDownColor;} })
                       .style("opacity",  function(d,i) { if(self.settings.HISTOGRAMMouseDownOpacity=="none"){return "";}else{return self.settings.HISTOGRAMMouseDownOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.HISTOGRAMMouseDownStrokeColor=="none"){return "";}else{return self.settings.HISTOGRAMMouseDownStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.HISTOGRAMMouseDownStrokeWidth=="none"){return "";}else{return self.settings.HISTOGRAMMouseDownStrokeWidth;} });
               })
            }
            if(self.settings.HISTOGRAMMouseEnterDisplay==true){
               HISTOGRAMMouseOn.on("mouseenter",function(d){
                 HISTOGRAMMouseOnTooltip.style("visibility", "visible");
                   d3.select(this)
                       .style("fill",  function(d,i) { if(self.settings.HISTOGRAMMouseEnterColor=="none"){return "";}else{return self.settings.HISTOGRAMMouseEnterColor;} })
                       .style("opacity",  function(d,i) { if(self.settings.HISTOGRAMMouseEnterOpacity=="none"){return "";}else{return self.settings.HISTOGRAMMouseEnterOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.HISTOGRAMMouseEnterStrokeColor=="none"){return "";}else{return self.settings.HISTOGRAMMouseEnterStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.HISTOGRAMMouseEnterStrokeWidth=="none"){return "";}else{return self.settings.HISTOGRAMMouseEnterStrokeWidth;} });
               })
            }
            if(self.settings.HISTOGRAMMouseLeaveDisplay==true){
              HISTOGRAMMouseOn.on("mouseleave",function(d){
                  HISTOGRAMMouseOnTooltip.style("visibility", "hidden");
                  d3.select(this)
                      .style("fill",  function(d,i) { if(self.settings.HISTOGRAMMouseLeaveColor=="none"){return "";}else{return self.settings.HISTOGRAMMouseLeaveColor;} })
                      .style("opacity",  function(d,i) { if(self.settings.HISTOGRAMMouseLeaveOpacity=="none"){return "";}else{return self.settings.HISTOGRAMMouseLeaveOpacity;} })
                      .style("stroke", function(d,i) { if(self.settings.HISTOGRAMMouseLeaveStrokeColor=="none"){return "";}else{return self.settings.HISTOGRAMMouseLeaveStrokeColor;} })
                      .style("stroke-width", function(d,i) { if(self.settings.HISTOGRAMMouseLeaveStrokeWidth=="none"){return "";}else{return self.settings.HISTOGRAMMouseLeaveStrokeWidth;} });
              })
            }
            if(self.settings.HISTOGRAMMouseUpDisplay==true){
               HISTOGRAMMouseOn.on("mouseup",function(d){
                   d3.select(this)
                       .style("fill",  function(d,i) { if(self.settings.HISTOGRAMMouseUpColor=="none"){return "";}else{return self.settings.HISTOGRAMMouseUpColor;} })
                       .style("opacity",  function(d,i) { if(self.settings.HISTOGRAMMouseUpOpacity=="none"){return "";}else{return self.settings.HISTOGRAMMouseUpOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.HISTOGRAMMouseUpStrokeColor=="none"){return "";}else{return self.settings.HISTOGRAMMouseUpStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.HISTOGRAMMouseUpStrokeWidth=="none"){return "";}else{return self.settings.HISTOGRAMMouseUpStrokeWidth;} });
               })
            }
            if(self.settings.HISTOGRAMMouseMoveDisplay==true){
               HISTOGRAMMouseOn.on("mousemove",function(d){
                   d3.select(this)
                       .style("fill",  function(d,i) { if(self.settings.HISTOGRAMMouseMoveColor=="none"){return "";}else{return self.settings.HISTOGRAMMouseMoveColor;} })
                       .style("opacity",  function(d,i) { if(self.settings.HISTOGRAMMouseMoveOpacity=="none"){return "";}else{return self.settings.HISTOGRAMMouseMoveOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.HISTOGRAMMouseMoveStrokeColor=="none"){return "";}else{return self.settings.HISTOGRAMMouseMoveStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.HISTOGRAMMouseMoveStrokeWidth=="none"){return "";}else{return self.settings.HISTOGRAMMouseMoveStrokeWidth;} });
                   HISTOGRAMMouseOnTooltip.style("left", (d3.event.pageX) + "px")
                   .style("top", (d3.event.pageY + 20) + "px");
               })
            }
            if(self.settings.HISTOGRAMMouseOutDisplay==true){
               HISTOGRAMMouseOn.on("mouseout",function(d){
                   HISTOGRAMMouseOnTooltip.style("visibility", "hidden");
                   d3.select(this)
                       .transition()
                       .duration(self.settings.HISTOGRAMMouseOutAnimationTime)
                       .style("fill",  function(d,i) { if(self.settings.HISTOGRAMMouseOutColor=="none"){return "";}else{return self.settings.HISTOGRAMMouseOutColor;} })
                       .style("opacity",  function(d,i) { if(self.settings.HISTOGRAMMouseOutOpacity=="none"){return "";}else{return self.settings.HISTOGRAMMouseOutOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.HISTOGRAMMouseOutStrokeColor=="none"){return "";}else{return self.settings.HISTOGRAMMouseOutStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.HISTOGRAMMouseOutStrokeWidth=="none"){return "";}else{return self.settings.HISTOGRAMMouseOutStrokeWidth;} });
               });
            }

        }

    }

    if(self.LINE.length > 0){
            function BioCircosLINE(d) {
              return self.LINE[linei].list.map(function(v, i) {
                var line_k = (d[self.initGenome[v.chr]].endAngle - d[self.initGenome[v.chr]].startAngle) / d[self.initGenome[v.chr]].value;
                return {
                  line_angle: v.pos * line_k + d[self.initGenome[v.chr]].startAngle,
                  line_chr: v.chr,
                  line_pos: v.pos,
                  line_des: v.des,
                  line_value: v.value,
                  line_color: self.LINEsettings.LineColor,
                  line_width: self.LINEsettings.LineWidth,
                  x: (0 + Math.sin(v.pos * line_k + d[self.initGenome[v.chr]].startAngle) * ((self.LINEsettings.minRadius + ( (v.value-self.line_value_maxmin(self.LINE[linei])[1])/(self.line_value_maxmin(self.LINE[linei])[0]-self.line_value_maxmin(self.LINE[linei])[1])*(self.LINEsettings.maxRadius-self.LINEsettings.minRadius) )))),
                  y: (0 - Math.cos(v.pos * line_k + d[self.initGenome[v.chr]].startAngle) * ((self.LINEsettings.minRadius + ( (v.value-self.line_value_maxmin(self.LINE[linei])[1])/(self.line_value_maxmin(self.LINE[linei])[0]-self.line_value_maxmin(self.LINE[linei])[1])*(self.LINEsettings.maxRadius-self.LINEsettings.minRadius) ))))
                };
              });
            }
        for(var linei=0; linei<self.LINE.length; linei++){
            self.update_LINEsettings(self.LINEConfig[linei]);

            var line_objects = BioCircosLINE(chord.groups())

            for(var chri=0; chri<self.genomeLabel.length; chri++){
                var line_objects_a_chr = line_objects.filter(function(element,pos){return element.line_chr==self.genomeLabel[chri]})
                if(line_objects_a_chr.length != 0){
                    svg.append("g")
                        .attr("class", "BioCircosLINE")
                        .append("path")
                          .datum(line_objects_a_chr)
                        .attr("class", "BioCircosLINE")
                        .attr("fill", "none")
                        .attr("stroke",self.LINEsettings.LineColor)
                        .attr("stroke-width",self.LINEsettings.LineWidth)
                        .attr("d",  d3.svg.line()
                            .x(function(d) { return d.x; })
                            .y(function(d) { return d.y; })
                        );
                }
            }
            self.init_LINEsettings();

        }

        if(self.settings.LINEMouseEvent==true){
            var LINEMouseOnTooltip = d3.select("body")
                .append("div")
                .attr("class","BioCircosLINETooltip")
                .attr("id","BioCircosLINETooltip")
                .style("visibility","hidden");

            var LINEMouseOn = svg.selectAll("path.BioCircosLINE");

            if(self.settings.LINEMouseOverDisplay==true){
                LINEMouseOn.on("mouseover",function(d){
                      LINEMouseOnTooltip.html(self.settings.LINEMouseOverTooltipsHtml01)
                       .style("left", (d3.event.pageX) + "px")
                       .style("top", (d3.event.pageY + 20) + "px")
                       .style("position", self.settings.LINEMouseOverTooltipsPosition)
                       .style("background-color", self.settings.LINEMouseOverTooltipsBackgroundColor)
                       .style("border-style", self.settings.LINEMouseOverTooltipsBorderStyle)
                       .style("border-width", self.settings.LINEMouseOverTooltipsBorderWidth)
                       .style("padding", self.settings.LINEMouseOverTooltipsPadding)
                       .style("border-radius", self.settings.LINEMouseOverTooltipsBorderRadius)
                       .style("visibility","visible")
                    d3.select(this)
                       .style("opacity",  function(d,i) { if(self.settings.LINEMouseOverLineOpacity=="none"){return "";}else{return self.settings.LINEMouseOverLineOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.LINEMouseOverLineStrokeColor=="none"){return "";}else{return self.settings.LINEMouseOverLineStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.LINEMouseOverLineStrokeWidth=="none"){return "";}else{return self.settings.LINEMouseOverLineStrokeWidth;} });
                })
            }
            if(self.settings.LINEMouseClickDisplay==true){
                LINEMouseOn.on("click",function(d){
                    d3.select(this)
                       .style("opacity",  function(d,i) { if(self.settings.LINEMouseClickLineOpacity=="none"){return "";}else{return self.settings.LINEMouseClickLineOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.LINEMouseClickLineStrokeColor=="none"){return "";}else{return self.settings.LINEMouseClickLineStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.LINEMouseClickLineStrokeWidth=="none"){return "";}else{return self.settings.LINEMouseClickLineStrokeWidth;} });
                })
            }
            if(self.settings.LINEMouseDownDisplay==true){
               LINEMouseOn.on("mousedown",function(d){
                   d3.select(this)
                       .style("opacity",  function(d,i) { if(self.settings.LINEMouseDownLineOpacity=="none"){return "";}else{return self.settings.LINEMouseDownLineOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.LINEMouseDownLineStrokeColor=="none"){return "";}else{return self.settings.LINEMouseDownLineStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.LINEMouseDownLineStrokeWidth=="none"){return "";}else{return self.settings.LINEMouseDownLineStrokeWidth;} });
               })
            }
            if(self.settings.LINEMouseEnterDisplay==true){
               LINEMouseOn.on("mouseenter",function(d){
                   d3.select(this)
                       .style("opacity",  function(d,i) { if(self.settings.LINEMouseEnterLineOpacity=="none"){return "";}else{return self.settings.LINEMouseEnterLineOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.LINEMouseEnterLineStrokeColor=="none"){return "";}else{return self.settings.LINEMouseEnterLineStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.LINEMouseEnterLineStrokeWidth=="none"){return "";}else{return self.settings.LINEMouseEnterLineStrokeWidth;} });
               })
            }
            if(self.settings.LINEMouseLeaveDisplay==true){
               LINEMouseOn.on("mouseleave",function(d){
                   LINEMouseOnTooltip.style("opacity",0.0);
                   d3.select(this)
                       .style("opacity",  function(d,i) { if(self.settings.LINEMouseLeaveLineOpacity=="none"){return "";}else{return self.settings.LINEMouseLeaveLineOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.LINEMouseLeaveLineStrokeColor=="none"){return "";}else{return self.settings.LINEMouseLeaveLineStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.LINEMouseLeaveLineStrokeWidth=="none"){return "";}else{return self.settings.LINEMouseLeaveLineStrokeWidth;} });
               })
            }
            if(self.settings.LINEMouseUpDisplay==true){
               LINEMouseOn.on("mouseup",function(d){
                   d3.select(this)
                       .style("opacity",  function(d,i) { if(self.settings.LINEMouseUpLineOpacity=="none"){return "";}else{return self.settings.LINEMouseUpLineOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.LINEMouseUpLineStrokeColor=="none"){return "";}else{return self.settings.LINEMouseUpLineStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.LINEMouseUpLineStrokeWidth=="none"){return "";}else{return self.settings.LINEMouseUpLineStrokeWidth;} });
               })
            }
            if(self.settings.LINEMouseMoveDisplay==true){
               LINEMouseOn.on("mousemove",function(d){
                   d3.select(this)
                       .style("opacity",  function(d,i) { if(self.settings.LINEMouseMoveLineOpacity=="none"){return "";}else{return self.settings.LINEMouseMoveLineOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.LINEMouseMoveLineStrokeColor=="none"){return "";}else{return self.settings.LINEMouseMoveLineStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.LINEMouseMoveLineStrokeWidth=="none"){return "";}else{return self.settings.LINEMouseMoveLineStrokeWidth;} });
                   LINEMouseOnTooltip.style("left", (d3.event.pageX) + "px")
                   .style("top", (d3.event.pageY + 20) + "px");
               })
            }
            if(self.settings.LINEMouseOutDisplay==true){
               LINEMouseOn.on("mouseout",function(d){
                   LINEMouseOnTooltip.style("opacity",0.0);
                   d3.select(this)
                       .transition()
                       .duration(self.settings.LINEMouseOutAnimationTime)
                       .style("opacity",  function(d,i) { if(self.settings.LINEMouseOutLineOpacity=="none"){return "";}else{return self.settings.LINEMouseOutLineOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.LINEMouseOutLineStrokeColor=="none"){return "";}else{return self.settings.LINEMouseOutLineStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.LINEMouseOutLineStrokeWidth=="none"){return "";}else{return self.settings.LINEMouseOutLineStrokeWidth;} });
               });
            }

        }

    }

    if(self.TEXT.length > 0){
        for(var texti=0; texti<self.TEXT.length; texti++){
            self.update_TEXTsettings(self.TEXTConfig[texti]);
                svg.append("text")
                 .attr("x", self.TEXTsettings.x)
                 .attr("y", self.TEXTsettings.y)
                 .style("opacity", self.TEXTsettings.textOpacity)
                 .style("font-size", self.TEXTsettings.textSize)
                 .style("font-weight", self.TEXTsettings.textWeight) //normal,bold,bolder,lighter,100,200,300,400,500,600,700,800,900
                 .attr("fill", self.TEXTsettings.textColor)
                 .attr("class", "dragText")
                 .text(self.TEXTsettings.text);
            self.init_TEXTsettings();
        }
        if(self.settings.TEXTModuleDragEvent==true){
            svg.selectAll("text.dragText").call(drag);
        }

    }

    if(self.CNV.length > 0){
            function BioCircosCnv(d) {
              return self.CNV[cnvi].map(function(v, i) {
                var cnv_k = (d[self.initGenome[v.chr]].endAngle - d[self.initGenome[v.chr]].startAngle) / d[self.initGenome[v.chr]].value;
                return {
                  startAngle: v.start * cnv_k + d[self.initGenome[v.chr]].startAngle,
                  endAngle: v.end * cnv_k + d[self.initGenome[v.chr]].startAngle,
                  cnv_chr: v.chr,
                  cnv_start: v.start,
                  cnv_end: v.end,
                  cnv_val: v.value,
                  cnv_click_label: "cnv"+cnvi+"_"+i,
                  cnv_deviation: (v.value-self.cnv_value_maxmin(self.CNV[cnvi])[1])/(self.cnv_value_maxmin(self.CNV[cnvi])[0]-self.cnv_value_maxmin(self.CNV[cnvi])[1])*(self.CNVsettings.maxRadius-self.CNVsettings.minRadius)

                };
              });
            }
        for(var cnvi=0; cnvi<self.CNV.length; cnvi++){
            self.update_CNVsettings(self.CNVConfig[cnvi]);

            var cnv_objects = BioCircosCnv(chord.groups())

            svg.append("g")
                .attr("class", "BioCircosCNV")
                .selectAll("path.BioCircosCNV")
                  .data(cnv_objects)
                  .enter()
                .append("path")
                .attr("class", "BioCircosCNV")
                .attr("transform", function(d) {
                  return "rotate(0)"
                      + "translate(0,0)";
                })
                .attr("fill", function(d,i) { return self.CNVsettings.CNVColor; })
                .attr("d", function(d,i) { var cnv = d3.svg.arc().innerRadius(self.CNVsettings.minRadius+d.cnv_deviation).outerRadius(self.CNVsettings.minRadius+self.CNVsettings.CNVwidth+d.cnv_deviation); return cnv(d,i); });
                if(self.settings.CNVMouseClickTextFromData=="first"){
                    svg.append("g")
                        .attr("class", "BioCircosCNVlabel")
                      .selectAll("text")
                        .data(cnv_objects)
                        .enter().append("text")
                        .attr("class", "dragText")
                        .attr("id", function(d,i) { return "cnv"+cnvi+"_"+i; })
                        .text(function(d) { return d.cnv_chr; })
                        .attr("x", 0)
                        .attr("y", 0)
                        .style("opacity", 0)
                        .style("font-size", 1)
                        .attr("fill", self.CNVsettings.CNVFillColor);
                }
                if(self.settings.CNVMouseClickTextFromData=="second"){
                    svg.append("g")
                        .attr("class", "BioCircosCNVlabel")
                      .selectAll("text")
                        .data(cnv_objects)
                        .enter().append("text")
                        .attr("class", "dragText")
                        .attr("id", function(d,i) { return "cnv"+cnvi+"_"+i; })
                        .text(function(d) { return d.cnv_start; })
                        .attr("x", 0)
                        .attr("y", 0)
                        .style("opacity", 0)
                        .style("font-size", 1)
                        .attr("fill", self.CNVsettings.CNVFillColor);
                }
                if(self.settings.CNVMouseClickTextFromData=="third"){
                    svg.append("g")
                        .attr("class", "BioCircosCNVlabel")
                      .selectAll("text")
                        .data(cnv_objects)
                        .enter().append("text")
                        .attr("class", "dragText")
                        .attr("id", function(d,i) { return "cnv"+cnvi+"_"+i; })
                        .text(function(d) { return d.cnv_end; })
                        .attr("x", 0)
                        .attr("y", 0)
                        .style("opacity", 0)
                        .style("font-size", 1)
                        .attr("fill", self.CNVsettings.CNVFillColor);
                }
                if(self.settings.CNVMouseClickTextFromData=="fourth"){
                    svg.append("g")
                        .attr("class", "BioCircosCNVlabel")
                      .selectAll("text")
                        .data(cnv_objects)
                        .enter().append("text")
                        .attr("class", "dragText")
                        .attr("id", function(d,i) { return "cnv"+cnvi+"_"+i; })
                        .text(function(d) { return d.cnv_val; })
                        .attr("x", 0)
                        .attr("y", 0)
                        .style("opacity", 0)
                        .style("font-size", 1)
                        .attr("fill", self.CNVsettings.CNVFillColor);
                }

            self.init_CNVsettings();

        }

        if(self.settings.CNVMouseEvent==true){
            var CNVMouseOnTooltip = d3.select("body")
                .append("div")
                .attr("class","BioCircosCNVTooltip")
                .attr("id","BioCircosCNVTooltip")
                .style("visibility","hidden");

            var CNVMouseOn = svg.selectAll("path.BioCircosCNV");

            if(self.settings.CNVMouseOverDisplay==true){
                CNVMouseOn.on("mouseover",function(d){
                      CNVMouseOnTooltip.html(self.settings.CNVMouseOverTooltipsHtml01+d.cnv_chr+self.settings.CNVMouseOverTooltipsHtml02+d.cnv_start+self.settings.CNVMouseOverTooltipsHtml03+d.cnv_end+self.settings.CNVMouseOverTooltipsHtml04+d.cnv_val+self.settings.CNVMouseOverTooltipsHtml05)
                       .style("left", (d3.event.pageX) + "px")
                       .style("top", (d3.event.pageY + 20) + "px")
                       .style("position", self.settings.CNVMouseOverTooltipsPosition)
                       .style("background-color", self.settings.CNVMouseOverTooltipsBackgroundColor)
                       .style("border-style", self.settings.CNVMouseOverTooltipsBorderStyle)
                       .style("border-width", self.settings.CNVMouseOverTooltipsBorderWidth)
                       .style("padding", self.settings.CNVMouseOverTooltipsPadding)
                       .style("border-radius", self.settings.CNVMouseOverTooltipsBorderRadius)
                       .style("visibility","visible")
                    d3.select(this)
                       .style("fill",  function(d,i) { if(self.settings.CNVMouseOverColor=="none"){return "";}else{return self.settings.CNVMouseOverColor;} })
                       .style("opacity",  function(d,i) { if(self.settings.CNVMouseOverArcOpacity=="none"){return "";}else{return self.settings.CNVMouseOverArcOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.CNVMouseOverArcStrokeColor=="none"){return "";}else{return self.settings.CNVMouseOverArcStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.CNVMouseOverArcStrokeWidth=="none"){return "";}else{return self.settings.CNVMouseOverArcStrokeWidth;} });
                })
            }

            if(self.settings.CNVMouseClickDisplay==true){
                CNVMouseOn.on("click",function(d){
                    d3.select(this)
                       .style("fill",  function(d,i) { if(self.settings.CNVMouseClickColor=="none"){return "";}else{return self.settings.CNVMouseClickColor;} })
                       .style("opacity",  function(d,i) { if(self.settings.CNVMouseClickArcOpacity=="none"){return "";}else{return self.settings.CNVMouseClickArcOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.CNVMouseClickArcStrokeColor=="none"){return "";}else{return self.settings.CNVMouseClickArcStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.CNVMouseClickArcStrokeWidth=="none"){return "";}else{return self.settings.CNVMouseClickArcStrokeWidth;} });
                    d3.select("#"+d.cnv_click_label)
                        .style("opacity", self.settings.CNVMouseClickTextOpacity)
                        .style("fill", self.settings.CNVMouseClickTextColor)
                        .style("font-size", self.settings.CNVMouseClickTextSize)
                        .attr("x", d3.event.x - self.svgWidth/2 + self.settings.ARCMouseClickTextPostionX)
                        .attr("y", d3.event.y - self.svgHeight/2 + self.settings.ARCMouseClickTextPostionY);
                })
            }

            if(self.settings.CNVMouseClickTextDrag==true){
                svg.selectAll("text.dragText").call(drag);
            }
            if(self.settings.CNVMouseDownDisplay==true){
               CNVMouseOn.on("mousedown",function(d){
                   d3.select(this)
                       .style("fill",  function(d,i) { if(self.settings.CNVMouseDownColor=="none"){return "";}else{return self.settings.CNVMouseDownColor;} })
                       .style("opacity",  function(d,i) { if(self.settings.CNVMouseDownCircleOpacity=="none"){return "";}else{return self.settings.CNVMouseDownCircleOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.CNVMouseDownCircleStrokeColor=="none"){return "";}else{return self.settings.CNVMouseDownCircleStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.CNVMouseDownCircleStrokeWidth=="none"){return "";}else{return self.settings.CNVMouseDownCircleStrokeWidth;} });
               })
            }
            if(self.settings.CNVMouseEnterDisplay==true){
               CNVMouseOn.on("mouseenter",function(d){
                   d3.select(this)
                       .style("fill",  function(d,i) { if(self.settings.CNVMouseEnterColor=="none"){return "";}else{return self.settings.CNVMouseEnterColor;} })
                       .style("opacity",  function(d,i) { if(self.settings.CNVMouseEnterCircleOpacity=="none"){return "";}else{return self.settings.CNVMouseEnterCircleOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.CNVMouseEnterCircleStrokeColor=="none"){return "";}else{return self.settings.CNVMouseEnterCircleStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.CNVMouseEnterCircleStrokeWidth=="none"){return "";}else{return self.settings.CNVMouseEnterCircleStrokeWidth;} });
               })
            }
            if(self.settings.CNVMouseLeaveDisplay==true){
               CNVMouseOn.on("mouseleave",function(d){
                   CNVMouseOnTooltip.style("opacity",0.0);
                   d3.select(this)
                       .style("fill",  function(d,i) { if(self.settings.CNVMouseLeaveColor=="none"){return "";}else{return self.settings.CNVMouseLeaveColor;} })
                       .style("opacity",  function(d,i) { if(self.settings.CNVMouseLeaveCircleOpacity=="none"){return "";}else{return self.settings.CNVMouseLeaveCircleOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.CNVMouseLeaveCircleStrokeColor=="none"){return "";}else{return self.settings.CNVMouseLeaveCircleStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.CNVMouseLeaveCircleStrokeWidth=="none"){return "";}else{return self.settings.CNVMouseLeaveCircleStrokeWidth;} });
               })
            }
            if(self.settings.CNVMouseUpDisplay==true){
               CNVMouseOn.on("mouseup",function(d){
                   d3.select(this)
                       .style("fill",  function(d,i) { if(self.settings.CNVMouseUpColor=="none"){return "";}else{return self.settings.CNVMouseUpColor;} })
                       .style("opacity",  function(d,i) { if(self.settings.CNVMouseUpCircleOpacity=="none"){return "";}else{return self.settings.CNVMouseUpCircleOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.CNVMouseUpCircleStrokeColor=="none"){return "";}else{return self.settings.CNVMouseUpCircleStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.CNVMouseUpCircleStrokeWidth=="none"){return "";}else{return self.settings.CNVMouseUpCircleStrokeWidth;} });
               })
            }
            if(self.settings.CNVMouseMoveDisplay==true){
               CNVMouseOn.on("mousemove",function(d){
                   d3.select(this)
                       .style("fill",  function(d,i) { if(self.settings.CNVMouseMoveColor=="none"){return "";}else{return self.settings.CNVMouseMoveColor;} })
                       .style("opacity",  function(d,i) { if(self.settings.CNVMouseMoveCircleOpacity=="none"){return "";}else{return self.settings.CNVMouseMoveCircleOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.CNVMouseMoveCircleStrokeColor=="none"){return "";}else{return self.settings.CNVMouseMoveCircleStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.CNVMouseMoveCircleStrokeWidth=="none"){return "";}else{return self.settings.CNVMouseMoveCircleStrokeWidth;} });
                   CNVMouseOnTooltip.style("left", (d3.event.pageX) + "px")
                   .style("top", (d3.event.pageY + 20) + "px");
               })
            }
            if(self.settings.CNVMouseOutDisplay==true){
               CNVMouseOn.on("mouseout",function(d){
                   CNVMouseOnTooltip.style("opacity",0.0);
                   d3.select(this)
                       .transition()
                       .duration(self.settings.CNVMouseOutAnimationTime)
                       .style("fill",  function(d,i) { if(self.settings.CNVMouseOutColor=="none"){return "";}else{return self.settings.CNVMouseOutColor;} })
                       .style("opacity",  function(d,i) { if(self.settings.CNVMouseOutCircleOpacity=="none"){return "";}else{return self.settings.CNVMouseOutCircleOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.CNVMouseOutCircleStrokeColor=="none"){return "";}else{return self.settings.CNVMouseOutCircleStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.CNVMouseOutCircleStrokeWidth=="none"){return "";}else{return self.settings.CNVMouseOutCircleStrokeWidth;} });
               });
            }
        }

    }

    if(self.HEATMAP.length > 0){
            function BioCircosHeatmap(d) {
              return self.HEATMAP[heatmapi].map(function(v, i) {
                var heatmap_k = (d[self.initGenome[v.chr]].endAngle - d[self.initGenome[v.chr]].startAngle) / d[self.initGenome[v.chr]].value;
                return {
                  startAngle: v.start * heatmap_k + d[self.initGenome[v.chr]].startAngle,
                  endAngle: v.end * heatmap_k + d[self.initGenome[v.chr]].startAngle,
                  heatmap_chr: v.chr,
                  heatmap_start: v.start,
                  heatmap_end: v.end,
                  heatmap_name: v.name,
                  heatmap_value: v.value,
                  heatmap_startTooltip :v.startTooltip,
                  heatmap_endTooltip :v.endTooltip,
                  group: self.initGenome[v.chr],
                };
              });
            }
        for(var heatmapi=0; heatmapi<self.HEATMAP.length; heatmapi++){
            self.update_HEATMAPsettings(self.HEATMAPConfig[heatmapi]);

            var heatmap_objects = BioCircosHeatmap(chord.groups())

            var HeatmapMaxColor = d3.rgb(self.HEATMAPsettings.maxColor);
            var HeatmapMinColor = d3.rgb(self.HEATMAPsettings.minColor);
            var HeatmapValue2Color = d3.interpolate(HeatmapMinColor,HeatmapMaxColor);
            var heatmap = d3.svg.arc().innerRadius(innerRadius+self.HEATMAPsettings.innerRadius).outerRadius(outerRadius+self.HEATMAPsettings.outerRadius);
            svg.append("g")
                .attr("class", "BioCircosHEATMAP")
                .selectAll("path.BioCircosHEATMAP")
                  .data(heatmap_objects)
                  .enter()
                .append("path")
                .attr("class", "BioCircosHEATMAP")
                .attr("fill", function(d,i) { return HeatmapValue2Color((d.heatmap_value - self.heatmap_value_maxmin(self.HEATMAP[heatmapi])[1])/(self.heatmap_value_maxmin(self.HEATMAP[heatmapi])[0]-self.heatmap_value_maxmin(self.HEATMAP[heatmapi])[1])); })
                .attr("d", function(d,i) { return heatmap(d,i) })
                .attr("group", function(d,i) { return self.genomeLabel[d.group] })
                .attr("order", function(d,i) { return heatmapi });
            self.init_HEATMAPsettings();
        }

        if(self.settings.HEATMAPMouseEvent==true){
            var HEATMAPMouseOnTooltip = d3.select("body")
                .append("div")
                .attr("class","BioCircosHeatmapTooltip")
                .attr("id","BioCircosHeatmapTooltip")
                .style("visibility","hidden")
            var HEATMAPMouseOn = svg.selectAll("path.BioCircosHEATMAP");

            if(self.settings.HEATMAPMouseOverDisplay==true){
                HEATMAPMouseOn.on("mouseover",function(d){

                      HEATMAPMouseOnTooltip.html(self.settings.HEATMAPMouseOverTooltipsHtml01+d.heatmap_chr+self.settings.HEATMAPMouseOverTooltipsHtml02+Math.round(d.heatmap_startTooltip)+self.settings.HEATMAPMouseOverTooltipsHtml03+Math.round(d.heatmap_endTooltip)+self.settings.HEATMAPMouseOverTooltipsHtml05+d.heatmap_value+self.settings.HEATMAPMouseOverTooltipsHtml04+d.heatmap_name+self.settings.HEATMAPMouseOverTooltipsHtml06)
                      //HEATMAPMouseOnTooltip.html(self.settings.HEATMAPMouseOverTooltipsHtml01+d.heatmap_chr+self.settings.HEATMAPMouseOverTooltipsHtml02+d.heatmap_start+self.settings.HEATMAPMouseOverTooltipsHtml03+d.heatmap_end+self.settings.HEATMAPMouseOverTooltipsHtml04+d.heatmap_name+self.settings.HEATMAPMouseOverTooltipsHtml05+d.heatmap_value+self.settings.HEATMAPMouseOverTooltipsHtml06)
                      .style("left", (d3.event.pageX) + "px")
                       .style("top", (d3.event.pageY + 20) + "px")
                       .style("position", self.settings.HEATMAPMouseOverTooltipsPosition)
                       .style("background-color", self.settings.HEATMAPMouseOverTooltipsBackgroundColor)
                       .style("border-color", "#1765a3")
                       .style("border-style", self.settings.HEATMAPMouseOverTooltipsBorderStyle)
                       .style("border-width", self.settings.HEATMAPMouseOverTooltipsBorderWidth)
                       .style("padding", self.settings.HEATMAPMouseOverTooltipsPadding)
                       .style("border-radius", self.settings.HEATMAPMouseOverTooltipsBorderRadius)
                       .style("visibility", "visible")
                       .style("color", "#1765a3")
                       .style("font-size", "18px")
                       .style("z-index", "1000")
                       .style("font-family",  "Arial")
                       .style("font-weight", "bold")

                    d3.select(this)
                       .style("fill",  function(d,i) { if(self.settings.HEATMAPMouseOverColor=="none"){return "";}else{return self.settings.HEATMAPMouseOverColor;} })
                       .style("opacity",  function(d,i) { if(self.settings.HEATMAPMouseOverOpacity=="none"){return "";}else{return self.settings.HEATMAPMouseOverOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.HEATMAPMouseOverStrokeColor=="none"){return "";}else{return self.settings.HEATMAPMouseOverStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.HEATMAPMouseOverStrokeWidth=="none"){return "";}else{return self.settings.HEATMAPMouseOverStrokeWidth;} });
                })
            }
            if(self.settings.HEATMAPMouseClickDisplay==true){
                HEATMAPMouseOn.on("click",function(d){

                    d3.select(this)
                       .style("fill",  function(d,i) { if(self.settings.HEATMAPMouseClickColor=="none"){return "";}else{return self.settings.HEATMAPMouseClickColor;} })
                       .style("opacity",  function(d,i) { if(self.settings.HEATMAPMouseClickOpacity=="none"){return "";}else{return self.settings.HEATMAPMouseClickOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.HEATMAPMouseClickStrokeColor=="none"){return "";}else{return self.settings.HEATMAPMouseClickStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.HEATMAPMouseClickStrokeWidth=="none"){return "";}else{return self.settings.HEATMAPMouseClickStrokeWidth;} });
                })
            }
            if(self.settings.HEATMAPMouseDownDisplay==true){
               HEATMAPMouseOn.on("mousedown",function(d){
                  /*  self.settings.posDown = null;
                    self.settings.posEnd = null;
                    d3.selectAll("#selectionArc").remove();

                   self.settings.posDown = d.startAngle;
                   var arc = d3.svg.arc()
                       .innerRadius(innerRadius+0.2*innerRadius)
                       .outerRadius(outerRadius+0.15*outerRadius)
                       .startAngle(d.startAngle)
                       .endAngle(d.endAngle);
                   d3.select(this.parentNode)
                       .append("path")
                       .attr("id", "selectionArc")
                       .attr("d", arc);*/

                   d3.select(this)
                       .style("fill",  function(d,i) { if(self.settings.HEATMAPMouseDownColor=="none"){return "";}else{return self.settings.HEATMAPMouseDownColor;} })
                       .style("opacity",  function(d,i) { if(self.settings.HEATMAPMouseDownOpacity=="none"){return "";}else{return self.settings.HEATMAPMouseDownOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.HEATMAPMouseDownStrokeColor=="none"){return "";}else{return self.settings.HEATMAPMouseDownStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.HEATMAPMouseDownStrokeWidth=="none"){return "";}else{return self.settings.HEATMAPMouseDownStrokeWidth;} });
               })
            }
            if(self.settings.HEATMAPMouseEnterDisplay==true){
               HEATMAPMouseOn.on("mouseenter",function(d){
                   d3.select(this)
                       .style("fill",  function(d,i) { if(self.settings.HEATMAPMouseEnterColor=="none"){return "";}else{return self.settings.HEATMAPMouseEnterColor;} })
                       .style("opacity",  function(d,i) { if(self.settings.HEATMAPMouseEnterOpacity=="none"){return "";}else{return self.settings.HEATMAPMouseEnterOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.HEATMAPMouseEnterStrokeColor=="none"){return "";}else{return self.settings.HEATMAPMouseEnterStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.HEATMAPMouseEnterStrokeWidth=="none"){return "";}else{return self.settings.HEATMAPMouseEnterStrokeWidth;} });
               })
            }
            if(self.settings.HEATMAPMouseLeaveDisplay==true){
               HEATMAPMouseOn.on("mouseleave",function(d){
                   HEATMAPMouseOnTooltip.style("visibility", "hidden");
                   d3.select(this)
                       .style("fill",  function(d,i) { if(self.settings.HEATMAPMouseLeaveColor=="none"){return "";}else{return self.settings.HEATMAPMouseLeaveColor;} })
                       .style("opacity",  function(d,i) { if(self.settings.HEATMAPMouseLeaveOpacity=="none"){return "";}else{return self.settings.HEATMAPMouseLeaveOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.HEATMAPMouseLeaveStrokeColor=="none"){return "";}else{return self.settings.HEATMAPMouseLeaveStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.HEATMAPMouseLeaveStrokeWidth=="none"){return "";}else{return self.settings.HEATMAPMouseLeaveStrokeWidth;} });
               })

            }
            if(self.settings.HEATMAPMouseUpDisplay==true){
               HEATMAPMouseOn.on("mouseup",function(d){
                   /*self.settings.posUp = d.endAngle;
                   self.settings.posDown = null;
                   d3.selectAll("#selectionArc").remove();*/

                   d3.select(this)
                       .style("fill",  function(d,i) { if(self.settings.HEATMAPMouseUpColor=="none"){return "";}else{return self.settings.HEATMAPMouseUpColor;} })
                       .style("opacity",  function(d,i) { if(self.settings.HEATMAPMouseUpOpacity=="none"){return "";}else{return self.settings.HEATMAPMouseUpOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.HEATMAPMouseUpStrokeColor=="none"){return "";}else{return self.settings.HEATMAPMouseUpStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.HEATMAPMouseUpStrokeWidth=="none"){return "";}else{return self.settings.HEATMAPMouseUpStrokeWidth;} });

                })
            }

            if(self.settings.HEATMAPMouseMoveDisplay==true){
               HEATMAPMouseOn.on("mousemove",function(d){
                /* if (self.settings.posDown){
                   var arc = d3.svg.arc()
                       .innerRadius(innerRadius+0.2*innerRadius)
                       .outerRadius(outerRadius+0.15*outerRadius)
                       .startAngle(self.settings.posDown)
                       .endAngle(d.endAngle);
                   d3.select("#selectionArc")
                       .attr("d", arc);
                 }*/
                   d3.select(this)
                       .style("fill",  function(d,i) { if(self.settings.HEATMAPMouseMoveColor=="none"){return "";}else{return self.settings.HEATMAPMouseMoveColor;} })
                       .style("opacity",  function(d,i) { if(self.settings.HEATMAPMouseMoveOpacity=="none"){return "";}else{return self.settings.HEATMAPMouseMoveOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.HEATMAPMouseMoveStrokeColor=="none"){return "";}else{return self.settings.HEATMAPMouseMoveStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.HEATMAPMouseUpStrokeWidth=="none"){return "";}else{return self.settings.HEATMAPMouseMoveStrokeWidth;} });
                   HEATMAPMouseOnTooltip.style("left", (d3.event.pageX) + "px")
                   .style("top", (d3.event.pageY + 20) + "px");
               })
            }
            if(self.settings.HEATMAPMouseOutDisplay==true){
               HEATMAPMouseOn.on("mouseout",function(d){
                   HEATMAPMouseOnTooltip.style("visibility","hidden");
                   d3.select(this)
                       .transition()
                       .duration(self.settings.HEATMAPMouseOutAnimationTime)
                       .style("fill",  function(d,i) { if(self.settings.HEATMAPMouseOutColor=="none"){return "";}else{return self.settings.HEATMAPMouseOutColor;} })
                       .style("opacity",  function(d,i) { if(self.settings.HEATMAPMouseOutOpacity=="none"){return "";}else{return self.settings.HEATMAPMouseOutOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.HEATMAPMouseOutStrokeColor=="none"){return "";}else{return self.settings.HEATMAPMouseOutStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.HEATMAPMouseUpStrokeWidth=="none"){return "";}else{return self.settings.HEATMAPMouseOutStrokeWidth;} });
               });
            }

        }
    }

    if(self.ZOOM_SLIDER.length > 0){
            function BioCircosZOOM_SLIDER(d) {
              return self.ZOOM_SLIDER[zoom_slideri].map(function(v, i) {
                var zoom_slider_k = (d[self.initGenome[v.chr]].endAngle - d[self.initGenome[v.chr]].startAngle) / d[self.initGenome[v.chr]].value;
                return {
                  startAngle: v.start * zoom_slider_k + d[self.initGenome[v.chr]].startAngle,
                  endAngle: v.end * zoom_slider_k + d[self.initGenome[v.chr]].startAngle,
                  zoom_slider_chr: v.chr,
                  zoom_slider_start: v.start,
                  zoom_slider_end: v.end,
                  zoom_slider_actualStart:v.actualStart,
                  zoom_slider_actualEnd:v.actualEnd,
                  group: self.initGenome[v.chr],
                };
              });
            }

        for(var zoom_slideri=0; zoom_slideri<self.ZOOM_SLIDER.length; zoom_slideri++){
            self.update_ZOOM_SLIDERsettings(self.ZOOM_SLIDERConfig[zoom_slideri]);

            var zoom_slider_objects = BioCircosZOOM_SLIDER(chord.groups())
            var zoom_slider = d3.svg.arc().innerRadius(self.ZOOM_SLIDERsettings.minRadius).outerRadius(self.ZOOM_SLIDERsettings.maxRadius)

            svg.append("g")
                .attr("class", "BioCircosZOOM_SLIDER")
                .selectAll("path.BioCircosZOOM_SLIDER")
                  .data(zoom_slider_objects)
                  .enter()
                .append("path")
                .attr("class", "BioCircosZOOM_SLIDER")
                .attr("fill", "grey")
                .attr("d", function(d,i) { return zoom_slider(d,i) })
                .attr("group", function(d,i) { return self.genomeLabel[d.group] })
                .attr("order", function(d,i) { return zoom_slideri })
                .style("opacity",0);
            self.init_ZOOM_SLIDERsettings();
        }

        var ZOOM_SLIDERMouseOn = svg.selectAll("path.BioCircosZOOM_SLIDER");

        ZOOM_SLIDERMouseOn.on("mousedown",function(d){
          self.settings.zoom_start=d.zoom_slider_actualStart
          self.settings.groupStart = self.genomeLabel[d.group]
          self.settings.posDown = null;
          self.settings.posEnd = null;
          d3.selectAll("#selectionArc").remove();

         self.settings.posDown = d.startAngle;
         var arc = d3.svg.arc()
             .innerRadius(innerRadius)
             .outerRadius(outerRadius)
             .startAngle(d.startAngle)
             .endAngle(d.endAngle)

         d3.select(this.parentNode)
             .append("path")
             .attr("id", "selectionArc")
             .attr("d", arc)
             .attr("fill", "blue")
             .style("opacity",0.3);

      /*   d3.select(this)
                 .style("fill", "red")*/
        })

         ZOOM_SLIDERMouseOn.on("dblclick",function(d){

           d3.selectAll("#selectionArc").remove();
           var event = document.createEvent('Event');
           event.initEvent("HTMLEvents", true, true);
           event.eventName = "zooming";
           event.type ="zooming";

           this.dispatchEvent(event);
           self.settings.posDown = null;

          /* d3.select(this)
                   .style("fill", "red")*/
         })

         ZOOM_SLIDERMouseOn.on("mousemove",function(d){
           if (self.settings.posDown){
             self.settings.zoom_end=d.zoom_slider_actualEnd
             self.settings.groupEnd = self.genomeLabel[d.group]
             var arc = d3.svg.arc()
                 .innerRadius(innerRadius)
                 .outerRadius(outerRadius)
                 .startAngle(self.settings.posDown)
                 .endAngle(d.endAngle)


             d3.select("#selectionArc")
                 .attr("d", arc)
                 .attr("fill", "blue")
                 .style("opacity",0.3);

                 var endAng = d.endAngle;

                 var selectionArcMouseOn = d3.selectAll("#selectionArc");
                 selectionArcMouseOn.on("mouseup",function(d){
                   self.settings.posUp = endAng;
                   var evt = new MouseEvent("dblclick")

                  ZOOM_SLIDERMouseOn.node().dispatchEvent(evt);
                  // ZOOM_SLIDERMouseOn.dispatchEvent("mouseup");

                   d3.selectAll("#selectionArc").remove();

                 })
           }
         });
    }

    if(self.SCATTER.length > 0){
            function BioCircosSCATTER(d) {
              return self.SCATTER[scatteri].map(function(v, i) {
                var random_data = Math.random()*self.SCATTERsettings.random_data
                var scatter_k = (d[self.initGenome[v.chr]].endAngle - d[self.initGenome[v.chr]].startAngle) / d[self.initGenome[v.chr]].value;
                return {
                  scatter_angle: (v.start/2+v.end/2) * scatter_k + d[self.initGenome[v.chr]].startAngle,
                  scatter_chr: v.chr,
                  scatter_start: v.start,
                  scatter_end: v.end,
                  scatter_name: v.name,
                  scatter_des: v.des,
                  scatter_click_label: "scatter"+scatteri+"_"+i,
                  x: (0 + Math.sin((v.start/2+v.end/2) * scatter_k + d[self.initGenome[v.chr]].startAngle) * (self.SCATTERsettings.SCATTERRadius - random_data)),
                  y: (0 - Math.cos((v.start/2+v.end/2) * scatter_k + d[self.initGenome[v.chr]].startAngle) * (self.SCATTERsettings.SCATTERRadius - random_data))
                };
              });
            }
        for(var scatteri=0; scatteri<self.SCATTER.length; scatteri++){
            self.update_SCATTERsettings(self.SCATTERConfig[scatteri]);
            var scatter_objects = BioCircosSCATTER(chord.groups())

            if(self.SCATTERsettings.outerPointType=="circle"){
              if(self.SCATTERsettings.SCATTERAnimationDisplay==false){
                svg.append("g")
                    .attr("class", "BioCircosSCATTER")
                  .selectAll("circle")
                    .data(scatter_objects)
                    .enter().append("circle")
                    .attr("id", "BioCircosSCATTEROut")
                    .attr("fill", self.SCATTERsettings.outerCircleColor)
                    .attr("opacity", self.SCATTERsettings.outerCircleOpacity)
                    .attr("r", self.SCATTERsettings.outerCircleSize)
                    .attr("cx", function(d) { return d.x; })
                    .attr("cy", function(d) { return d.y; });
              }
              if(self.SCATTERsettings.SCATTERAnimationDisplay==true){
                svg.append("g")
                    .attr("class", "BioCircosSCATTER")
                  .selectAll("circle")
                    .data(scatter_objects)
                    .enter().append("circle")
                    .attr("id", "BioCircosSCATTEROut")
                    .attr("fill", self.SCATTERsettings.outerCircleColor)
                    .attr("opacity", self.SCATTERsettings.outerCircleOpacity)
                    .attr("r", self.SCATTERsettings.outerCircleSize)
		    .attr("cx",function(d){
			    return 0;
		    })
		    .attr("cy",function(d){
			    return 0;
		    })
		    .transition()
		    .delay(function(d,i){
			    return i * self.SCATTERsettings.SCATTERAnimationDelay;
		    })
		    .duration(self.SCATTERsettings.SCATTERAnimationTime)
		    .ease(self.SCATTERsettings.SCATTERAnimationType)
                    .attr("cx", function(d) { return d.x; })
                    .attr("cy", function(d) { return d.y; });
               }

                if(self.settings.SCATTERMouseClickTextFromData=="first"){
                    svg.append("g")
                        .attr("class", "BioCircosSCATTERlabel")
                      .selectAll("text")
                        .data(scatter_objects)
                        .enter().append("text")
                        .attr("class", "dragText")
                        .attr("id", function(d,i) { return "scatter"+scatteri+"_"+i; })
                        .text(function(d) { return d.scatter_chr; })
                        .attr("x", -1000)
                        .attr("y", -1000)
                        .style("opacity", 0)
                        .style("font-size", 1)
                        .attr("fill", self.SCATTERsettings.SCATTERFillColor);
                }
                if(self.settings.SCATTERMouseClickTextFromData=="second"){
                    svg.append("g")
                        .attr("class", "BioCircosSCATTERlabel")
                      .selectAll("text")
                        .data(scatter_objects)
                        .enter().append("text")
                        .attr("class", "dragText")
                        .attr("id", function(d,i) { return "scatter"+scatteri+"_"+i; })
                        .text(function(d) { return d.scatter_pos; })
                        .attr("x", -1000)
                        .attr("y", -1000)
                        .style("opacity", 0)
                        .style("font-size", 1)
                        .attr("fill", self.SCATTERsettings.SCATTERFillColor);
                }
                if(self.settings.SCATTERMouseClickTextFromData=="third"){
                    svg.append("g")
                        .attr("class", "BioCircosSCATTERlabel")
                      .selectAll("text")
                        .data(scatter_objects)
                        .enter().append("text")
                        .attr("class", "dragText")
                        .attr("id", function(d,i) { return "scatter"+scatteri+"_"+i; })
                        .text(function(d) { return d.scatter_val; })
                        .attr("x", -1000)
                        .attr("y", -1000)
                        .style("opacity", 0)
                        .style("font-size", 1)
                        .attr("fill", self.SCATTERsettings.SCATTERFillColor);
                }
                if(self.settings.SCATTERMouseClickTextFromData=="fourth"){
                    svg.append("g")
                        .attr("class", "BioCircosSCATTERlabel")
                      .selectAll("text")
                        .data(scatter_objects)
                        .enter().append("text")
                        .attr("class", "dragText")
                        .attr("id", function(d,i) { return "scatter"+scatteri+"_"+i; })
                        .text(function(d) { return d.scatter_name; })
                        .attr("x", -1000)
                        .attr("y", -1000)
                        .style("opacity", 0)
                        .style("font-size", 1)
                        .attr("fill", self.SCATTERsettings.SCATTERFillColor);
                }
                if(self.settings.SCATTERMouseClickTextFromData=="fifth"){
                    svg.append("g")
                        .attr("class", "BioCircosSCATTERlabel")
                      .selectAll("text")
                        .data(scatter_objects)
                        .enter().append("text")
                        .attr("class", "dragText")
                        .attr("id", function(d,i) { return "scatter"+scatteri+"_"+i; })
                        .text(function(d) { return d.scatter_des; })
                        .attr("x", -1000)
                        .attr("y", -1000)
                        .style("opacity", 0)
                        .style("font-size", 1)
                        .attr("fill", self.SCATTERsettings.SCATTERFillColor);
                }
            }

            if(self.SCATTERsettings.outerPointType=="rect"){
                svg.append("g")
                    .attr("class", "BioCircosSCATTER")
                  .selectAll("rect")
                    .data(scatter_objects)
                    .enter().append("rect")
                    .attr("id", "BioCircosSCATTEROut")
                    .attr("x", function(d) { return d.x - self.SCATTERsettings.outerrectWidth/2; })
                    .attr("y", function(d) { return d.y - self.SCATTERsettings.outerrectHeight/2; })
                    .attr("fill", self.SCATTERsettings.outerCircleColor)
                    .attr("width", self.SCATTERsettings.outerrectWidth)
                    .attr("height", self.SCATTERsettings.outerrectHeight)
                    .attr("opacity", 0.5);
            }

            if(self.SCATTERsettings.innerPointType=="circle"){
              if(self.SCATTERsettings.SCATTERAnimationDisplay==false){
                svg.append("g")
                    .attr("class", "BioCircosSCATTEROut")
                  .selectAll("circle")
                    .data(scatter_objects)
                    .enter().append("circle")
                    .attr("id", "BioCircosSCATTEROut")  //out
                    .attr("fill", self.SCATTERsettings.innerCircleColor)
                    .attr("r", self.SCATTERsettings.innerCircleSize)
                    .attr("cx", function(d) { return d.x; })
                    .attr("cy", function(d) { return d.y; });
               }
              if(self.SCATTERsettings.SCATTERAnimationDisplay==true){
                svg.append("g")
                    .attr("class", "BioCircosSCATTEROut")
                  .selectAll("circle")
                    .data(scatter_objects)
                    .enter().append("circle")
                    .attr("id", "BioCircosSCATTEROut")  //out
                    .attr("fill", self.SCATTERsettings.innerCircleColor)
                    .attr("r", self.SCATTERsettings.innerCircleSize)
		    .attr("cx",function(d){
			    return 0;
		    })
		    .attr("cy",function(d){
			    return 0;
		    })
		    .transition()
		    .delay(function(d,i){
			    return i * self.SCATTERsettings.SCATTERAnimationDelay;
		    })
		    .duration(self.SCATTERsettings.SCATTERAnimationTime)
		    .ease(self.SCATTERsettings.SCATTERAnimationType)
                    .attr("cx", function(d) { return d.x; })
                    .attr("cy", function(d) { return d.y; });
               }
                if(self.settings.SCATTERMouseClickTextFromData=="first"){
                    svg.append("g")
                        .attr("class", "BioCircosSCATTERlabel")
                      .selectAll("text")
                        .data(scatter_objects)
                        .enter().append("text")
                        .attr("class", "dragText")
                        .attr("id", function(d,i) { return "scatter"+scatteri+"_"+i; })
                        .text(function(d) { return d.scatter_chr; })
                        .attr("x", -1000)
                        .attr("y", -1000)
                        .style("opacity", 0)
                        .style("font-size", 1)
                        .attr("fill", self.SCATTERsettings.SCATTERFillColor);
                }
                if(self.settings.SCATTERMouseClickTextFromData=="second"){
                    svg.append("g")
                        .attr("class", "BioCircosSCATTERlabel")
                      .selectAll("text")
                        .data(scatter_objects)
                        .enter().append("text")
                        .attr("class", "dragText")
                        .attr("id", function(d,i) { return "scatter"+scatteri+"_"+i; })
                        .text(function(d) { return d.scatter_start; })
                        .attr("x", -1000)
                        .attr("y", -1000)
                        .style("opacity", 0)
                        .style("font-size", 1)
                        .attr("fill", self.SCATTERsettings.SCATTERFillColor);
                }
                if(self.settings.SCATTERMouseClickTextFromData=="third"){
                    svg.append("g")
                        .attr("class", "BioCircosSCATTERlabel")
                      .selectAll("text")
                        .data(scatter_objects)
                        .enter().append("text")
                        .attr("class", "dragText")
                        .attr("id", function(d,i) { return "scatter"+scatteri+"_"+i; })
                        .text(function(d) { return d.scatter_end; })
                        .attr("x", -1000)
                        .attr("y", -1000)
                        .style("opacity", 0)
                        .style("font-size", 1)
                        .attr("fill", self.SCATTERsettings.SCATTERFillColor);
                }
                if(self.settings.SCATTERMouseClickTextFromData=="fourth"){
                    svg.append("g")
                        .attr("class", "BioCircosSCATTERlabel")
                      .selectAll("text")
                        .data(scatter_objects)
                        .enter().append("text")
                        .attr("class", "dragText")
                        .attr("id", function(d,i) { return "scatter"+scatteri+"_"+i; })
                        .text(function(d) { return d.scatter_name; })
                        .attr("x", -1000)
                        .attr("y", -1000)
                        .style("opacity", 0)
                        .style("font-size", 1)
                        .attr("fill", self.SCATTERsettings.SCATTERFillColor);
                }
                if(self.settings.SCATTERMouseClickTextFromData=="fifth"){
                    svg.append("g")
                        .attr("class", "BioCircosSCATTERlabel")
                      .selectAll("text")
                        .data(scatter_objects)
                        .enter().append("text")
                        .attr("class", "dragText")
                        .attr("id", function(d,i) { return "scatter"+scatteri+"_"+i; })
                        .text(function(d) { return d.scatter_des; })
                        .attr("x", -1000)
                        .attr("y", -1000)
                        .style("opacity", 0)
                        .style("font-size", 1)
                        .attr("fill", self.SCATTERsettings.SCATTERFillColor);
                }
            }

            if(self.SCATTERsettings.innerPointType=="rect"){
                svg.append("g")
                    .attr("class", "BioCircosSCATTEROut")
                  .selectAll("rect")
                    .data(scatter_objects)
                    .enter().append("rect")
                    .attr("id", "BioCircosSCATTEROut")  //out
                    .attr("x", function(d) { return d.x - self.SCATTERsettings.innerrectWidth/2; })
                    .attr("y", function(d) { return d.y - self.SCATTERsettings.innerrectHeight/2; })
                    .attr("width", self.SCATTERsettings.innerrectWidth)
                    .attr("height", self.SCATTERsettings.innerrectHeight)
                    .attr("fill", self.SCATTERsettings.innerCircleColor);
            }

            self.init_SCATTERsettings();

        }

        if(self.settings.SCATTERMouseEvent==true){
            var SCATTERMouseOnTooltip = d3.select("body")
                .append("div")
                .attr("class","BioCircosSCATTERTooltip")
                .attr("id","BioCircosSCATTERTooltip")
                .style("visibility","hidden");

            var SCATTERMouseOn = svg.selectAll("#BioCircosSCATTEROut");

            if(self.settings.SCATTERMouseOverDisplay==true){
                SCATTERMouseOn.on("mouseover",function(d){
                      SCATTERMouseOnTooltip.html(self.settings.SCATTERMouseOverTooltipsHtml01+d.scatter_chr+self.settings.SCATTERMouseOverTooltipsHtml02+d.scatter_start+self.settings.SCATTERMouseOverTooltipsHtml03+d.scatter_end+self.settings.SCATTERMouseOverTooltipsHtml04+d.scatter_name+self.settings.SCATTERMouseOverTooltipsHtml05+d.scatter_des+self.settings.SCATTERMouseOverTooltipsHtml06)
                       .style("left", (d3.event.pageX) + "px")
                       .style("top", (d3.event.pageY + 20) + "px")
                       .style("position", self.settings.SCATTERMouseOverTooltipsPosition)
                       .style("background-color", self.settings.SCATTERMouseOverTooltipsBackgroundColor)
                       .style("border-style", self.settings.SCATTERMouseOverTooltipsBorderStyle)
                       .style("border-width", self.settings.SCATTERMouseOverTooltipsBorderWidth)
                       .style("padding", self.settings.SCATTERMouseOverTooltipsPadding)
                       .style("border-radius", self.settings.SCATTERMouseOverTooltipsBorderRadius)
                       .style("visibility","visible")
                    d3.select(this)
                       .style("r",  function(d,i) { if(self.settings.SCATTERMouseOverCircleSize=="none"){return "";}else{return self.settings.SCATTERMouseOverCircleSize;} })
                       .style("fill",  function(d,i) { if(self.settings.SCATTERMouseOverColor=="none"){return "";}else{return self.settings.SCATTERMouseOverColor;} })
                       .style("opacity",  function(d,i) { if(self.settings.SCATTERMouseOverCircleOpacity=="none"){return "";}else{return self.settings.SCATTERMouseOverCircleOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.SCATTERMouseOverCircleStrokeColor=="none"){return "";}else{return self.settings.SCATTERMouseOverCircleStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.SCATTERMouseOverCircleStrokeWidth=="none"){return "";}else{return self.settings.SCATTERMouseOverCircleStrokeWidth;} });
                })
            }
            if(self.settings.SCATTERMouseClickDisplay==true){
                SCATTERMouseOn.on("click",function(d){
                    d3.select(this)
                       .style("r",  function(d,i) { if(self.settings.SCATTERMouseClickCircleSize=="none"){return "";}else{return self.settings.SCATTERMouseClickCircleSize;} })
                       .style("fill",  function(d,i) { if(self.settings.SCATTERMouseClickColor=="none"){return "";}else{return self.settings.SCATTERMouseClickColor;} })
                       .style("opacity",  function(d,i) { if(self.settings.SCATTERMouseClickCircleOpacity=="none"){return "";}else{return self.settings.SCATTERMouseClickCircleOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.SCATTERMouseClickCircleStrokeColor=="none"){return "";}else{return self.settings.SCATTERMouseClickCircleStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.SCATTERMouseClickCircleStrokeWidth=="none"){return "";}else{return self.settings.SCATTERMouseClickCircleStrokeWidth;} });
                    d3.select("#"+d.scatter_click_label)
                        .style("opacity", self.settings.SCATTERMouseClickTextOpacity)
                        .style("fill", self.settings.SCATTERMouseClickTextColor)
                        .style("font-size", self.settings.SCATTERMouseClickTextSize)
                        .attr("x", d.x+self.settings.SCATTERMouseClickTextPostionX)
                        .attr("y", d.y+self.settings.SCATTERMouseClickTextPostionY);
                })
            }
            if(self.settings.SCATTERMouseClickTextDrag==true){
                svg.selectAll("text.dragText").call(drag);
            }
            if(self.settings.SCATTERMouseDownDisplay==true){
               SCATTERMouseOn.on("mousedown",function(d){
                   d3.select(this)
                       .style("r", function(d,i) { if(self.settings.SCATTERMouseDownCircleSize=="none"){return "";}else{return self.settings.SCATTERMouseDownCircleSize;} })
                       .style("fill", function(d,i) { if(self.settings.SCATTERMouseDownColor=="none"){return "";}else{return self.settings.SCATTERMouseDownColor;} })
                       .style("opacity",  function(d,i) { if(self.settings.SCATTERMouseDownCircleOpacity=="none"){return "";}else{return self.settings.SCATTERMouseDownCircleOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.SCATTERMouseDownCircleStrokeColor=="none"){return "";}else{return self.settings.SCATTERMouseDownCircleStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.SCATTERMouseDownCircleStrokeWidth=="none"){return "";}else{return self.settings.SCATTERMouseDownCircleStrokeWidth;} });
               })
            }
            if(self.settings.SCATTERMouseEnterDisplay==true){
               SCATTERMouseOn.on("mouseenter",function(d){
                   d3.select(this)
                       .style("r", function(d,i) { if(self.settings.SCATTERMouseEnterCircleSize=="none"){return "";}else{return self.settings.SCATTERMouseEnterCircleSize;} })
                       .style("fill", function(d,i) { if(self.settings.SCATTERMouseEnterColor=="none"){return "";}else{return self.settings.SCATTERMouseEnterColor;} })
                       .style("opacity",  function(d,i) { if(self.settings.SCATTERMouseEnterCircleOpacity=="none"){return "";}else{return self.settings.SCATTERMouseEnterCircleOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.SCATTERMouseEnterCircleStrokeColor=="none"){return "";}else{return self.settings.SCATTERMouseEnterCircleStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.SCATTERMouseEnterCircleStrokeWidth=="none"){return "";}else{return self.settings.SCATTERMouseEnterCircleStrokeWidth;} });
               })
            }
            if(self.settings.SCATTERMouseLeaveDisplay==true){
               SCATTERMouseOn.on("mouseleave",function(d){
                   SCATTERMouseOnTooltip.style("visibility","hidden");
                   d3.select(this)
                       .style("r", function(d,i) { if(self.settings.SCATTERMouseLeaveCircleSize=="none"){return "";}else{return self.settings.SCATTERMouseLeaveCircleSize;} })
                       .style("fill", function(d,i) { if(self.settings.SCATTERMouseLeaveColor=="none"){return "";}else{return self.settings.SCATTERMouseLeaveColor;} })
                       .style("opacity",  function(d,i) { if(self.settings.SCATTERMouseLeaveCircleOpacity=="none"){return "";}else{return self.settings.SCATTERMouseLeaveCircleOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.SCATTERMouseLeaveCircleStrokeColor=="none"){return "";}else{return self.settings.SCATTERMouseLeaveCircleStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.SCATTERMouseLeaveCircleStrokeWidth=="none"){return "";}else{return self.settings.SCATTERMouseLeaveCircleStrokeWidth;} });
               })
            }
            if(self.settings.SCATTERMouseUpDisplay==true){
               SCATTERMouseOn.on("mouseup",function(d){
                   d3.select(this)
                       .style("r", function(d,i) { if(self.settings.SCATTERMouseUpCircleSize=="none"){return "";}else{return self.settings.SCATTERMouseUpCircleSize;} })
                       .style("fill", function(d,i) { if(self.settings.SCATTERMouseUpColor=="none"){return "";}else{return self.settings.SCATTERMouseUpColor;} })
                       .style("opacity",  function(d,i) { if(self.settings.SCATTERMouseUpCircleOpacity=="none"){return "";}else{return self.settings.SCATTERMouseUpCircleOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.SCATTERMouseUpCircleStrokeColor=="none"){return "";}else{return self.settings.SCATTERMouseUpCircleStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.SCATTERMouseUpCircleStrokeWidth=="none"){return "";}else{return self.settings.SCATTERMouseUpCircleStrokeWidth;} });
               })
            }
            if(self.settings.SCATTERMouseMoveDisplay==true){
               SCATTERMouseOn.on("mousemove",function(d){
                   d3.select(this)
                       .style("r", function(d,i) { if(self.settings.SCATTERMouseMoveCircleSize=="none"){return "";}else{return self.settings.SCATTERMouseMoveCircleSize;} })
                       .style("fill", function(d,i) { if(self.settings.SCATTERMouseMoveColor=="none"){return "";}else{return self.settings.SCATTERMouseMoveColor;} })
                       .style("opacity",  function(d,i) { if(self.settings.SCATTERMouseMoveCircleOpacity=="none"){return "";}else{return self.settings.SCATTERMouseMoveCircleOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.SCATTERMouseMoveCircleStrokeColor=="none"){return "";}else{return self.settings.SCATTERMouseMoveCircleStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.SCATTERMouseMoveCircleStrokeWidth=="none"){return "";}else{return self.settings.SCATTERMouseMoveCircleStrokeWidth;} });
                   SCATTERMouseOnTooltip.style("left", (d3.event.pageX) + "px")
                   .style("top", (d3.event.pageY + 20) + "px");
               })
            }
            if(self.settings.SCATTERMouseOutDisplay==true){
               SCATTERMouseOn.on("mouseout",function(d){
                   SCATTERMouseOnTooltip.style("opacity",0.0);
                   d3.select(this)
                       .transition()
                       .duration(self.settings.SCATTERMouseOutAnimationTime)
                       .style("r", function(d,i) { if(self.settings.SCATTERMouseOutCircleSize=="none"){return "";}else{return self.settings.SCATTERMouseOutCircleSize;} })
                       .style("fill", function(d,i) { if(self.settings.SCATTERMouseOutColor=="none"){return "";}else{return self.settings.SCATTERMouseOutColor;} })
                       .style("opacity",  function(d,i) { if(self.settings.SCATTERMouseOutCircleOpacity=="none"){return "";}else{return self.settings.SCATTERMouseOutCircleOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.SCATTERMouseOutCircleStrokeColor=="none"){return "";}else{return self.settings.SCATTERMouseOutCircleStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.SCATTERMouseOutCircleStrokeWidth=="none"){return "";}else{return self.settings.SCATTERMouseOutCircleStrokeWidth;} });
               });
            }
        }

    }


    if(self.SNP.length > 0){
            function BioCircosSNP(d) {
              return self.SNP[snpi].map(function(v, i) {
                var snp_k = (d[self.initGenome[v.chr]].endAngle - d[self.initGenome[v.chr]].startAngle) / d[self.initGenome[v.chr]].value;
                return {
                  snp_angle: v.pos * snp_k + d[self.initGenome[v.chr]].startAngle,
                  snp_chr: v.chr,
                  snp_pos: v.pos,
                  snp_val: v.value,
                  snp_des: v.des,
                  snp_homo: Number(v.homo).toFixed(2),
                  snp_color: v.color,
                  snp_posTooltip:v.posTooltip,
                  snp_click_label: "snp"+snpi+"_"+i,
                  x: (0 + Math.sin(v.pos * snp_k + d[self.initGenome[v.chr]].startAngle) * (self.SNPsettings.minRadius + ( (v.value-self.snp_value_maxmin(self.SNP[snpi])[1])/(self.snp_value_maxmin(self.SNP[snpi])[0]-self.snp_value_maxmin(self.SNP[snpi])[1])*(self.SNPsettings.maxRadius-self.SNPsettings.minRadius) ))),  //self.snp_value_maxmin(self.SNP[snpi])[0] max
                  y: (0 - Math.cos(v.pos * snp_k + d[self.initGenome[v.chr]].startAngle) * (self.SNPsettings.minRadius + ( (v.value-self.snp_value_maxmin(self.SNP[snpi])[1])/(self.snp_value_maxmin(self.SNP[snpi])[0]-self.snp_value_maxmin(self.SNP[snpi])[1])*(self.SNPsettings.maxRadius-self.SNPsettings.minRadius) )))
                };
              });
            }
        for(var snpi=0; snpi<self.SNP.length; snpi++){
            self.update_SNPsettings(self.SNPConfig[snpi]);

            var snp_objects = BioCircosSNP(chord.groups())

            if(self.SNPsettings.PointType=="circle"){
              if(self.SNPsettings.SNPAnimationDisplay==false){
                svg.append("g")
                    .attr("class", "BioCircosSNP")
                  .selectAll("circle")
                    .data(snp_objects)
                    .enter().append("circle")
                    .attr("id", "BioCircosSNP")
                    .attr("fill", function(d,i) { if(d.snp_color!=undefined){return d.snp_color;}else{return self.SNPsettings.SNPFillColor;} })
                    .attr("r", self.SNPsettings.circleSize)
                    .attr("cx", function(d) { return d.x; })
                    .attr("cy", function(d) { return d.y; });
               }
              if(self.SNPsettings.SNPAnimationDisplay==true){
                svg.append("g")
                    .attr("class", "BioCircosSNP")
                  .selectAll("circle")
                    .data(snp_objects)
                    .enter().append("circle")
                    .attr("id", "BioCircosSNP")
                    .attr("fill", function(d,i) { if(d.snp_color!=undefined){return d.snp_color;}else{return self.SNPsettings.SNPFillColor;} })
                    .attr("r", self.SNPsettings.circleSize)
		    .attr("cx",function(d){
			    return 0;
		    })
		    .attr("cy",function(d){
			    return 0;
		    })
		    .transition()
		    .delay(function(d,i){
			    return i * self.SNPsettings.SNPAnimationDelay;
		    })
		    .duration(self.SNPsettings.SNPAnimationTime)
		    .ease(self.SNPsettings.SNPAnimationType)
                    .attr("cx", function(d) { return d.x; })
                    .attr("cy", function(d) { return d.y; });
               }

                if(self.settings.SNPMouseClickTextFromData=="first"){
                    svg.append("g")
                        .attr("class", "BioCircosSNPlabel")
                      .selectAll("text")
                        .data(snp_objects)
                        .enter().append("text")
                        .attr("class", "dragText")
                        .attr("id", function(d,i) { return "snp"+snpi+"_"+i; })
                        .text(function(d) { return d.snp_chr; })
                        .attr("x", -1000)
                        .attr("y", -1000)
                        .style("opacity", 0)
                        .style("font-size", 1)
                        .attr("fill", self.SNPsettings.SNPFillColor);
                }
                if(self.settings.SNPMouseClickTextFromData=="second"){
                    svg.append("g")
                        .attr("class", "BioCircosSNPlabel")
                      .selectAll("text")
                        .data(snp_objects)
                        .enter().append("text")
                        .attr("class", "dragText")
                        .attr("id", function(d,i) { return "snp"+snpi+"_"+i; })
                        .text(function(d) { return d.snp_pos; })
                        .attr("x", -1000)
                        .attr("y", -1000)
                        .style("opacity", 0)
                        .style("font-size", 1)
                        .attr("fill", self.SNPsettings.SNPFillColor);
                }
                if(self.settings.SNPMouseClickTextFromData=="third"){
                    svg.append("g")
                        .attr("class", "BioCircosSNPlabel")
                      .selectAll("text")
                        .data(snp_objects)
                        .enter().append("text")
                        .attr("class", "dragText")
                        .attr("id", function(d,i) { return "snp"+snpi+"_"+i; })
                        .text(function(d) { return d.snp_val; })
                        .attr("x", -1000)
                        .attr("y", -1000)
                        .style("opacity", 0)
                        .style("font-size", 1)
                        .attr("fill", self.SNPsettings.SNPFillColor);
                }
                if(self.settings.SNPMouseClickTextFromData=="fourth"){
                    svg.append("g")
                        .attr("class", "BioCircosSNPlabel")
                      .selectAll("text")
                        .data(snp_objects)
                        .enter().append("text")
                        .attr("class", "dragText")
                        .attr("id", function(d,i) { return "snp"+snpi+"_"+i; })
                        .text(function(d) { return d.snp_des; })
                        .attr("x", -1000)
                        .attr("y", -1000)
                        .style("opacity", 0)
                        .style("font-size", 1)
                        .attr("fill", self.SNPsettings.SNPFillColor);
                }
            }

            if(self.SNPsettings.PointType=="rect"){
                svg.append("g")
                    .attr("class", "BioCircosSNP")
                  .selectAll("rect")
                    .data(snp_objects)
                    .enter().append("rect")
                    .attr("id", "BioCircosSNP")
                    .attr("x", function(d) { return d.x; })
                    .attr("y", function(d) { return d.y; })
                    .attr("width", self.SNPsettings.rectWidth)
                    .attr("height", self.SNPsettings.rectHeight)
                    //.attr("fill", self.SNPsettings.SNPFillColor);
                    .attr("fill", function(d,i) { if(d.snp_color!=undefined){return d.snp_color;}else{return self.SNPsettings.SNPFillColor;} });
            }

                 self.init_SNPsettings();

        }

        if(self.settings.SNPMouseEvent==true){
            var SNPMouseOnTooltip = d3.select("body")
                .append("div")
                .attr("class","BioCircosSNPTooltip")
                .attr("id","BioCircosSNPTooltip")
                .style("visibility","hidden")
                .style("z-index", 1000);

            var SNPMouseOn = svg.selectAll("#BioCircosSNP");

            if(self.settings.SNPMouseOverDisplay==true){
                SNPMouseOn.on("mouseover",function(d){
                      SNPMouseOnTooltip.html(self.settings.SNPMouseOverTooltipsHtml01+d.snp_chr+self.settings.SNPMouseOverTooltipsHtml02+d.snp_posTooltip+self.settings.SNPMouseOverTooltipsHtml03+d.snp_val+self.settings.SNPMouseOverTooltipsHtml04+d.snp_des+self.settings.SNPMouseOverTooltipsHtml05+d.snp_homo)
                       .style("left", (d3.event.pageX) + "px")
                       .style("top", (d3.event.pageY + 20) + "px")
                       .style("position", self.settings.SNPMouseOverTooltipsPosition)
                       .style("background-color", self.settings.SNPMouseOverTooltipsBackgroundColor)
                       .style("border-style", self.settings.SNPMouseOverTooltipsBorderStyle)
                       .style("border-width", self.settings.SNPMouseOverTooltipsBorderWidth)
                       .style("padding", self.settings.SNPMouseOverTooltipsPadding)
                       .style("border-radius", self.settings.SNPMouseOverTooltipsBorderRadius)
                       .style("visibility","visible")
                    d3.select(this)
                       .style("r",  function(d,i) { if(self.settings.SNPMouseOverCircleSize=="none"){return "";}else{return self.settings.SNPMouseOverCircleSize;} })
                       .style("fill",  function(d,i) { if(self.settings.SNPMouseOverColor=="none"){return "";}else{return self.settings.SNPMouseOverColor;} })
                       .style("opacity",  function(d,i) { if(self.settings.SNPMouseOverCircleOpacity=="none"){return "";}else{return self.settings.SNPMouseOverCircleOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.SNPMouseOverCircleStrokeColor=="none"){return "";}else{return self.settings.SNPMouseOverCircleStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.SNPMouseOverCircleStrokeWidth=="none"){return "";}else{return self.settings.SNPMouseOverCircleStrokeWidth;} });
                })
            }
            if(self.settings.SNPMouseClickDisplay==true){
                SNPMouseOn.on("click",function(d){
                    d3.select(this)
                       .style("r",  function(d,i) { if(self.settings.SNPMouseClickCircleSize=="none"){return "";}else{return self.settings.SNPMouseClickCircleSize;} })
                       .style("fill",  function(d,i) { if(self.settings.SNPMouseClickColor=="none"){return "";}else{return self.settings.SNPMouseClickColor;} })
                       .style("opacity",  function(d,i) { if(self.settings.SNPMouseClickCircleOpacity=="none"){return "";}else{return self.settings.SNPMouseClickCircleOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.SNPMouseClickCircleStrokeColor=="none"){return "";}else{return self.settings.SNPMouseClickCircleStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.SNPMouseClickCircleStrokeWidth=="none"){return "";}else{return self.settings.SNPMouseClickCircleStrokeWidth;} });
                    d3.select("#"+d.snp_click_label)
                        .style("opacity", self.settings.SNPMouseClickTextOpacity)
                        .style("fill", self.settings.SNPMouseClickTextColor)
                        .style("font-size", self.settings.SNPMouseClickTextSize)
                        .attr("x", d.x+self.settings.SNPMouseClickTextPostionX)
                        .attr("y", d.y+self.settings.SNPMouseClickTextPostionY);
                })
            }

            if(self.settings.SNPMouseClickTextDrag==true){
                svg.selectAll("text.dragText").call(drag);
            }

            if(self.settings.SNPMouseDownDisplay==true){
               SNPMouseOn.on("mousedown",function(d){
                   d3.select(this)
                       .style("r", function(d,i) { if(self.settings.SNPMouseDownCircleSize=="none"){return "";}else{return self.settings.SNPMouseDownCircleSize;} })
                       .style("fill", function(d,i) { if(self.settings.SNPMouseDownColor=="none"){return "";}else{return self.settings.SNPMouseDownColor;} })
                       .style("opacity", function(d,i) { if(self.settings.SNPMouseDownCircleOpacity=="none"){return "";}else{return self.settings.SNPMouseDownCircleOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.SNPMouseDownCircleStrokeColor=="none"){return "";}else{return self.settings.SNPMouseDownCircleStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.SNPMouseDownCircleStrokeWidth=="none"){return "";}else{return self.settings.SNPMouseDownCircleStrokeWidth;} });
               })
            }
            if(self.settings.SNPMouseEnterDisplay==true){
               SNPMouseOn.on("mouseenter",function(d){
                   d3.select(this)
                       .style("r", function(d,i) { if(self.settings.SNPMouseEnterCircleSize=="none"){return "";}else{return self.settings.SNPMouseEnterCircleSize;} })
                       .style("fill", function(d,i) { if(self.settings.SNPMouseEnterColor=="none"){return "";}else{return self.settings.SNPMouseEnterColor;} })
                       .style("opacity", function(d,i) { if(self.settings.SNPMouseEnterCircleOpacity=="none"){return "";}else{return self.settings.SNPMouseEnterCircleOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.SNPMouseEnterCircleStrokeColor=="none"){return "";}else{return self.settings.SNPMouseEnterCircleStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.SNPMouseEnterCircleStrokeWidth=="none"){return "";}else{return self.settings.SNPMouseEnterCircleStrokeWidth;} });
               })
            }
            if(self.settings.SNPMouseLeaveDisplay==true){
               SNPMouseOn.on("mouseleave",function(d){
                   SNPMouseOn.style("visibility","hidden");
                   d3.select(this)
                       .style("r", function(d,i) { if(self.settings.SNPMouseLeaveCircleSize=="none"){return "";}else{return self.settings.SNPMouseLeaveCircleSize;} })
                       .style("fill", function(d,i) { if(self.settings.SNPMouseLeaveColor=="none"){return "";}else{return self.settings.SNPMouseLeaveColor;} })
                       .style("opacity", function(d,i) { if(self.settings.SNPMouseLeaveCircleOpacity=="none"){return "";}else{return self.settings.SNPMouseLeaveCircleOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.SNPMouseLeaveCircleStrokeColor=="none"){return "";}else{return self.settings.SNPMouseLeaveCircleStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.SNPMouseLeaveCircleStrokeWidth=="none"){return "";}else{return self.settings.SNPMouseLeaveCircleStrokeWidth;} });
               })
            }
            if(self.settings.SNPMouseUpDisplay==true){
               SNPMouseOn.on("mouseup",function(d){
                   d3.select(this)
                       .style("r", function(d,i) { if(self.settings.SNPMouseUpCircleSize=="none"){return "";}else{return self.settings.SNPMouseUpCircleSize;} })
                       .style("fill", function(d,i) { if(self.settings.SNPMouseUpColor=="none"){return "";}else{return self.settings.SNPMouseUpColor;} })
                       .style("opacity", function(d,i) { if(self.settings.SNPMouseUpCircleOpacity=="none"){return "";}else{return self.settings.SNPMouseUpCircleOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.SNPMouseUpCircleStrokeColor=="none"){return "";}else{return self.settings.SNPMouseUpCircleStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.SNPMouseUpCircleStrokeWidth=="none"){return "";}else{return self.settings.SNPMouseUpCircleStrokeWidth;} });
               })
            }
            if(self.settings.SNPMouseMoveDisplay==true){
               SNPMouseOn.on("mousemove",function(d){
                   d3.select(this)
                       .style("r", function(d,i) { if(self.settings.SNPMouseMoveCircleSize=="none"){return "";}else{return self.settings.SNPMouseMoveCircleSize;} })
                       .style("fill", function(d,i) { if(self.settings.SNPMouseMoveColor=="none"){return "";}else{return self.settings.SNPMouseMoveColor;} })
                       .style("opacity", function(d,i) { if(self.settings.SNPMouseMoveCircleOpacity=="none"){return "";}else{return self.settings.SNPMouseMoveCircleOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.SNPMouseMoveCircleStrokeColor=="none"){return "";}else{return self.settings.SNPMouseMoveCircleStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.SNPMouseMoveCircleStrokeWidth=="none"){return "";}else{return self.settings.SNPMouseMoveCircleStrokeWidth;} });
                   SNPMouseOnTooltip.style("left", (d3.event.pageX) + "px")
                   .style("top", (d3.event.pageY + 20) + "px");
               })
            }
            if(self.settings.SNPMouseOutDisplay==true){
               SNPMouseOn.on("mouseout",function(d){
                   SNPMouseOnTooltip.style("visibility","hidden");
                   d3.select(this)
                       .transition()
                       .duration(self.settings.SNPMouseOutAnimationTime)
                       .style("r", function(d,i) { if(self.settings.SNPMouseOutCircleSize=="none"){return "";}else{return self.settings.SNPMouseOutCircleSize;} })
                       .style("fill", function(d,i) { if(self.settings.SNPMouseOutColor=="none"){return "";}else{return self.settings.SNPMouseOutColor;} })
                       .style("opacity", function(d,i) { if(self.settings.SNPMouseOutCircleOpacity=="none"){return "";}else{return self.settings.SNPMouseOutCircleOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.SNPMouseOutCircleStrokeColor=="none"){return "";}else{return self.settings.SNPMouseOutCircleStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.SNPMouseOutCircleStrokeWidth=="none"){return "";}else{return self.settings.SNPMouseOutCircleStrokeWidth;} });
               });
            }
        }
    }

    if(self.LINK.length > 0){
            function BioCircosLINK(d) {
              return self.LINK[linki].map(function(v, i) {
                var start_k = (d[self.initGenome[v.g1chr]].endAngle - d[self.initGenome[v.g1chr]].startAngle) / d[self.initGenome[v.g1chr]].value;
                var end_k = (d[self.initGenome[v.g2chr]].endAngle - d[self.initGenome[v.g2chr]].startAngle) / d[self.initGenome[v.g2chr]].value;
                return {
                  link_angle1: (v.g1start/2+v.g1end/2) * start_k + d[self.initGenome[v.g1chr]].startAngle,
                  link_angle2: (v.g2start/2+v.g2end/2) * end_k + d[self.initGenome[v.g2chr]].startAngle,
                  link_label1: v.g1name,
                  link_label2: v.g2name,
                  g1start: v.g1start,
                  g1end: v.g1end,
                  g2start: v.g2start,
                  g2end: v.g2end,
                  link_color: v.color,
                  link_pair: v.fusion,
                  g1chr: v.g1chr,
                  g2chr: v.g2chr,
                  link_width: self.LINKsettings.LinkWidth,
                  link_X1: (0 + Math.sin((v.g1start/2+v.g1end/2) * start_k + d[self.initGenome[v.g1chr]].startAngle) * (self.LINKsettings.LinkRadius)),
                  link_Y1: (0 - Math.cos((v.g1start/2+v.g1end/2) * start_k + d[self.initGenome[v.g1chr]].startAngle) * (self.LINKsettings.LinkRadius)),
                  link_X2: (0 + Math.sin((v.g2start/2+v.g2end/2) * end_k + d[self.initGenome[v.g2chr]].startAngle) * (self.LINKsettings.LinkRadius)),
                  link_Y2: (0 - Math.cos((v.g2start/2+v.g2end/2) * end_k + d[self.initGenome[v.g2chr]].startAngle) * (self.LINKsettings.LinkRadius))
                };
              });
            }



            function generatePath(v, d){

              var start_k = (d[self.initGenome[v.g1chr]].endAngle - d[self.initGenome[v.g1chr]].startAngle) / d[self.initGenome[v.g1chr]].value;
              var end_k = (d[self.initGenome[v.g2chr]].endAngle - d[self.initGenome[v.g2chr]].startAngle) / d[self.initGenome[v.g2chr]].value;


                var X1 = self.LINKsettings.LinkRadius * Math.sin(d[self.initGenome[v.g1chr]].startAngle + v.g1start*start_k );
                var Y1 = -self.LINKsettings.LinkRadius * Math.cos(d[self.initGenome[v.g1chr]].startAngle + v.g1start*start_k );

                var X2 = self.LINKsettings.LinkRadius * Math.sin(d[self.initGenome[v.g1chr]].startAngle + v.g1end*start_k );
                var Y2 = -self.LINKsettings.LinkRadius * Math.cos(d[self.initGenome[v.g1chr]].startAngle + v.g1end*start_k );

                var X3 = self.LINKsettings.LinkRadius * Math.sin(d[self.initGenome[v.g2chr]].startAngle + v.g2start*end_k );
                var Y3 = -self.LINKsettings.LinkRadius * Math.cos(d[self.initGenome[v.g2chr]].startAngle + v.g2start*end_k );

                var X4 = self.LINKsettings.LinkRadius * Math.sin(d[self.initGenome[v.g2chr]].startAngle + v.g2end*end_k );
                var Y4 = -self.LINKsettings.LinkRadius * Math.cos(d[self.initGenome[v.g2chr]].startAngle + v.g2end*end_k );

                var mark1X = self.LINKsettings.LinkRadius * Math.sin(d[self.initGenome[v.g1chr]].startAngle + (v.g1end+v.g1start) *start_k/2 );
                var mark1Y = -self.LINKsettings.LinkRadius * Math.cos(d[self.initGenome[v.g1chr]].startAngle + (v.g1end+v.g1start) *start_k/2 );

                var mark2X = self.LINKsettings.LinkRadius * Math.sin(d[self.initGenome[v.g2chr]].startAngle + (v.g2end+v.g1start) *end_k/2 );
                var mark2Y = -self.LINKsettings.LinkRadius * Math.cos(d[self.initGenome[v.g2chr]].startAngle + (v.g2end+v.g1start) *end_k/2 );

                mark2X = (X4+X3)/2
                mark2Y = (Y4+Y3)/2

                var path = "M "+X1+" "+Y1+ " Q 0 0 "+X3+" "+Y3+
                " Q "+mark2X+" "+ mark2Y+" "+X4+" "+Y4+
                " Q 0 0 "+X2+" "+Y2+
                " Q "+mark1X+" "+mark1Y+" "+X1+" "+Y1;

                // var path = "M "+X1+" "+Y1+ " Q 0 0 "+X4+" "+Y4+
                // " Q "+mark2X+" "+ mark2Y+" "+X3+" "+Y3+
                // " Q 0 0 "+X2+" "+Y2+
                // " Q "+mark1X+" "+mark1Y+" "+X1+" "+Y1;

                return path;

            }



        for(var linki=0; linki<self.LINK.length; linki++){
            self.update_LINKsettings(self.LINKConfig[linki]);

            var link_objects = BioCircosLINK(chord.groups())

            if(self.LINKsettings.displayLinkAxis==true){
                svg.append("g")
                    .attr("class", "LINKAxis")
                    .selectAll("circle")
                    .data(["0"])
                    .enter().append("circle")
                    .attr("id", "LINKAxis")
                    .attr("cx", 0)
                    .attr("cy", 0)
                    .attr("fill", "none")
                    //.attr("stroke",self.LINKsettings.LinkAxisColor)
                    .attr("stroke", function(d){return d.color})
                    .attr("stroke-width",self.LINKsettings.LinkAxisWidth)
                    .attr("r", function(d) { return self.LINKsettings.LinkRadius+self.LINKsettings.LinkAxisPad; });
            }


            var Link_svg = svg.append("g")
                .attr("class", "BioCircosLINK")
              .selectAll("path")
                .data(link_objects)
                .enter().append("path")
                .attr("d", function(d) { return generatePath(d, chord.groups()) })
                .attr("class", function(d){ return "BioCircosLINK chr"+d.g1chr+" chr"+d.g2chr;})
                .attr("fill-rule", "evenodd")
                .attr("fill",function(d){return d.link_color})
                .attr("fill-opacity", 0.5)

            if(self.LINKsettings.displayLinkLabel==true){
            svg.append("g")
                  .attr("class", "BioCircosLINKLabel")
              .selectAll("text")
                .data(link_objects)
                .enter().append("text")
                .attr("transform", function(d) {
                  return "rotate(" + (d.link_angle2 * 180 / Math.PI - 90) + ")"
                      + "translate(" + (self.LINKsettings.LinkRadius+self.LINKsettings.LinkAxisPad) + ",0)";
                })
                .attr("class", "BioCircosLINKLabel")
                .attr("id", function(d) { return d.link_pair; })
                .attr("x", self.LINKsettings.LinkLabelPad)
                .attr("dy", ".35em")
                .attr("fill", self.LINKsettings.LinkLabelColor)
                .style("font-size",self.LINKsettings.LinkLabelSize)
                .text(function(d) { return d.link_pair; });
            }
            self.init_LINKsettings();

            function draglinkmove(d) {
                d3.select(this)
                  .attr("x", d3.event.x )
                  .attr("y", d3.event.y );
            }

            var draglinklabel = d3.behavior.drag()
                      .on("drag", draglinkmove);

            if(self.settings.LINKLabelDragEvent==true){
                svg.selectAll("text.BioCircosLINKLabel").call(draglinklabel);
            }

        }

        if(self.settings.LINKMouseEvent==true){

            var LINKMouseOnTooltip = d3.select("body")
                .append("div")
                .attr("class","BioCircosLINKTooltip")
                .attr("id","BioCircosLINKTooltip")
                .style("visibility","hidden");

            var LINKMouseOn = svg.selectAll("path.BioCircosLINK");

            if(self.settings.LINKMouseOverDisplay==true){
                LINKMouseOn.on("mouseover",function(d){
                      LINKMouseOnTooltip.html('<div><p>Note: '+d.link_pair+'<p>'+
                      '<div class="linkTooltipEnd">'+
                        '<p>Chr: '+d.g1chr+'</p>'+
                        '<p>Start: '+d.g1start+'</p>'+
                        '<p>End: '+d.g1end+'</p>'+
                      '</div>'+
                      '<div class="linkTooltipEnd">'+
                        '<p>Chr: '+d.g2chr+'</p>'+
                        '<p>Start: '+d.g2start+'</p>'+
                        '<p>End: '+d.g2end+'</p>'+
                      '</div>'+
                      '</div>')
                       .style("left", (d3.event.pageX) + "px")
                       .style("top", (d3.event.pageY + 20) + "px")
                       .style("position", self.settings.LINKMouseOverTooltipsPosition)
                       .style("background-color", "rgb(191, 224, 250)")
                       .style("border-color", "rgb(23, 101, 163)")
                       .style("border-style", self.settings.LINKMouseOverTooltipsBorderStyle)
                       .style("padding", self.settings.LINKMouseOverTooltipsPadding)
                       .style("border-radius", "5px")
                       .style("visibility","visible")
                       .style("z-index","1000")
                       .style("opacity", "0.5")
                    d3.select(this)
                       .style("stroke", function(d,i) { if(self.settings.LINKMouseOverStrokeColor=="none"){return "";}else{return self.settings.LINKMouseOverStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.LINKMouseOverStrokeWidth=="none"){return "";}else{return self.settings.LINKMouseOverStrokeWidth;} });
                })
            }
            if(self.settings.LINKMouseClickDisplay==true){
                LINKMouseOn.on("click",function(d){
                    d3.select(this)
                       .style("opacity", function(d,i) { if(self.settings.LINKMouseClickOpacity=="none"){return "";}else{return self.settings.LINKMouseClickOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.LINKMouseClickStrokeColor=="none"){return "";}else{return self.settings.LINKMouseClickStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.LINKMouseClickStrokeWidth=="none"){return "";}else{return self.settings.LINKMouseClickStrokeWidth;} });
                })
            }
            if(self.settings.LINKMouseDownDisplay==true){
               LINKMouseOn.on("mousedown",function(d){
                   d3.select(this)
                       .style("opacity", function(d,i) { if(self.settings.LINKMouseDownOpacity=="none"){return "";}else{return self.settings.LINKMouseDownOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.LINKMouseDownStrokeColor=="none"){return "";}else{return self.settings.LINKMouseDownStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.LINKMouseDownStrokeWidth=="none"){return "";}else{return self.settings.LINKMouseDownStrokeWidth;} });
               })
            }
            if(self.settings.LINKMouseEnterDisplay==true){
               LINKMouseOn.on("mouseenter",function(d){
                   d3.select(this)
                       .style("opacity", function(d,i) { if(self.settings.LINKMouseEnterOpacity=="none"){return "";}else{return self.settings.LINKMouseEnterOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.LINKMouseEnterStrokeColor=="none"){return "";}else{return self.settings.LINKMouseEnterStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.LINKMouseEnterStrokeWidth=="none"){return "";}else{return self.settings.LINKMouseEnterStrokeWidth;} });
               })
            }
            if(self.settings.LINKMouseLeaveDisplay==true){
               LINKMouseOn.on("mouseleave",function(d){
                   LINKMouseOnTooltip.style("opacity",0.0);
                   d3.select(this)
                       .style("opacity", function(d,i) { if(self.settings.LINKMouseLeaveOpacity=="none"){return "";}else{return self.settings.LINKMouseLeaveOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.LINKMouseLeaveStrokeColor=="none"){return "";}else{return self.settings.LINKMouseLeaveStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.LINKMouseLeaveStrokeWidth=="none"){return "";}else{return self.settings.LINKMouseLeaveStrokeWidth;} });
               })
            }
            if(self.settings.LINKMouseUpDisplay==true){
               LINKMouseOn.on("mouseup",function(d){
                   d3.select(this)
                       .style("opacity", function(d,i) { if(self.settings.LINKMouseUpOpacity=="none"){return "";}else{return self.settings.LINKMouseUpOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.LINKMouseUpStrokeColor=="none"){return "";}else{return self.settings.LINKMouseUpStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.LINKMouseUpStrokeWidth=="none"){return "";}else{return self.settings.LINKMouseUpStrokeWidth;} });
               })
            }
            if(self.settings.LINKMouseMoveDisplay==true){
               LINKMouseOn.on("mousemove",function(d){
                   d3.select(this)
                       .style("opacity", function(d,i) { if(self.settings.LINKMouseMoveOpacity=="none"){return "";}else{return self.settings.LINKMouseMoveOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.LINKMouseMoveStrokeColor=="none"){return "";}else{return self.settings.LINKMouseMoveStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.LINKMouseMoveStrokeWidth=="none"){return "";}else{return self.settings.LINKMouseMoveStrokeWidth;} });
                   LINKMouseOnTooltip.style("left", (d3.event.pageX) + "px")
                   .style("top", (d3.event.pageY + 20) + "px");
               })
            }
            if(self.settings.LINKMouseOutDisplay==true){
               LINKMouseOn.on("mouseout",function(d){
                   LINKMouseOnTooltip.style("opacity",0.0);
                   d3.select(this)
                       .transition()
                       .duration(self.settings.LINKMouseOutAnimationTime)
                       .style("opacity", function(d,i) { if(self.settings.LINKMouseOutOpacity=="none"){return "";}else{return self.settings.LINKMouseOutOpacity;} })
                       .style("stroke", function(d,i) { if(self.settings.LINKMouseOutStrokeColor=="none"){return "";}else{return self.settings.LINKMouseOutStrokeColor;} })
                       .style("stroke-width", function(d,i) { if(self.settings.LINKMouseOutStrokeWidth=="none"){return "";}else{return self.settings.LINKMouseOutStrokeWidth;} });
               });
            }

        }
    }

    }
}(jQuery));


/***/ }),

/***/ "./lib/d3.js":
/*!*******************!*\
  !*** ./lib/d3.js ***!
  \*******************/
/*! no static exports found */
/***/ (function(module, exports) {

d3 = function() {
  var d3 = {
    version: "3.3.10"
  };
  if (!Date.now) Date.now = function() {
    return +new Date();
  };
  var d3_arraySlice = [].slice, d3_array = function(list) {
    return d3_arraySlice.call(list);
  };
  var d3_document = document, d3_documentElement = d3_document.documentElement, d3_window = window;
  try {
    d3_array(d3_documentElement.childNodes)[0].nodeType;
  } catch (e) {
    d3_array = function(list) {
      var i = list.length, array = new Array(i);
      while (i--) array[i] = list[i];
      return array;
    };
  }
  try {
    d3_document.createElement("div").style.setProperty("opacity", 0, "");
  } catch (error) {
    var d3_element_prototype = d3_window.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = d3_window.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;
    d3_element_prototype.setAttribute = function(name, value) {
      d3_element_setAttribute.call(this, name, value + "");
    };
    d3_element_prototype.setAttributeNS = function(space, local, value) {
      d3_element_setAttributeNS.call(this, space, local, value + "");
    };
    d3_style_prototype.setProperty = function(name, value, priority) {
      d3_style_setProperty.call(this, name, value + "", priority);
    };
  }
  d3.ascending = function(a, b) {
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
  };
  d3.descending = function(a, b) {
    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
  };
  d3.min = function(array, f) {
    var i = -1, n = array.length, a, b;
    if (arguments.length === 1) {
      while (++i < n && !((a = array[i]) != null && a <= a)) a = undefined;
      while (++i < n) if ((b = array[i]) != null && a > b) a = b;
    } else {
      while (++i < n && !((a = f.call(array, array[i], i)) != null && a <= a)) a = undefined;
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;
    }
    return a;
  };
  d3.max = function(array, f) {
    var i = -1, n = array.length, a, b;
    if (arguments.length === 1) {
      while (++i < n && !((a = array[i]) != null && a <= a)) a = undefined;
      while (++i < n) if ((b = array[i]) != null && b > a) a = b;
    } else {
      while (++i < n && !((a = f.call(array, array[i], i)) != null && a <= a)) a = undefined;
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;
    }
    return a;
  };
  d3.extent = function(array, f) {
    var i = -1, n = array.length, a, b, c;
    if (arguments.length === 1) {
      while (++i < n && !((a = c = array[i]) != null && a <= a)) a = c = undefined;
      while (++i < n) if ((b = array[i]) != null) {
        if (a > b) a = b;
        if (c < b) c = b;
      }
    } else {
      while (++i < n && !((a = c = f.call(array, array[i], i)) != null && a <= a)) a = undefined;
      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {
        if (a > b) a = b;
        if (c < b) c = b;
      }
    }
    return [ a, c ];
  };
  d3.sum = function(array, f) {
    var s = 0, n = array.length, a, i = -1;
    if (arguments.length === 1) {
      while (++i < n) if (!isNaN(a = +array[i])) s += a;
    } else {
      while (++i < n) if (!isNaN(a = +f.call(array, array[i], i))) s += a;
    }
    return s;
  };
  function d3_number(x) {
    return x != null && !isNaN(x);
  }
  d3.mean = function(array, f) {
    var n = array.length, a, m = 0, i = -1, j = 0;
    if (arguments.length === 1) {
      while (++i < n) if (d3_number(a = array[i])) m += (a - m) / ++j;
    } else {
      while (++i < n) if (d3_number(a = f.call(array, array[i], i))) m += (a - m) / ++j;
    }
    return j ? m : undefined;
  };
  d3.quantile = function(values, p) {
    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;
    return e ? v + e * (values[h] - v) : v;
  };
  d3.median = function(array, f) {
    if (arguments.length > 1) array = array.map(f);
    array = array.filter(d3_number);
    return array.length ? d3.quantile(array.sort(d3.ascending), .5) : undefined;
  };
  d3.bisector = function(f) {
    return {
      left: function(a, x, lo, hi) {
        if (arguments.length < 3) lo = 0;
        if (arguments.length < 4) hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (f.call(a, a[mid], mid) < x) lo = mid + 1; else hi = mid;
        }
        return lo;
      },
      right: function(a, x, lo, hi) {
        if (arguments.length < 3) lo = 0;
        if (arguments.length < 4) hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (x < f.call(a, a[mid], mid)) hi = mid; else lo = mid + 1;
        }
        return lo;
      }
    };
  };
  var d3_bisector = d3.bisector(function(d) {
    return d;
  });
  d3.bisectLeft = d3_bisector.left;
  d3.bisect = d3.bisectRight = d3_bisector.right;
  d3.shuffle = function(array) {
    var m = array.length, t, i;
    while (m) {
      i = Math.random() * m-- | 0;
      t = array[m], array[m] = array[i], array[i] = t;
    }
    return array;
  };
  d3.permute = function(array, indexes) {
    var i = indexes.length, permutes = new Array(i);
    while (i--) permutes[i] = array[indexes[i]];
    return permutes;
  };
  d3.pairs = function(array) {
    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);
    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];
    return pairs;
  };
  d3.zip = function() {
    if (!(n = arguments.length)) return [];
    for (var i = -1, m = d3.min(arguments, d3_zipLength), zips = new Array(m); ++i < m; ) {
      for (var j = -1, n, zip = zips[i] = new Array(n); ++j < n; ) {
        zip[j] = arguments[j][i];
      }
    }
    return zips;
  };
  function d3_zipLength(d) {
    return d.length;
  }
  d3.transpose = function(matrix) {
    return d3.zip.apply(d3, matrix);
  };
  d3.keys = function(map) {
    var keys = [];
    for (var key in map) keys.push(key);
    return keys;
  };
  d3.values = function(map) {
    var values = [];
    for (var key in map) values.push(map[key]);
    return values;
  };
  d3.entries = function(map) {
    var entries = [];
    for (var key in map) entries.push({
      key: key,
      value: map[key]
    });
    return entries;
  };
  d3.merge = function(arrays) {
    var n = arrays.length, m, i = -1, j = 0, merged, array;
    while (++i < n) j += arrays[i].length;
    merged = new Array(j);
    while (--n >= 0) {
      array = arrays[n];
      m = array.length;
      while (--m >= 0) {
        merged[--j] = array[m];
      }
    }
    return merged;
  };
  var abs = Math.abs;
  d3.range = function(start, stop, step) {
    if (arguments.length < 3) {
      step = 1;
      if (arguments.length < 2) {
        stop = start;
        start = 0;
      }
    }
    if ((stop - start) / step === Infinity) throw new Error("infinite range");
    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;
    start *= k, stop *= k, step *= k;
    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);
    return range;
  };
  function d3_range_integerScale(x) {
    var k = 1;
    while (x * k % 1) k *= 10;
    return k;
  }
  function d3_class(ctor, properties) {
    try {
      for (var key in properties) {
        Object.defineProperty(ctor.prototype, key, {
          value: properties[key],
          enumerable: false
        });
      }
    } catch (e) {
      ctor.prototype = properties;
    }
  }
  d3.map = function(object) {
    var map = new d3_Map();
    if (object instanceof d3_Map) object.forEach(function(key, value) {
      map.set(key, value);
    }); else for (var key in object) map.set(key, object[key]);
    return map;
  };
  function d3_Map() {}
  d3_class(d3_Map, {
    has: function(key) {
      return d3_map_prefix + key in this;
    },
    get: function(key) {
      return this[d3_map_prefix + key];
    },
    set: function(key, value) {
      return this[d3_map_prefix + key] = value;
    },
    remove: function(key) {
      key = d3_map_prefix + key;
      return key in this && delete this[key];
    },
    keys: function() {
      var keys = [];
      this.forEach(function(key) {
        keys.push(key);
      });
      return keys;
    },
    values: function() {
      var values = [];
      this.forEach(function(key, value) {
        values.push(value);
      });
      return values;
    },
    entries: function() {
      var entries = [];
      this.forEach(function(key, value) {
        entries.push({
          key: key,
          value: value
        });
      });
      return entries;
    },
    forEach: function(f) {
      for (var key in this) {
        if (key.charCodeAt(0) === d3_map_prefixCode) {
          f.call(this, key.substring(1), this[key]);
        }
      }
    }
  });
  var d3_map_prefix = "\x00", d3_map_prefixCode = d3_map_prefix.charCodeAt(0);
  d3.nest = function() {
    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;
    function map(mapType, array, depth) {
      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;
      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;
      while (++i < n) {
        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {
          values.push(object);
        } else {
          valuesByKey.set(keyValue, [ object ]);
        }
      }
      if (mapType) {
        object = mapType();
        setter = function(keyValue, values) {
          object.set(keyValue, map(mapType, values, depth));
        };
      } else {
        object = {};
        setter = function(keyValue, values) {
          object[keyValue] = map(mapType, values, depth);
        };
      }
      valuesByKey.forEach(setter);
      return object;
    }
    function entries(map, depth) {
      if (depth >= keys.length) return map;
      var array = [], sortKey = sortKeys[depth++];
      map.forEach(function(key, keyMap) {
        array.push({
          key: key,
          values: entries(keyMap, depth)
        });
      });
      return sortKey ? array.sort(function(a, b) {
        return sortKey(a.key, b.key);
      }) : array;
    }
    nest.map = function(array, mapType) {
      return map(mapType, array, 0);
    };
    nest.entries = function(array) {
      return entries(map(d3.map, array, 0), 0);
    };
    nest.key = function(d) {
      keys.push(d);
      return nest;
    };
    nest.sortKeys = function(order) {
      sortKeys[keys.length - 1] = order;
      return nest;
    };
    nest.sortValues = function(order) {
      sortValues = order;
      return nest;
    };
    nest.rollup = function(f) {
      rollup = f;
      return nest;
    };
    return nest;
  };
  d3.set = function(array) {
    var set = new d3_Set();
    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);
    return set;
  };
  function d3_Set() {}
  d3_class(d3_Set, {
    has: function(value) {
      return d3_map_prefix + value in this;
    },
    add: function(value) {
      this[d3_map_prefix + value] = true;
      return value;
    },
    remove: function(value) {
      value = d3_map_prefix + value;
      return value in this && delete this[value];
    },
    values: function() {
      var values = [];
      this.forEach(function(value) {
        values.push(value);
      });
      return values;
    },
    forEach: function(f) {
      for (var value in this) {
        if (value.charCodeAt(0) === d3_map_prefixCode) {
          f.call(this, value.substring(1));
        }
      }
    }
  });
  d3.behavior = {};
  d3.rebind = function(target, source) {
    var i = 1, n = arguments.length, method;
    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);
    return target;
  };
  function d3_rebind(target, source, method) {
    return function() {
      var value = method.apply(source, arguments);
      return value === source ? target : value;
    };
  }
  function d3_vendorSymbol(object, name) {
    if (name in object) return name;
    name = name.charAt(0).toUpperCase() + name.substring(1);
    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {
      var prefixName = d3_vendorPrefixes[i] + name;
      if (prefixName in object) return prefixName;
    }
  }
  var d3_vendorPrefixes = [ "webkit", "ms", "moz", "Moz", "o", "O" ];
  function d3_noop() {}
  d3.dispatch = function() {
    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;
    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
    return dispatch;
  };
  function d3_dispatch() {}
  d3_dispatch.prototype.on = function(type, listener) {
    var i = type.indexOf("."), name = "";
    if (i >= 0) {
      name = type.substring(i + 1);
      type = type.substring(0, i);
    }
    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);
    if (arguments.length === 2) {
      if (listener == null) for (type in this) {
        if (this.hasOwnProperty(type)) this[type].on(name, null);
      }
      return this;
    }
  };
  function d3_dispatch_event(dispatch) {
    var listeners = [], listenerByName = new d3_Map();
    function event() {
      var z = listeners, i = -1, n = z.length, l;
      while (++i < n) if (l = z[i].on) l.apply(this, arguments);
      return dispatch;
    }
    event.on = function(name, listener) {
      var l = listenerByName.get(name), i;
      if (arguments.length < 2) return l && l.on;
      if (l) {
        l.on = null;
        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));
        listenerByName.remove(name);
      }
      if (listener) listeners.push(listenerByName.set(name, {
        on: listener
      }));
      return dispatch;
    };
    return event;
  }
  d3.event = null;
  function d3_eventPreventDefault() {
    d3.event.preventDefault();
  }
  function d3_eventSource() {
    var e = d3.event, s;
    while (s = e.sourceEvent) e = s;
    return e;
  }
  function d3_eventDispatch(target) {
    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;
    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
    dispatch.of = function(thiz, argumentz) {
      return function(e1) {
        try {
          var e0 = e1.sourceEvent = d3.event;
          e1.target = target;
          d3.event = e1;
          dispatch[e1.type].apply(thiz, argumentz);
        } finally {
          d3.event = e0;
        }
      };
    };
    return dispatch;
  }
  d3.requote = function(s) {
    return s.replace(d3_requote_re, "\\$&");
  };
  var d3_requote_re = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
  var d3_subclass = {}.__proto__ ? function(object, prototype) {
    object.__proto__ = prototype;
  } : function(object, prototype) {
    for (var property in prototype) object[property] = prototype[property];
  };
  function d3_selection(groups) {
    d3_subclass(groups, d3_selectionPrototype);
    return groups;
  }
  var d3_select = function(s, n) {
    return n.querySelector(s);
  }, d3_selectAll = function(s, n) {
    return n.querySelectorAll(s);
  }, d3_selectMatcher = d3_documentElement[d3_vendorSymbol(d3_documentElement, "matchesSelector")], d3_selectMatches = function(n, s) {
    return d3_selectMatcher.call(n, s);
  };
  if (typeof Sizzle === "function") {
    d3_select = function(s, n) {
      return Sizzle(s, n)[0] || null;
    };
    d3_selectAll = function(s, n) {
      return Sizzle.uniqueSort(Sizzle(s, n));
    };
    d3_selectMatches = Sizzle.matchesSelector;
  }
  d3.selection = function() {
    return d3_selectionRoot;
  };
  var d3_selectionPrototype = d3.selection.prototype = [];
  d3_selectionPrototype.select = function(selector) {
    var subgroups = [], subgroup, subnode, group, node;
    selector = d3_selection_selector(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      subgroup.parentNode = (group = this[j]).parentNode;
      for (var i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroup.push(subnode = selector.call(node, node.__data__, i, j));
          if (subnode && "__data__" in node) subnode.__data__ = node.__data__;
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_selector(selector) {
    return typeof selector === "function" ? selector : function() {
      return d3_select(selector, this);
    };
  }
  d3_selectionPrototype.selectAll = function(selector) {
    var subgroups = [], subgroup, node;
    selector = d3_selection_selectorAll(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));
          subgroup.parentNode = node;
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_selectorAll(selector) {
    return typeof selector === "function" ? selector : function() {
      return d3_selectAll(selector, this);
    };
  }
  var d3_nsPrefix = {
    svg: "http://www.w3.org/2000/svg",
    xhtml: "http://www.w3.org/1999/xhtml",
    xlink: "http://www.w3.org/1999/xlink",
    xml: "http://www.w3.org/XML/1998/namespace",
    xmlns: "http://www.w3.org/2000/xmlns/"
  };
  d3.ns = {
    prefix: d3_nsPrefix,
    qualify: function(name) {
      var i = name.indexOf(":"), prefix = name;
      if (i >= 0) {
        prefix = name.substring(0, i);
        name = name.substring(i + 1);
      }
      return d3_nsPrefix.hasOwnProperty(prefix) ? {
        space: d3_nsPrefix[prefix],
        local: name
      } : name;
    }
  };
  d3_selectionPrototype.attr = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") {
        var node = this.node();
        name = d3.ns.qualify(name);
        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);
      }
      for (value in name) this.each(d3_selection_attr(value, name[value]));
      return this;
    }
    return this.each(d3_selection_attr(name, value));
  };
  function d3_selection_attr(name, value) {
    name = d3.ns.qualify(name);
    function attrNull() {
      this.removeAttribute(name);
    }
    function attrNullNS() {
      this.removeAttributeNS(name.space, name.local);
    }
    function attrConstant() {
      this.setAttribute(name, value);
    }
    function attrConstantNS() {
      this.setAttributeNS(name.space, name.local, value);
    }
    function attrFunction() {
      var x = value.apply(this, arguments);
      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);
    }
    function attrFunctionNS() {
      var x = value.apply(this, arguments);
      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);
    }
    return value == null ? name.local ? attrNullNS : attrNull : typeof value === "function" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;
  }
  function d3_collapse(s) {
    return s.trim().replace(/\s+/g, " ");
  }
  d3_selectionPrototype.classed = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") {
        var node = this.node(), n = (name = name.trim().split(/^|\s+/g)).length, i = -1;
        if (value = node.classList) {
          while (++i < n) if (!value.contains(name[i])) return false;
        } else {
          value = node.getAttribute("class");
          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;
        }
        return true;
      }
      for (value in name) this.each(d3_selection_classed(value, name[value]));
      return this;
    }
    return this.each(d3_selection_classed(name, value));
  };
  function d3_selection_classedRe(name) {
    return new RegExp("(?:^|\\s+)" + d3.requote(name) + "(?:\\s+|$)", "g");
  }
  function d3_selection_classed(name, value) {
    name = name.trim().split(/\s+/).map(d3_selection_classedName);
    var n = name.length;
    function classedConstant() {
      var i = -1;
      while (++i < n) name[i](this, value);
    }
    function classedFunction() {
      var i = -1, x = value.apply(this, arguments);
      while (++i < n) name[i](this, x);
    }
    return typeof value === "function" ? classedFunction : classedConstant;
  }
  function d3_selection_classedName(name) {
    var re = d3_selection_classedRe(name);
    return function(node, value) {
      if (c = node.classList) return value ? c.add(name) : c.remove(name);
      var c = node.getAttribute("class") || "";
      if (value) {
        re.lastIndex = 0;
        if (!re.test(c)) node.setAttribute("class", d3_collapse(c + " " + name));
      } else {
        node.setAttribute("class", d3_collapse(c.replace(re, " ")));
      }
    };
  }
  d3_selectionPrototype.style = function(name, value, priority) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof name !== "string") {
        if (n < 2) value = "";
        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));
        return this;
      }
      if (n < 2) return d3_window.getComputedStyle(this.node(), null).getPropertyValue(name);
      priority = "";
    }
    return this.each(d3_selection_style(name, value, priority));
  };
  function d3_selection_style(name, value, priority) {
    function styleNull() {
      this.style.removeProperty(name);
    }
    function styleConstant() {
      this.style.setProperty(name, value, priority);
    }
    function styleFunction() {
      var x = value.apply(this, arguments);
      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);
    }
    return value == null ? styleNull : typeof value === "function" ? styleFunction : styleConstant;
  }
  d3_selectionPrototype.property = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") return this.node()[name];
      for (value in name) this.each(d3_selection_property(value, name[value]));
      return this;
    }
    return this.each(d3_selection_property(name, value));
  };
  function d3_selection_property(name, value) {
    function propertyNull() {
      delete this[name];
    }
    function propertyConstant() {
      this[name] = value;
    }
    function propertyFunction() {
      var x = value.apply(this, arguments);
      if (x == null) delete this[name]; else this[name] = x;
    }
    return value == null ? propertyNull : typeof value === "function" ? propertyFunction : propertyConstant;
  }
  d3_selectionPrototype.text = function(value) {
    return arguments.length ? this.each(typeof value === "function" ? function() {
      var v = value.apply(this, arguments);
      this.textContent = v == null ? "" : v;
    } : value == null ? function() {
      this.textContent = "";
    } : function() {
      this.textContent = value;
    }) : this.node().textContent;
  };
  d3_selectionPrototype.html = function(value) {
    return arguments.length ? this.each(typeof value === "function" ? function() {
      var v = value.apply(this, arguments);
      this.innerHTML = v == null ? "" : v;
    } : value == null ? function() {
      this.innerHTML = "";
    } : function() {
      this.innerHTML = value;
    }) : this.node().innerHTML;
  };
  d3_selectionPrototype.append = function(name) {
    name = d3_selection_creator(name);
    return this.select(function() {
      return this.appendChild(name.apply(this, arguments));
    });
  };
  function d3_selection_creator(name) {
    return typeof name === "function" ? name : (name = d3.ns.qualify(name)).local ? function() {
      return this.ownerDocument.createElementNS(name.space, name.local);
    } : function() {
      return this.ownerDocument.createElementNS(this.namespaceURI, name);
    };
  }
  d3_selectionPrototype.insert = function(name, before) {
    name = d3_selection_creator(name);
    before = d3_selection_selector(before);
    return this.select(function() {
      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);
    });
  };
  d3_selectionPrototype.remove = function() {
    return this.each(function() {
      var parent = this.parentNode;
      if (parent) parent.removeChild(this);
    });
  };
  d3_selectionPrototype.data = function(value, key) {
    var i = -1, n = this.length, group, node;
    if (!arguments.length) {
      value = new Array(n = (group = this[0]).length);
      while (++i < n) {
        if (node = group[i]) {
          value[i] = node.__data__;
        }
      }
      return value;
    }
    function bind(group, groupData) {
      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;
      if (key) {
        var nodeByKeyValue = new d3_Map(), dataByKeyValue = new d3_Map(), keyValues = [], keyValue;
        for (i = -1; ++i < n; ) {
          keyValue = key.call(node = group[i], node.__data__, i);
          if (nodeByKeyValue.has(keyValue)) {
            exitNodes[i] = node;
          } else {
            nodeByKeyValue.set(keyValue, node);
          }
          keyValues.push(keyValue);
        }
        for (i = -1; ++i < m; ) {
          keyValue = key.call(groupData, nodeData = groupData[i], i);
          if (node = nodeByKeyValue.get(keyValue)) {
            updateNodes[i] = node;
            node.__data__ = nodeData;
          } else if (!dataByKeyValue.has(keyValue)) {
            enterNodes[i] = d3_selection_dataNode(nodeData);
          }
          dataByKeyValue.set(keyValue, nodeData);
          nodeByKeyValue.remove(keyValue);
        }
        for (i = -1; ++i < n; ) {
          if (nodeByKeyValue.has(keyValues[i])) {
            exitNodes[i] = group[i];
          }
        }
      } else {
        for (i = -1; ++i < n0; ) {
          node = group[i];
          nodeData = groupData[i];
          if (node) {
            node.__data__ = nodeData;
            updateNodes[i] = node;
          } else {
            enterNodes[i] = d3_selection_dataNode(nodeData);
          }
        }
        for (;i < m; ++i) {
          enterNodes[i] = d3_selection_dataNode(groupData[i]);
        }
        for (;i < n; ++i) {
          exitNodes[i] = group[i];
        }
      }
      enterNodes.update = updateNodes;
      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;
      enter.push(enterNodes);
      update.push(updateNodes);
      exit.push(exitNodes);
    }
    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);
    if (typeof value === "function") {
      while (++i < n) {
        bind(group = this[i], value.call(group, group.parentNode.__data__, i));
      }
    } else {
      while (++i < n) {
        bind(group = this[i], value);
      }
    }
    update.enter = function() {
      return enter;
    };
    update.exit = function() {
      return exit;
    };
    return update;
  };
  function d3_selection_dataNode(data) {
    return {
      __data__: data
    };
  }
  d3_selectionPrototype.datum = function(value) {
    return arguments.length ? this.property("__data__", value) : this.property("__data__");
  };
  d3_selectionPrototype.filter = function(filter) {
    var subgroups = [], subgroup, group, node;
    if (typeof filter !== "function") filter = d3_selection_filter(filter);
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      subgroup.parentNode = (group = this[j]).parentNode;
      for (var i = 0, n = group.length; i < n; i++) {
        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
          subgroup.push(node);
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_filter(selector) {
    return function() {
      return d3_selectMatches(this, selector);
    };
  }
  d3_selectionPrototype.order = function() {
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
        if (node = group[i]) {
          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
          next = node;
        }
      }
    }
    return this;
  };
  d3_selectionPrototype.sort = function(comparator) {
    comparator = d3_selection_sortComparator.apply(this, arguments);
    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);
    return this.order();
  };
  function d3_selection_sortComparator(comparator) {
    if (!arguments.length) comparator = d3.ascending;
    return function(a, b) {
      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;
    };
  }
  d3_selectionPrototype.each = function(callback) {
    return d3_selection_each(this, function(node, i, j) {
      callback.call(node, node.__data__, i, j);
    });
  };
  function d3_selection_each(groups, callback) {
    for (var j = 0, m = groups.length; j < m; j++) {
      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {
        if (node = group[i]) callback(node, i, j);
      }
    }
    return groups;
  }
  d3_selectionPrototype.call = function(callback) {
    var args = d3_array(arguments);
    callback.apply(args[0] = this, args);
    return this;
  };
  d3_selectionPrototype.empty = function() {
    return !this.node();
  };
  d3_selectionPrototype.node = function() {
    for (var j = 0, m = this.length; j < m; j++) {
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        var node = group[i];
        if (node) return node;
      }
    }
    return null;
  };
  d3_selectionPrototype.size = function() {
    var n = 0;
    this.each(function() {
      ++n;
    });
    return n;
  };
  function d3_selection_enter(selection) {
    d3_subclass(selection, d3_selection_enterPrototype);
    return selection;
  }
  var d3_selection_enterPrototype = [];
  d3.selection.enter = d3_selection_enter;
  d3.selection.enter.prototype = d3_selection_enterPrototype;
  d3_selection_enterPrototype.append = d3_selectionPrototype.append;
  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;
  d3_selection_enterPrototype.node = d3_selectionPrototype.node;
  d3_selection_enterPrototype.call = d3_selectionPrototype.call;
  d3_selection_enterPrototype.size = d3_selectionPrototype.size;
  d3_selection_enterPrototype.select = function(selector) {
    var subgroups = [], subgroup, subnode, upgroup, group, node;
    for (var j = -1, m = this.length; ++j < m; ) {
      upgroup = (group = this[j]).update;
      subgroups.push(subgroup = []);
      subgroup.parentNode = group.parentNode;
      for (var i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));
          subnode.__data__ = node.__data__;
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_selection(subgroups);
  };
  d3_selection_enterPrototype.insert = function(name, before) {
    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);
    return d3_selectionPrototype.insert.call(this, name, before);
  };
  function d3_selection_enterInsertBefore(enter) {
    var i0, j0;
    return function(d, i, j) {
      var group = enter[j].update, n = group.length, node;
      if (j != j0) j0 = j, i0 = 0;
      if (i >= i0) i0 = i + 1;
      while (!(node = group[i0]) && ++i0 < n) ;
      return node;
    };
  }
  d3_selectionPrototype.transition = function() {
    var id = d3_transitionInheritId || ++d3_transitionId, subgroups = [], subgroup, node, transition = d3_transitionInherit || {
      time: Date.now(),
      ease: d3_ease_cubicInOut,
      delay: 0,
      duration: 250
    };
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) d3_transitionNode(node, i, id, transition);
        subgroup.push(node);
      }
    }
    return d3_transition(subgroups, id);
  };
  d3_selectionPrototype.interrupt = function() {
    return this.each(d3_selection_interrupt);
  };
  function d3_selection_interrupt() {
    var lock = this.__transition__;
    if (lock) ++lock.active;
  }
  d3.select = function(node) {
    var group = [ typeof node === "string" ? d3_select(node, d3_document) : node ];
    group.parentNode = d3_documentElement;
    return d3_selection([ group ]);
  };
  d3.selectAll = function(nodes) {
    var group = d3_array(typeof nodes === "string" ? d3_selectAll(nodes, d3_document) : nodes);
    group.parentNode = d3_documentElement;
    return d3_selection([ group ]);
  };
  var d3_selectionRoot = d3.select(d3_documentElement);
  d3_selectionPrototype.on = function(type, listener, capture) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof type !== "string") {
        if (n < 2) listener = false;
        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));
        return this;
      }
      if (n < 2) return (n = this.node()["__on" + type]) && n._;
      capture = false;
    }
    return this.each(d3_selection_on(type, listener, capture));
  };
  function d3_selection_on(type, listener, capture) {
    var name = "__on" + type, i = type.indexOf("."), wrap = d3_selection_onListener;
    if (i > 0) type = type.substring(0, i);
    var filter = d3_selection_onFilters.get(type);
    if (filter) type = filter, wrap = d3_selection_onFilter;
    function onRemove() {
      var l = this[name];
      if (l) {
        this.removeEventListener(type, l, l.$);
        delete this[name];
      }
    }
    function onAdd() {
      var l = wrap(listener, d3_array(arguments));
      onRemove.call(this);
      this.addEventListener(type, this[name] = l, l.$ = capture);
      l._ = listener;
    }
    function removeAll() {
      var re = new RegExp("^__on([^.]+)" + d3.requote(type) + "$"), match;
      for (var name in this) {
        if (match = name.match(re)) {
          var l = this[name];
          this.removeEventListener(match[1], l, l.$);
          delete this[name];
        }
      }
    }
    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;
  }
  var d3_selection_onFilters = d3.map({
    mouseenter: "mouseover",
    mouseleave: "mouseout"
  });
  d3_selection_onFilters.forEach(function(k) {
    if ("on" + k in d3_document) d3_selection_onFilters.remove(k);
  });
  function d3_selection_onListener(listener, argumentz) {
    return function(e) {
      var o = d3.event;
      d3.event = e;
      argumentz[0] = this.__data__;
      try {
        listener.apply(this, argumentz);
      } finally {
        d3.event = o;
      }
    };
  }
  function d3_selection_onFilter(listener, argumentz) {
    var l = d3_selection_onListener(listener, argumentz);
    return function(e) {
      var target = this, related = e.relatedTarget;
      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {
        l.call(target, e);
      }
    };
  }
  var d3_event_dragSelect = "onselectstart" in d3_document ? null : d3_vendorSymbol(d3_documentElement.style, "userSelect"), d3_event_dragId = 0;
  function d3_event_dragSuppress() {
    var name = ".dragsuppress-" + ++d3_event_dragId, click = "click" + name, w = d3.select(d3_window).on("touchmove" + name, d3_eventPreventDefault).on("dragstart" + name, d3_eventPreventDefault).on("selectstart" + name, d3_eventPreventDefault);
    if (d3_event_dragSelect) {
      var style = d3_documentElement.style, select = style[d3_event_dragSelect];
      style[d3_event_dragSelect] = "none";
    }
    return function(suppressClick) {
      w.on(name, null);
      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;
      if (suppressClick) {
        function off() {
          w.on(click, null);
        }
        w.on(click, function() {
          d3_eventPreventDefault();
          off();
        }, true);
        setTimeout(off, 0);
      }
    };
  }
  d3.mouse = function(container) {
    return d3_mousePoint(container, d3_eventSource());
  };
  var d3_mouse_bug44083 = /WebKit/.test(d3_window.navigator.userAgent) ? -1 : 0;
  function d3_mousePoint(container, e) {
    if (e.changedTouches) e = e.changedTouches[0];
    var svg = container.ownerSVGElement || container;
    if (svg.createSVGPoint) {
      var point = svg.createSVGPoint();
      if (d3_mouse_bug44083 < 0 && (d3_window.scrollX || d3_window.scrollY)) {
        svg = d3.select("body").append("svg").style({
          position: "absolute",
          top: 0,
          left: 0,
          margin: 0,
          padding: 0,
          border: "none"
        }, "important");
        var ctm = svg[0][0].getScreenCTM();
        d3_mouse_bug44083 = !(ctm.f || ctm.e);
        svg.remove();
      }
      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX,
      point.y = e.clientY;
      point = point.matrixTransform(container.getScreenCTM().inverse());
      return [ point.x, point.y ];
    }
    var rect = container.getBoundingClientRect();
    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];
  }
  d3.touches = function(container, touches) {
    if (arguments.length < 2) touches = d3_eventSource().touches;
    return touches ? d3_array(touches).map(function(touch) {
      var point = d3_mousePoint(container, touch);
      point.identifier = touch.identifier;
      return point;
    }) : [];
  };
  d3.behavior.drag = function() {
    var event = d3_eventDispatch(drag, "drag", "dragstart", "dragend"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, "mousemove", "mouseup"), touchstart = dragstart(touchid, touchposition, "touchmove", "touchend");
    function drag() {
      this.on("mousedown.drag", mousedown).on("touchstart.drag", touchstart);
    }
    function touchid() {
      return d3.event.changedTouches[0].identifier;
    }
    function touchposition(parent, id) {
      return d3.touches(parent).filter(function(p) {
        return p.identifier === id;
      })[0];
    }
    function dragstart(id, position, move, end) {
      return function() {
        var target = this, parent = target.parentNode, event_ = event.of(target, arguments), eventTarget = d3.event.target, eventId = id(), drag = eventId == null ? "drag" : "drag-" + eventId, origin_ = position(parent, eventId), dragged = 0, offset, w = d3.select(d3_window).on(move + "." + drag, moved).on(end + "." + drag, ended), dragRestore = d3_event_dragSuppress();
        if (origin) {
          offset = origin.apply(target, arguments);
          offset = [ offset.x - origin_[0], offset.y - origin_[1] ];
        } else {
          offset = [ 0, 0 ];
        }
        event_({
          type: "dragstart"
        });
        function moved() {
          var p = position(parent, eventId), dx = p[0] - origin_[0], dy = p[1] - origin_[1];
          dragged |= dx | dy;
          origin_ = p;
          event_({
            type: "drag",
            x: p[0] + offset[0],
            y: p[1] + offset[1],
            dx: dx,
            dy: dy
          });
        }
        function ended() {
          w.on(move + "." + drag, null).on(end + "." + drag, null);
          dragRestore(dragged && d3.event.target === eventTarget);
          event_({
            type: "dragend"
          });
        }
      };
    }
    drag.origin = function(x) {
      if (!arguments.length) return origin;
      origin = x;
      return drag;
    };
    return d3.rebind(drag, event, "on");
  };
  var π = Math.PI, τ = 2 * π, halfπ = π / 2, ε = 1e-6, ε2 = ε * ε, d3_radians = π / 180, d3_degrees = 180 / π;
  function d3_sgn(x) {
    return x > 0 ? 1 : x < 0 ? -1 : 0;
  }
  function d3_acos(x) {
    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);
  }
  function d3_asin(x) {
    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);
  }
  function d3_sinh(x) {
    return ((x = Math.exp(x)) - 1 / x) / 2;
  }
  function d3_cosh(x) {
    return ((x = Math.exp(x)) + 1 / x) / 2;
  }
  function d3_tanh(x) {
    return ((x = Math.exp(2 * x)) - 1) / (x + 1);
  }
  function d3_haversin(x) {
    return (x = Math.sin(x / 2)) * x;
  }
  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;
  d3.interpolateZoom = function(p0, p1) {
    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2];
    var dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1), dr = r1 - r0, S = (dr || Math.log(w1 / w0)) / ρ;
    function interpolate(t) {
      var s = t * S;
      if (dr) {
        var coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));
        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];
      }
      return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * s) ];
    }
    interpolate.duration = S * 1e3;
    return interpolate;
  };
  d3.behavior.zoom = function(centerX, centerY) {




    var view = {
      x: centerX,
      y: centerY,
      k: 1
    }, translate0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, mousedown = "mousedown.zoom", mousemove = "mousemove.zoom", mouseup = "mouseup.zoom", mousewheelTimer, touchstart = "touchstart.zoom", touchtime, event = d3_eventDispatch(zoom, "zoomstart", "zoom", "zoomend"), x0, x1, y0, y1;
    function zoom(g) {
      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + ".zoom", mousewheeled).on(mousemove, mousewheelreset).on("dblclick.zoom", dblclicked).on(touchstart, touchstarted);
    }
    zoom.event = function(g) {
      g.each(function() {
        var event_ = event.of(this, arguments), view1 = view;
        if (d3_transitionInheritId) {
          d3.select(this).transition().each("start.zoom", function() {
            view = this.__chart__ || {
              x: 0,
              y: 0,
              k: 1
            };
            zoomstarted(event_);
          }).tween("zoom:zoom", function() {
            var dx = size[0], dy = size[1], cx = dx / 2, cy = dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);
            return function(t) {
              var l = i(t), k = dx / l[2];
              this.__chart__ = view = {
                x: cx - l[0] * k,
                y: cy - l[1] * k,
                k: k
              };
              zoomed(event_);
            };
          }).each("end.zoom", function() {
            zoomended(event_);
          });
        } else {
          this.__chart__ = view;
          zoomstarted(event_);
          zoomed(event_);
          zoomended(event_);
        }
      });
    };
    zoom.translate = function(_) {


      if (!arguments.length) return [ view.x, view.y ];
      view = {
        x: +_[0],
        y: +_[1],
        k: view.k
      };
      rescale();
      return zoom;
    };
    zoom.scale = function(_) {
      if (!arguments.length) return view.k;
      view = {
        x: view.x,
        y: view.y,
        k: +_
      };
      rescale();
      return zoom;
    };
    zoom.scaleExtent = function(_) {
      if (!arguments.length) return scaleExtent;
      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.center = function(_) {
      if (!arguments.length) return center;
      center = _ && [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.size = function(_) {
      if (!arguments.length) return size;
      size = _ && [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.x = function(z) {
      if (!arguments.length) return x1;
      x1 = z;
      x0 = z.copy();
      view = {
        x: 0,
        y: 0,
        k: 1
      };
      return zoom;
    };
    zoom.y = function(z) {
      if (!arguments.length) return y1;
      y1 = z;
      y0 = z.copy();
      view = {
        x: 0,
        y: 0,
        k: 1
      };
      return zoom;
    };
    function location(p) {
      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];
    }
    function point(l) {
      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];
    }
    function scaleTo(s) {
      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));
    }
    function translateTo(p, l) {
      l = point(l);

      view.x += p[0] - l[0];
      view.y += p[1] - l[1];
    }
    function rescale() {
      if (x1) x1.domain(x0.range().map(function(x) {
        return (x - view.x) / view.k;
      }).map(x0.invert));
      if (y1) y1.domain(y0.range().map(function(y) {
        return (y - view.y) / view.k;
      }).map(y0.invert));
    }
    function zoomstarted(event) {
      event({
        type: "zoomstart"
      });
    }
    function zoomed(event) {
      rescale();
      event({
        type: "zoom",
        scale: view.k,
        translate: [ view.x, view.y ]
      });
    }
    function zoomended(event) {
      event({
        type: "zoomend"
      });
    }
    function mousedowned() {

      if(d3.event.buttons==2){

        var target = this, event_ = event.of(target, arguments), eventTarget = d3.event.target, dragged = 0, w = d3.select(d3_window).on(mousemove, moved).on(mouseup, ended), l = location(d3.mouse(target)), dragRestore = d3_event_dragSuppress();
        d3_selection_interrupt.call(target);
        zoomstarted(event_);
        function moved() {
          dragged = 1;
          translateTo(d3.mouse(target), l);
          zoomed(event_);
        }
        function ended() {
          w.on(mousemove, d3_window === target ? mousewheelreset : null).on(mouseup, null);
          dragRestore(dragged && d3.event.target === eventTarget);
          zoomended(event_);
        }
      }
    }
    function touchstarted() {
      var target = this, event_ = event.of(target, arguments), locations0 = {}, distance0 = 0, scale0, eventId = d3.event.changedTouches[0].identifier, touchmove = "touchmove.zoom-" + eventId, touchend = "touchend.zoom-" + eventId, w = d3.select(d3_window).on(touchmove, moved).on(touchend, ended), t = d3.select(target).on(mousedown, null).on(touchstart, started), dragRestore = d3_event_dragSuppress();
      d3_selection_interrupt.call(target);
      started();
      zoomstarted(event_);
      function relocate() {
        var touches = d3.touches(target);
        scale0 = view.k;
        touches.forEach(function(t) {
          if (t.identifier in locations0) locations0[t.identifier] = location(t);
        });
        return touches;
      }
      function started() {
        var changed = d3.event.changedTouches;
        for (var i = 0, n = changed.length; i < n; ++i) {
          locations0[changed[i].identifier] = null;
        }
        var touches = relocate(), now = Date.now();
        if (touches.length === 1) {
          if (now - touchtime < 500) {
            var p = touches[0], l = locations0[p.identifier];
            scaleTo(view.k * 2);
            translateTo(p, l);
            d3_eventPreventDefault();
            zoomed(event_);
          }
          touchtime = now;
        } else if (touches.length > 1) {
          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];
          distance0 = dx * dx + dy * dy;
        }
      }
      function moved() {
        var touches = d3.touches(target), p0, l0, p1, l1;
        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {
          p1 = touches[i];
          if (l1 = locations0[p1.identifier]) {
            if (l0) break;
            p0 = p1, l0 = l1;
          }
        }
        if (l1) {
          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);
          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];
          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];
          scaleTo(scale1 * scale0);
        }
        touchtime = null;
        translateTo(p0, l0);
        zoomed(event_);
      }
      function ended() {
        if (d3.event.touches.length) {
          var changed = d3.event.changedTouches;
          for (var i = 0, n = changed.length; i < n; ++i) {
            delete locations0[changed[i].identifier];
          }
          for (var identifier in locations0) {
            return void relocate();
          }
        }
        w.on(touchmove, null).on(touchend, null);
        t.on(mousedown, mousedowned).on(touchstart, touchstarted);
        dragRestore();
        zoomended(event_);
      }
    }
    function mousewheeled() {
      var event_ = event.of(this, arguments);
      if (mousewheelTimer) clearTimeout(mousewheelTimer); else d3_selection_interrupt.call(this),
      zoomstarted(event_);
      mousewheelTimer = setTimeout(function() {
        mousewheelTimer = null;
        zoomended(event_);
      }, 50);
      d3_eventPreventDefault();
      var point = center || d3.mouse(this);
      if (!translate0) translate0 = location(point);
      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);
      translateTo(point, translate0);
      zoomed(event_);
    }
    function mousewheelreset() {
      translate0 = null;
    }
    function dblclicked() {
      var event_ = event.of(this, arguments), p = d3.mouse(this), l = location(p), k = Math.log(view.k) / Math.LN2;
      zoomstarted(event_);
      scaleTo(Math.pow(2, d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1));
      translateTo(p, l);
      zoomed(event_);
      zoomended(event_);
    }
    return d3.rebind(zoom, event, "on");
  };
  var d3_behavior_zoomInfinity = [ 0, Infinity ];
  var d3_behavior_zoomDelta, d3_behavior_zoomWheel = "onwheel" in d3_document ? (d3_behavior_zoomDelta = function() {
    return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);
  }, "wheel") : "onmousewheel" in d3_document ? (d3_behavior_zoomDelta = function() {
    return d3.event.wheelDelta;
  }, "mousewheel") : (d3_behavior_zoomDelta = function() {
    return -d3.event.detail;
  }, "MozMousePixelScroll");
  function d3_Color() {}
  d3_Color.prototype.toString = function() {
    return this.rgb() + "";
  };
  d3.hsl = function(h, s, l) {
    return arguments.length === 1 ? h instanceof d3_Hsl ? d3_hsl(h.h, h.s, h.l) : d3_rgb_parse("" + h, d3_rgb_hsl, d3_hsl) : d3_hsl(+h, +s, +l);
  };
  function d3_hsl(h, s, l) {
    return new d3_Hsl(h, s, l);
  }
  function d3_Hsl(h, s, l) {
    this.h = h;
    this.s = s;
    this.l = l;
  }
  var d3_hslPrototype = d3_Hsl.prototype = new d3_Color();
  d3_hslPrototype.brighter = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return d3_hsl(this.h, this.s, this.l / k);
  };
  d3_hslPrototype.darker = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return d3_hsl(this.h, this.s, k * this.l);
  };
  d3_hslPrototype.rgb = function() {
    return d3_hsl_rgb(this.h, this.s, this.l);
  };
  function d3_hsl_rgb(h, s, l) {
    var m1, m2;
    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;
    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;
    l = l < 0 ? 0 : l > 1 ? 1 : l;
    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;
    m1 = 2 * l - m2;
    function v(h) {
      if (h > 360) h -= 360; else if (h < 0) h += 360;
      if (h < 60) return m1 + (m2 - m1) * h / 60;
      if (h < 180) return m2;
      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;
      return m1;
    }
    function vv(h) {
      return Math.round(v(h) * 255);
    }
    return d3_rgb(vv(h + 120), vv(h), vv(h - 120));
  }
  d3.hcl = function(h, c, l) {
    return arguments.length === 1 ? h instanceof d3_Hcl ? d3_hcl(h.h, h.c, h.l) : h instanceof d3_Lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : d3_hcl(+h, +c, +l);
  };
  function d3_hcl(h, c, l) {
    return new d3_Hcl(h, c, l);
  }
  function d3_Hcl(h, c, l) {
    this.h = h;
    this.c = c;
    this.l = l;
  }
  var d3_hclPrototype = d3_Hcl.prototype = new d3_Color();
  d3_hclPrototype.brighter = function(k) {
    return d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));
  };
  d3_hclPrototype.darker = function(k) {
    return d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));
  };
  d3_hclPrototype.rgb = function() {
    return d3_hcl_lab(this.h, this.c, this.l).rgb();
  };
  function d3_hcl_lab(h, c, l) {
    if (isNaN(h)) h = 0;
    if (isNaN(c)) c = 0;
    return d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);
  }
  d3.lab = function(l, a, b) {
    return arguments.length === 1 ? l instanceof d3_Lab ? d3_lab(l.l, l.a, l.b) : l instanceof d3_Hcl ? d3_hcl_lab(l.l, l.c, l.h) : d3_rgb_lab((l = d3.rgb(l)).r, l.g, l.b) : d3_lab(+l, +a, +b);
  };
  function d3_lab(l, a, b) {
    return new d3_Lab(l, a, b);
  }
  function d3_Lab(l, a, b) {
    this.l = l;
    this.a = a;
    this.b = b;
  }
  var d3_lab_K = 18;
  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;
  var d3_labPrototype = d3_Lab.prototype = new d3_Color();
  d3_labPrototype.brighter = function(k) {
    return d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
  };
  d3_labPrototype.darker = function(k) {
    return d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
  };
  d3_labPrototype.rgb = function() {
    return d3_lab_rgb(this.l, this.a, this.b);
  };
  function d3_lab_rgb(l, a, b) {
    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;
    x = d3_lab_xyz(x) * d3_lab_X;
    y = d3_lab_xyz(y) * d3_lab_Y;
    z = d3_lab_xyz(z) * d3_lab_Z;
    return d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));
  }
  function d3_lab_hcl(l, a, b) {
    return l > 0 ? d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : d3_hcl(NaN, NaN, l);
  }
  function d3_lab_xyz(x) {
    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;
  }
  function d3_xyz_lab(x) {
    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;
  }
  function d3_xyz_rgb(r) {
    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));
  }
  d3.rgb = function(r, g, b) {
    return arguments.length === 1 ? r instanceof d3_Rgb ? d3_rgb(r.r, r.g, r.b) : d3_rgb_parse("" + r, d3_rgb, d3_hsl_rgb) : d3_rgb(~~r, ~~g, ~~b);
  };
  function d3_rgbNumber(value) {
    return d3_rgb(value >> 16, value >> 8 & 255, value & 255);
  }
  function d3_rgbString(value) {
    return d3_rgbNumber(value) + "";
  }
  function d3_rgb(r, g, b) {
    return new d3_Rgb(r, g, b);
  }
  function d3_Rgb(r, g, b) {
    this.r = r;
    this.g = g;
    this.b = b;
  }
  var d3_rgbPrototype = d3_Rgb.prototype = new d3_Color();
  d3_rgbPrototype.brighter = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    var r = this.r, g = this.g, b = this.b, i = 30;
    if (!r && !g && !b) return d3_rgb(i, i, i);
    if (r && r < i) r = i;
    if (g && g < i) g = i;
    if (b && b < i) b = i;
    return d3_rgb(Math.min(255, ~~(r / k)), Math.min(255, ~~(g / k)), Math.min(255, ~~(b / k)));
  };
  d3_rgbPrototype.darker = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return d3_rgb(~~(k * this.r), ~~(k * this.g), ~~(k * this.b));
  };
  d3_rgbPrototype.hsl = function() {
    return d3_rgb_hsl(this.r, this.g, this.b);
  };
  d3_rgbPrototype.toString = function() {
    return "#" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);
  };
  function d3_rgb_hex(v) {
    return v < 16 ? "0" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);
  }
  function d3_rgb_parse(format, rgb, hsl) {
    var r = 0, g = 0, b = 0, m1, m2, name;
    m1 = /([a-z]+)\((.*)\)/i.exec(format);
    if (m1) {
      m2 = m1[2].split(",");
      switch (m1[1]) {
       case "hsl":
        {
          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);
        }

       case "rgb":
        {
          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));
        }
      }
    }
    if (name = d3_rgb_names.get(format)) return rgb(name.r, name.g, name.b);
    if (format != null && format.charAt(0) === "#") {
      if (format.length === 4) {
        r = format.charAt(1);
        r += r;
        g = format.charAt(2);
        g += g;
        b = format.charAt(3);
        b += b;
      } else if (format.length === 7) {
        r = format.substring(1, 3);
        g = format.substring(3, 5);
        b = format.substring(5, 7);
      }
      r = parseInt(r, 16);
      g = parseInt(g, 16);
      b = parseInt(b, 16);
    }
    return rgb(r, g, b);
  }
  function d3_rgb_hsl(r, g, b) {
    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;
    if (d) {
      s = l < .5 ? d / (max + min) : d / (2 - max - min);
      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;
      h *= 60;
    } else {
      h = NaN;
      s = l > 0 && l < 1 ? 0 : h;
    }
    return d3_hsl(h, s, l);
  }
  function d3_rgb_lab(r, g, b) {
    r = d3_rgb_xyz(r);
    g = d3_rgb_xyz(g);
    b = d3_rgb_xyz(b);
    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);
    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));
  }
  function d3_rgb_xyz(r) {
    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);
  }
  function d3_rgb_parseNumber(c) {
    var f = parseFloat(c);
    return c.charAt(c.length - 1) === "%" ? Math.round(f * 2.55) : f;
  }
  var d3_rgb_names = d3.map({
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
  });
  d3_rgb_names.forEach(function(key, value) {
    d3_rgb_names.set(key, d3_rgbNumber(value));
  });
  function d3_functor(v) {
    return typeof v === "function" ? v : function() {
      return v;
    };
  }
  d3.functor = d3_functor;
  function d3_identity(d) {
    return d;
  }
  d3.xhr = d3_xhrType(d3_identity);
  function d3_xhrType(response) {
    return function(url, mimeType, callback) {
      if (arguments.length === 2 && typeof mimeType === "function") callback = mimeType,
      mimeType = null;
      return d3_xhr(url, mimeType, response, callback);
    };
  }
  function d3_xhr(url, mimeType, response, callback) {
    var xhr = {}, dispatch = d3.dispatch("beforesend", "progress", "load", "error"), headers = {}, request = new XMLHttpRequest(), responseType = null;
    if (d3_window.XDomainRequest && !("withCredentials" in request) && /^(http(s)?:)?\/\//.test(url)) request = new XDomainRequest();
    "onload" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {
      request.readyState > 3 && respond();
    };
    function respond() {
      var status = request.status, result;
      if (!status && request.responseText || status >= 200 && status < 300 || status === 304) {
        try {
          result = response.call(xhr, request);
        } catch (e) {
          dispatch.error.call(xhr, e);
          return;
        }
        dispatch.load.call(xhr, result);
      } else {
        dispatch.error.call(xhr, request);
      }
    }
    request.onprogress = function(event) {
      var o = d3.event;
      d3.event = event;
      try {
        dispatch.progress.call(xhr, request);
      } finally {
        d3.event = o;
      }
    };
    xhr.header = function(name, value) {
      name = (name + "").toLowerCase();
      if (arguments.length < 2) return headers[name];
      if (value == null) delete headers[name]; else headers[name] = value + "";
      return xhr;
    };
    xhr.mimeType = function(value) {
      if (!arguments.length) return mimeType;
      mimeType = value == null ? null : value + "";
      return xhr;
    };
    xhr.responseType = function(value) {
      if (!arguments.length) return responseType;
      responseType = value;
      return xhr;
    };
    xhr.response = function(value) {
      response = value;
      return xhr;
    };
    [ "get", "post" ].forEach(function(method) {
      xhr[method] = function() {
        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));
      };
    });
    xhr.send = function(method, data, callback) {
      if (arguments.length === 2 && typeof data === "function") callback = data, data = null;
      request.open(method, url, true);
      if (mimeType != null && !("accept" in headers)) headers["accept"] = mimeType + ",*/*";
      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);
      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);
      if (responseType != null) request.responseType = responseType;
      if (callback != null) xhr.on("error", callback).on("load", function(request) {
        callback(null, request);
      });
      dispatch.beforesend.call(xhr, request);
      request.send(data == null ? null : data);
      return xhr;
    };
    xhr.abort = function() {
      request.abort();
      return xhr;
    };
    d3.rebind(xhr, dispatch, "on");
    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));
  }
  function d3_xhr_fixCallback(callback) {
    return callback.length === 1 ? function(error, request) {
      callback(error == null ? request : null);
    } : callback;
  }
  d3.dsv = function(delimiter, mimeType) {
    var reFormat = new RegExp('["' + delimiter + "\n]"), delimiterCode = delimiter.charCodeAt(0);
    function dsv(url, row, callback) {
      if (arguments.length < 3) callback = row, row = null;
      var xhr = d3.xhr(url, mimeType, callback);
      xhr.row = function(_) {
        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;
      };
      return xhr.row(row);
    }
    function response(request) {
      return dsv.parse(request.responseText);
    }
    function typedResponse(f) {
      return function(request) {
        return dsv.parse(request.responseText, f);
      };
    }
    dsv.parse = function(text, f) {
      var o;
      return dsv.parseRows(text, function(row, i) {
        if (o) return o(row, i - 1);
        var a = new Function("d", "return {" + row.map(function(name, i) {
          return JSON.stringify(name) + ": d[" + i + "]";
        }).join(",") + "}");
        o = f ? function(row, i) {
          return f(a(row), i);
        } : a;
      });
    };
    dsv.parseRows = function(text, f) {
      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;
      function token() {
        if (I >= N) return EOF;
        if (eol) return eol = false, EOL;
        var j = I;
        if (text.charCodeAt(j) === 34) {
          var i = j;
          while (i++ < N) {
            if (text.charCodeAt(i) === 34) {
              if (text.charCodeAt(i + 1) !== 34) break;
              ++i;
            }
          }
          I = i + 2;
          var c = text.charCodeAt(i + 1);
          if (c === 13) {
            eol = true;
            if (text.charCodeAt(i + 2) === 10) ++I;
          } else if (c === 10) {
            eol = true;
          }
          return text.substring(j + 1, i).replace(/""/g, '"');
        }
        while (I < N) {
          var c = text.charCodeAt(I++), k = 1;
          if (c === 10) eol = true; else if (c === 13) {
            eol = true;
            if (text.charCodeAt(I) === 10) ++I, ++k;
          } else if (c !== delimiterCode) continue;
          return text.substring(j, I - k);
        }
        return text.substring(j);
      }
      while ((t = token()) !== EOF) {
        var a = [];
        while (t !== EOL && t !== EOF) {
          a.push(t);
          t = token();
        }
        if (f && !(a = f(a, n++))) continue;
        rows.push(a);
      }
      return rows;
    };
    dsv.format = function(rows) {
      if (Array.isArray(rows[0])) return dsv.formatRows(rows);
      var fieldSet = new d3_Set(), fields = [];
      rows.forEach(function(row) {
        for (var field in row) {
          if (!fieldSet.has(field)) {
            fields.push(fieldSet.add(field));
          }
        }
      });
      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {
        return fields.map(function(field) {
          return formatValue(row[field]);
        }).join(delimiter);
      })).join("\n");
    };
    dsv.formatRows = function(rows) {
      return rows.map(formatRow).join("\n");
    };
    function formatRow(row) {
      return row.map(formatValue).join(delimiter);
    }
    function formatValue(text) {
      return reFormat.test(text) ? '"' + text.replace(/\"/g, '""') + '"' : text;
    }
    return dsv;
  };
  d3.csv = d3.dsv(",", "text/csv");
  d3.tsv = d3.dsv("	", "text/tab-separated-values");
  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_active, d3_timer_frame = d3_window[d3_vendorSymbol(d3_window, "requestAnimationFrame")] || function(callback) {
    setTimeout(callback, 17);
  };
  d3.timer = function(callback, delay, then) {
    var n = arguments.length;
    if (n < 2) delay = 0;
    if (n < 3) then = Date.now();
    var time = then + delay, timer = {
      c: callback,
      t: time,
      f: false,
      n: null
    };
    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;
    d3_timer_queueTail = timer;
    if (!d3_timer_interval) {
      d3_timer_timeout = clearTimeout(d3_timer_timeout);
      d3_timer_interval = 1;
      d3_timer_frame(d3_timer_step);
    }
  };
  function d3_timer_step() {
    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;
    if (delay > 24) {
      if (isFinite(delay)) {
        clearTimeout(d3_timer_timeout);
        d3_timer_timeout = setTimeout(d3_timer_step, delay);
      }
      d3_timer_interval = 0;
    } else {
      d3_timer_interval = 1;
      d3_timer_frame(d3_timer_step);
    }
  }
  d3.timer.flush = function() {
    d3_timer_mark();
    d3_timer_sweep();
  };
  function d3_timer_mark() {
    var now = Date.now();
    d3_timer_active = d3_timer_queueHead;
    while (d3_timer_active) {
      if (now >= d3_timer_active.t) d3_timer_active.f = d3_timer_active.c(now - d3_timer_active.t);
      d3_timer_active = d3_timer_active.n;
    }
    return now;
  }
  function d3_timer_sweep() {
    var t0, t1 = d3_timer_queueHead, time = Infinity;
    while (t1) {
      if (t1.f) {
        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;
      } else {
        if (t1.t < time) time = t1.t;
        t1 = (t0 = t1).n;
      }
    }
    d3_timer_queueTail = t0;
    return time;
  }
  var d3_format_decimalPoint = ".", d3_format_thousandsSeparator = ",", d3_format_grouping = [ 3, 3 ], d3_format_currencySymbol = "$";
  var d3_formatPrefixes = [ "y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y" ].map(d3_formatPrefix);
  d3.formatPrefix = function(value, precision) {
    var i = 0;
    if (value) {
      if (value < 0) value *= -1;
      if (precision) value = d3.round(value, d3_format_precision(value, precision));
      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);
      i = Math.max(-24, Math.min(24, Math.floor((i <= 0 ? i + 1 : i - 1) / 3) * 3));
    }
    return d3_formatPrefixes[8 + i / 3];
  };
  function d3_formatPrefix(d, i) {
    var k = Math.pow(10, abs(8 - i) * 3);
    return {
      scale: i > 8 ? function(d) {
        return d / k;
      } : function(d) {
        return d * k;
      },
      symbol: d
    };
  }
  d3.round = function(x, n) {
    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);
  };
  d3.format = function(specifier) {
    var match = d3_format_re.exec(specifier), fill = match[1] || " ", align = match[2] || ">", sign = match[3] || "", symbol = match[4] || "", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, suffix = "", integer = false;
    if (precision) precision = +precision.substring(1);
    if (zfill || fill === "0" && align === "=") {
      zfill = fill = "0";
      align = "=";
      if (comma) width -= Math.floor((width - 1) / 4);
    }
    switch (type) {
     case "n":
      comma = true;
      type = "g";
      break;

     case "%":
      scale = 100;
      suffix = "%";
      type = "f";
      break;

     case "p":
      scale = 100;
      suffix = "%";
      type = "r";
      break;

     case "b":
     case "o":
     case "x":
     case "X":
      if (symbol === "#") symbol = "0" + type.toLowerCase();

     case "c":
     case "d":
      integer = true;
      precision = 0;
      break;

     case "s":
      scale = -1;
      type = "r";
      break;
    }
    if (symbol === "#") symbol = ""; else if (symbol === "$") symbol = d3_format_currencySymbol;
    if (type == "r" && !precision) type = "g";
    if (precision != null) {
      if (type == "g") precision = Math.max(1, Math.min(21, precision)); else if (type == "e" || type == "f") precision = Math.max(0, Math.min(20, precision));
    }
    type = d3_format_types.get(type) || d3_format_typeDefault;
    var zcomma = zfill && comma;
    return function(value) {
      if (integer && value % 1) return "";
      var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, "-") : sign;
      if (scale < 0) {
        var prefix = d3.formatPrefix(value, precision);
        value = prefix.scale(value);
        suffix = prefix.symbol;
      } else {
        value *= scale;
      }
      value = type(value, precision);
      var i = value.lastIndexOf("."), before = i < 0 ? value : value.substring(0, i), after = i < 0 ? "" : d3_format_decimalPoint + value.substring(i + 1);
      if (!zfill && comma) before = d3_format_group(before);
      var length = symbol.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : "";
      if (zcomma) before = d3_format_group(padding + before);
      negative += symbol;
      value = before + after;
      return (align === "<" ? negative + value + padding : align === ">" ? padding + negative + value : align === "^" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + suffix;
    };
  };
  var d3_format_re = /(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i;
  var d3_format_types = d3.map({
    b: function(x) {
      return x.toString(2);
    },
    c: function(x) {
      return String.fromCharCode(x);
    },
    o: function(x) {
      return x.toString(8);
    },
    x: function(x) {
      return x.toString(16);
    },
    X: function(x) {
      return x.toString(16).toUpperCase();
    },
    g: function(x, p) {
      return x.toPrecision(p);
    },
    e: function(x, p) {
      return x.toExponential(p);
    },
    f: function(x, p) {
      return x.toFixed(p);
    },
    r: function(x, p) {
      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));
    }
  });
  function d3_format_precision(x, p) {
    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);
  }
  function d3_format_typeDefault(x) {
    return x + "";
  }
  var d3_format_group = d3_identity;
  if (d3_format_grouping) {
    var d3_format_groupingLength = d3_format_grouping.length;
    d3_format_group = function(value) {
      var i = value.length, t = [], j = 0, g = d3_format_grouping[0];
      while (i > 0 && g > 0) {
        t.push(value.substring(i -= g, i + g));
        g = d3_format_grouping[j = (j + 1) % d3_format_groupingLength];
      }
      return t.reverse().join(d3_format_thousandsSeparator);
    };
  }
  d3.geo = {};
  function d3_adder() {}
  d3_adder.prototype = {
    s: 0,
    t: 0,
    add: function(y) {
      d3_adderSum(y, this.t, d3_adderTemp);
      d3_adderSum(d3_adderTemp.s, this.s, this);
      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;
    },
    reset: function() {
      this.s = this.t = 0;
    },
    valueOf: function() {
      return this.s;
    }
  };
  var d3_adderTemp = new d3_adder();
  function d3_adderSum(a, b, o) {
    var x = o.s = a + b, bv = x - a, av = x - bv;
    o.t = a - av + (b - bv);
  }
  d3.geo.stream = function(object, listener) {
    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {
      d3_geo_streamObjectType[object.type](object, listener);
    } else {
      d3_geo_streamGeometry(object, listener);
    }
  };
  function d3_geo_streamGeometry(geometry, listener) {
    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {
      d3_geo_streamGeometryType[geometry.type](geometry, listener);
    }
  }
  var d3_geo_streamObjectType = {
    Feature: function(feature, listener) {
      d3_geo_streamGeometry(feature.geometry, listener);
    },
    FeatureCollection: function(object, listener) {
      var features = object.features, i = -1, n = features.length;
      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);
    }
  };
  var d3_geo_streamGeometryType = {
    Sphere: function(object, listener) {
      listener.sphere();
    },
    Point: function(object, listener) {
      object = object.coordinates;
      listener.point(object[0], object[1], object[2]);
    },
    MultiPoint: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);
    },
    LineString: function(object, listener) {
      d3_geo_streamLine(object.coordinates, listener, 0);
    },
    MultiLineString: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);
    },
    Polygon: function(object, listener) {
      d3_geo_streamPolygon(object.coordinates, listener);
    },
    MultiPolygon: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);
    },
    GeometryCollection: function(object, listener) {
      var geometries = object.geometries, i = -1, n = geometries.length;
      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);
    }
  };
  function d3_geo_streamLine(coordinates, listener, closed) {
    var i = -1, n = coordinates.length - closed, coordinate;
    listener.lineStart();
    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);
    listener.lineEnd();
  }
  function d3_geo_streamPolygon(coordinates, listener) {
    var i = -1, n = coordinates.length;
    listener.polygonStart();
    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);
    listener.polygonEnd();
  }
  d3.geo.area = function(object) {
    d3_geo_areaSum = 0;
    d3.geo.stream(object, d3_geo_area);
    return d3_geo_areaSum;
  };
  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();
  var d3_geo_area = {
    sphere: function() {
      d3_geo_areaSum += 4 * π;
    },
    point: d3_noop,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: function() {
      d3_geo_areaRingSum.reset();
      d3_geo_area.lineStart = d3_geo_areaRingStart;
    },
    polygonEnd: function() {
      var area = 2 * d3_geo_areaRingSum;
      d3_geo_areaSum += area < 0 ? 4 * π + area : area;
      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;
    }
  };
  function d3_geo_areaRingStart() {
    var λ00, φ00, λ0, cosφ0, sinφ0;
    d3_geo_area.point = function(λ, φ) {
      d3_geo_area.point = nextPoint;
      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4),
      sinφ0 = Math.sin(φ);
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      φ = φ * d3_radians / 2 + π / 4;
      var dλ = λ - λ0, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(dλ), v = k * Math.sin(dλ);
      d3_geo_areaRingSum.add(Math.atan2(v, u));
      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;
    }
    d3_geo_area.lineEnd = function() {
      nextPoint(λ00, φ00);
    };
  }
  function d3_geo_cartesian(spherical) {
    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);
    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];
  }
  function d3_geo_cartesianDot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  }
  function d3_geo_cartesianCross(a, b) {
    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];
  }
  function d3_geo_cartesianAdd(a, b) {
    a[0] += b[0];
    a[1] += b[1];
    a[2] += b[2];
  }
  function d3_geo_cartesianScale(vector, k) {
    return [ vector[0] * k, vector[1] * k, vector[2] * k ];
  }
  function d3_geo_cartesianNormalize(d) {
    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
    d[0] /= l;
    d[1] /= l;
    d[2] /= l;
  }
  function d3_geo_spherical(cartesian) {
    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];
  }
  function d3_geo_sphericalEqual(a, b) {
    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;
  }
  d3.geo.bounds = function() {
    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;
    var bound = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function() {
        bound.point = ringPoint;
        bound.lineStart = ringStart;
        bound.lineEnd = ringEnd;
        dλSum = 0;
        d3_geo_area.polygonStart();
      },
      polygonEnd: function() {
        d3_geo_area.polygonEnd();
        bound.point = point;
        bound.lineStart = lineStart;
        bound.lineEnd = lineEnd;
        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;
        range[0] = λ0, range[1] = λ1;
      }
    };
    function point(λ, φ) {
      ranges.push(range = [ λ0 = λ, λ1 = λ ]);
      if (φ < φ0) φ0 = φ;
      if (φ > φ1) φ1 = φ;
    }
    function linePoint(λ, φ) {
      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);
      if (p0) {
        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);
        d3_geo_cartesianNormalize(inflection);
        inflection = d3_geo_spherical(inflection);
        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;
        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
          var φi = inflection[1] * d3_degrees;
          if (φi > φ1) φ1 = φi;
        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
          var φi = -inflection[1] * d3_degrees;
          if (φi < φ0) φ0 = φi;
        } else {
          if (φ < φ0) φ0 = φ;
          if (φ > φ1) φ1 = φ;
        }
        if (antimeridian) {
          if (λ < λ_) {
            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
          } else {
            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
          }
        } else {
          if (λ1 >= λ0) {
            if (λ < λ0) λ0 = λ;
            if (λ > λ1) λ1 = λ;
          } else {
            if (λ > λ_) {
              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
            } else {
              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
            }
          }
        }
      } else {
        point(λ, φ);
      }
      p0 = p, λ_ = λ;
    }
    function lineStart() {
      bound.point = linePoint;
    }
    function lineEnd() {
      range[0] = λ0, range[1] = λ1;
      bound.point = point;
      p0 = null;
    }
    function ringPoint(λ, φ) {
      if (p0) {
        var dλ = λ - λ_;
        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;
      } else λ__ = λ, φ__ = φ;
      d3_geo_area.point(λ, φ);
      linePoint(λ, φ);
    }
    function ringStart() {
      d3_geo_area.lineStart();
    }
    function ringEnd() {
      ringPoint(λ__, φ__);
      d3_geo_area.lineEnd();
      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);
      range[0] = λ0, range[1] = λ1;
      p0 = null;
    }
    function angle(λ0, λ1) {
      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;
    }
    function compareRanges(a, b) {
      return a[0] - b[0];
    }
    function withinRange(x, range) {
      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
    }
    return function(feature) {
      φ1 = λ1 = -(λ0 = φ0 = Infinity);
      ranges = [];
      d3.geo.stream(feature, bound);
      var n = ranges.length;
      if (n) {
        ranges.sort(compareRanges);
        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {
          b = ranges[i];
          if (withinRange(b[0], a) || withinRange(b[1], a)) {
            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
          } else {
            merged.push(a = b);
          }
        }
        var best = -Infinity, dλ;
        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {
          b = merged[i];
          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];
        }
      }
      ranges = range = null;
      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];
    };
  }();
  d3.geo.centroid = function(object) {
    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
    d3.geo.stream(object, d3_geo_centroid);
    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;
    if (m < ε2) {
      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;
      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;
      m = x * x + y * y + z * z;
      if (m < ε2) return [ NaN, NaN ];
    }
    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];
  };
  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;
  var d3_geo_centroid = {
    sphere: d3_noop,
    point: d3_geo_centroidPoint,
    lineStart: d3_geo_centroidLineStart,
    lineEnd: d3_geo_centroidLineEnd,
    polygonStart: function() {
      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;
    },
    polygonEnd: function() {
      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;
    }
  };
  function d3_geo_centroidPoint(λ, φ) {
    λ *= d3_radians;
    var cosφ = Math.cos(φ *= d3_radians);
    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));
  }
  function d3_geo_centroidPointXYZ(x, y, z) {
    ++d3_geo_centroidW0;
    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;
    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;
    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;
  }
  function d3_geo_centroidLineStart() {
    var x0, y0, z0;
    d3_geo_centroid.point = function(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians);
      x0 = cosφ * Math.cos(λ);
      y0 = cosφ * Math.sin(λ);
      z0 = Math.sin(φ);
      d3_geo_centroid.point = nextPoint;
      d3_geo_centroidPointXYZ(x0, y0, z0);
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
      d3_geo_centroidW1 += w;
      d3_geo_centroidX1 += w * (x0 + (x0 = x));
      d3_geo_centroidY1 += w * (y0 + (y0 = y));
      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
      d3_geo_centroidPointXYZ(x0, y0, z0);
    }
  }
  function d3_geo_centroidLineEnd() {
    d3_geo_centroid.point = d3_geo_centroidPoint;
  }
  function d3_geo_centroidRingStart() {
    var λ00, φ00, x0, y0, z0;
    d3_geo_centroid.point = function(λ, φ) {
      λ00 = λ, φ00 = φ;
      d3_geo_centroid.point = nextPoint;
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians);
      x0 = cosφ * Math.cos(λ);
      y0 = cosφ * Math.sin(λ);
      z0 = Math.sin(φ);
      d3_geo_centroidPointXYZ(x0, y0, z0);
    };
    d3_geo_centroid.lineEnd = function() {
      nextPoint(λ00, φ00);
      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;
      d3_geo_centroid.point = d3_geo_centroidPoint;
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);
      d3_geo_centroidX2 += v * cx;
      d3_geo_centroidY2 += v * cy;
      d3_geo_centroidZ2 += v * cz;
      d3_geo_centroidW1 += w;
      d3_geo_centroidX1 += w * (x0 + (x0 = x));
      d3_geo_centroidY1 += w * (y0 + (y0 = y));
      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
      d3_geo_centroidPointXYZ(x0, y0, z0);
    }
  }
  function d3_true() {
    return true;
  }
  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {
    var subject = [], clip = [];
    segments.forEach(function(segment) {
      if ((n = segment.length - 1) <= 0) return;
      var n, p0 = segment[0], p1 = segment[n];
      if (d3_geo_sphericalEqual(p0, p1)) {
        listener.lineStart();
        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);
        listener.lineEnd();
        return;
      }
      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);
      a.o = b;
      subject.push(a);
      clip.push(b);
      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);
      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);
      a.o = b;
      subject.push(a);
      clip.push(b);
    });
    clip.sort(compare);
    d3_geo_clipPolygonLinkCircular(subject);
    d3_geo_clipPolygonLinkCircular(clip);
    if (!subject.length) return;
    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {
      clip[i].e = entry = !entry;
    }
    var start = subject[0], points, point;
    while (1) {
      var current = start, isSubject = true;
      while (current.v) if ((current = current.n) === start) return;
      points = current.z;
      listener.lineStart();
      do {
        current.v = current.o.v = true;
        if (current.e) {
          if (isSubject) {
            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);
          } else {
            interpolate(current.x, current.n.x, 1, listener);
          }
          current = current.n;
        } else {
          if (isSubject) {
            points = current.p.z;
            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);
          } else {
            interpolate(current.x, current.p.x, -1, listener);
          }
          current = current.p;
        }
        current = current.o;
        points = current.z;
        isSubject = !isSubject;
      } while (!current.v);
      listener.lineEnd();
    }
  }
  function d3_geo_clipPolygonLinkCircular(array) {
    if (!(n = array.length)) return;
    var n, i = 0, a = array[0], b;
    while (++i < n) {
      a.n = b = array[i];
      b.p = a;
      a = b;
    }
    a.n = b = array[0];
    b.p = a;
  }
  function d3_geo_clipPolygonIntersection(point, points, other, entry) {
    this.x = point;
    this.z = points;
    this.o = other;
    this.e = entry;
    this.v = false;
    this.n = this.p = null;
  }
  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {
    return function(rotate, listener) {
      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);
      var clip = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          clip.point = pointRing;
          clip.lineStart = ringStart;
          clip.lineEnd = ringEnd;
          segments = [];
          polygon = [];
          listener.polygonStart();
        },
        polygonEnd: function() {
          clip.point = point;
          clip.lineStart = lineStart;
          clip.lineEnd = lineEnd;
          segments = d3.merge(segments);
          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);
          if (segments.length) {
            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);
          } else if (clipStartInside) {
            listener.lineStart();
            interpolate(null, null, 1, listener);
            listener.lineEnd();
          }
          listener.polygonEnd();
          segments = polygon = null;
        },
        sphere: function() {
          listener.polygonStart();
          listener.lineStart();
          interpolate(null, null, 1, listener);
          listener.lineEnd();
          listener.polygonEnd();
        }
      };
      function point(λ, φ) {
        var point = rotate(λ, φ);
        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);
      }
      function pointLine(λ, φ) {
        var point = rotate(λ, φ);
        line.point(point[0], point[1]);
      }
      function lineStart() {
        clip.point = pointLine;
        line.lineStart();
      }
      function lineEnd() {
        clip.point = point;
        line.lineEnd();
      }
      var segments;
      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygon, ring;
      function pointRing(λ, φ) {
        ring.push([ λ, φ ]);
        var point = rotate(λ, φ);
        ringListener.point(point[0], point[1]);
      }
      function ringStart() {
        ringListener.lineStart();
        ring = [];
      }
      function ringEnd() {
        pointRing(ring[0][0], ring[0][1]);
        ringListener.lineEnd();
        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;
        ring.pop();
        polygon.push(ring);
        ring = null;
        if (!n) return;
        if (clean & 1) {
          segment = ringSegments[0];
          var n = segment.length - 1, i = -1, point;
          listener.lineStart();
          while (++i < n) listener.point((point = segment[i])[0], point[1]);
          listener.lineEnd();
          return;
        }
        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));
      }
      return clip;
    };
  }
  function d3_geo_clipSegmentLength1(segment) {
    return segment.length > 1;
  }
  function d3_geo_clipBufferListener() {
    var lines = [], line;
    return {
      lineStart: function() {
        lines.push(line = []);
      },
      point: function(λ, φ) {
        line.push([ λ, φ ]);
      },
      lineEnd: d3_noop,
      buffer: function() {
        var buffer = lines;
        lines = [];
        line = null;
        return buffer;
      },
      rejoin: function() {
        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
      }
    };
  }
  function d3_geo_clipSort(a, b) {
    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);
  }
  function d3_geo_pointInPolygon(point, polygon) {
    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;
    d3_geo_areaRingSum.reset();
    for (var i = 0, n = polygon.length; i < n; ++i) {
      var ring = polygon[i], m = ring.length;
      if (!m) continue;
      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;
      while (true) {
        if (j === m) j = 0;
        point = ring[j];
        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, antimeridian = abs(dλ) > π, k = sinφ0 * sinφ;
        d3_geo_areaRingSum.add(Math.atan2(k * Math.sin(dλ), cosφ0 * cosφ + k * Math.cos(dλ)));
        polarAngle += antimeridian ? dλ + (dλ >= 0 ? τ : -τ) : dλ;
        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {
          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));
          d3_geo_cartesianNormalize(arc);
          var intersection = d3_geo_cartesianCross(meridianNormal, arc);
          d3_geo_cartesianNormalize(intersection);
          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);
          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {
            winding += antimeridian ^ dλ >= 0 ? 1 : -1;
          }
        }
        if (!j++) break;
        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;
      }
    }
    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < 0) ^ winding & 1;
  }
  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);
  function d3_geo_clipAntimeridianLine(listener) {
    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;
    return {
      lineStart: function() {
        listener.lineStart();
        clean = 1;
      },
      point: function(λ1, φ1) {
        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);
        if (abs(dλ - π) < ε) {
          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);
          listener.point(sλ0, φ0);
          listener.lineEnd();
          listener.lineStart();
          listener.point(sλ1, φ0);
          listener.point(λ1, φ0);
          clean = 0;
        } else if (sλ0 !== sλ1 && dλ >= π) {
          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;
          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;
          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);
          listener.point(sλ0, φ0);
          listener.lineEnd();
          listener.lineStart();
          listener.point(sλ1, φ0);
          clean = 0;
        }
        listener.point(λ0 = λ1, φ0 = φ1);
        sλ0 = sλ1;
      },
      lineEnd: function() {
        listener.lineEnd();
        λ0 = φ0 = NaN;
      },
      clean: function() {
        return 2 - clean;
      }
    };
  }
  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {
    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);
    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;
  }
  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {
    var φ;
    if (from == null) {
      φ = direction * halfπ;
      listener.point(-π, φ);
      listener.point(0, φ);
      listener.point(π, φ);
      listener.point(π, 0);
      listener.point(π, -φ);
      listener.point(0, -φ);
      listener.point(-π, -φ);
      listener.point(-π, 0);
      listener.point(-π, φ);
    } else if (abs(from[0] - to[0]) > ε) {
      var s = from[0] < to[0] ? π : -π;
      φ = direction * s / 2;
      listener.point(-s, φ);
      listener.point(0, φ);
      listener.point(s, φ);
    } else {
      listener.point(to[0], to[1]);
    }
  }
  function d3_geo_clipCircle(radius) {
    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);
    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);
    function visible(λ, φ) {
      return Math.cos(λ) * Math.cos(φ) > cr;
    }
    function clipLine(listener) {
      var point0, c0, v0, v00, clean;
      return {
        lineStart: function() {
          v00 = v0 = false;
          clean = 1;
        },
        point: function(λ, φ) {
          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;
          if (!point0 && (v00 = v0 = v)) listener.lineStart();
          if (v !== v0) {
            point2 = intersect(point0, point1);
            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {
              point1[0] += ε;
              point1[1] += ε;
              v = visible(point1[0], point1[1]);
            }
          }
          if (v !== v0) {
            clean = 0;
            if (v) {
              listener.lineStart();
              point2 = intersect(point1, point0);
              listener.point(point2[0], point2[1]);
            } else {
              point2 = intersect(point0, point1);
              listener.point(point2[0], point2[1]);
              listener.lineEnd();
            }
            point0 = point2;
          } else if (notHemisphere && point0 && smallRadius ^ v) {
            var t;
            if (!(c & c0) && (t = intersect(point1, point0, true))) {
              clean = 0;
              if (smallRadius) {
                listener.lineStart();
                listener.point(t[0][0], t[0][1]);
                listener.point(t[1][0], t[1][1]);
                listener.lineEnd();
              } else {
                listener.point(t[1][0], t[1][1]);
                listener.lineEnd();
                listener.lineStart();
                listener.point(t[0][0], t[0][1]);
              }
            }
          }
          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {
            listener.point(point1[0], point1[1]);
          }
          point0 = point1, v0 = v, c0 = c;
        },
        lineEnd: function() {
          if (v0) listener.lineEnd();
          point0 = null;
        },
        clean: function() {
          return clean | (v00 && v0) << 1;
        }
      };
    }
    function intersect(a, b, two) {
      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);
      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
      if (!determinant) return !two && a;
      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);
      d3_geo_cartesianAdd(A, B);
      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);
      if (t2 < 0) return;
      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);
      d3_geo_cartesianAdd(q, A);
      q = d3_geo_spherical(q);
      if (!two) return q;
      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;
      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;
      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;
      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;
      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {
        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);
        d3_geo_cartesianAdd(q1, A);
        return [ q, d3_geo_spherical(q1) ];
      }
    }
    function code(λ, φ) {
      var r = smallRadius ? radius : π - radius, code = 0;
      if (λ < -r) code |= 1; else if (λ > r) code |= 2;
      if (φ < -r) code |= 4; else if (φ > r) code |= 8;
      return code;
    }
  }
  function d3_geom_clipLine(x0, y0, x1, y1) {
    return function(line) {
      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
      r = x0 - ax;
      if (!dx && r > 0) return;
      r /= dx;
      if (dx < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      } else if (dx > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      }
      r = x1 - ax;
      if (!dx && r < 0) return;
      r /= dx;
      if (dx < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      } else if (dx > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      }
      r = y0 - ay;
      if (!dy && r > 0) return;
      r /= dy;
      if (dy < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      } else if (dy > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      }
      r = y1 - ay;
      if (!dy && r < 0) return;
      r /= dy;
      if (dy < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      } else if (dy > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      }
      if (t0 > 0) line.a = {
        x: ax + t0 * dx,
        y: ay + t0 * dy
      };
      if (t1 < 1) line.b = {
        x: ax + t1 * dx,
        y: ay + t1 * dy
      };
      return line;
    };
  }
  var d3_geo_clipExtentMAX = 1e9;
  d3.geo.clipExtent = function() {
    var x0, y0, x1, y1, stream, clip, clipExtent = {
      stream: function(output) {
        if (stream) stream.valid = false;
        stream = clip(output);
        stream.valid = true;
        return stream;
      },
      extent: function(_) {
        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);
        if (stream) stream.valid = false, stream = null;
        return clipExtent;
      }
    };
    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);
  };
  function d3_geo_clipExtent(x0, y0, x1, y1) {
    return function(listener) {
      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;
      var clip = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          listener = bufferListener;
          segments = [];
          polygon = [];
          clean = true;
        },
        polygonEnd: function() {
          listener = listener_;
          segments = d3.merge(segments);
          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;
          if (inside || visible) {
            listener.polygonStart();
            if (inside) {
              listener.lineStart();
              interpolate(null, null, 1, listener);
              listener.lineEnd();
            }
            if (visible) {
              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);
            }
            listener.polygonEnd();
          }
          segments = polygon = ring = null;
        }
      };
      function insidePolygon(p) {
        var wn = 0, n = polygon.length, y = p[1];
        for (var i = 0; i < n; ++i) {
          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {
            b = v[j];
            if (a[1] <= y) {
              if (b[1] > y && isLeft(a, b, p) > 0) ++wn;
            } else {
              if (b[1] <= y && isLeft(a, b, p) < 0) --wn;
            }
            a = b;
          }
        }
        return wn !== 0;
      }
      function isLeft(a, b, c) {
        return (b[0] - a[0]) * (c[1] - a[1]) - (c[0] - a[0]) * (b[1] - a[1]);
      }
      function interpolate(from, to, direction, listener) {
        var a = 0, a1 = 0;
        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {
          do {
            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
          } while ((a = (a + direction + 4) % 4) !== a1);
        } else {
          listener.point(to[0], to[1]);
        }
      }
      function pointVisible(x, y) {
        return x0 <= x && x <= x1 && y0 <= y && y <= y1;
      }
      function point(x, y) {
        if (pointVisible(x, y)) listener.point(x, y);
      }
      var x__, y__, v__, x_, y_, v_, first, clean;
      function lineStart() {
        clip.point = linePoint;
        if (polygon) polygon.push(ring = []);
        first = true;
        v_ = false;
        x_ = y_ = NaN;
      }
      function lineEnd() {
        if (segments) {
          linePoint(x__, y__);
          if (v__ && v_) bufferListener.rejoin();
          segments.push(bufferListener.buffer());
        }
        clip.point = point;
        if (v_) listener.lineEnd();
      }
      function linePoint(x, y) {
        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));
        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));
        var v = pointVisible(x, y);
        if (polygon) ring.push([ x, y ]);
        if (first) {
          x__ = x, y__ = y, v__ = v;
          first = false;
          if (v) {
            listener.lineStart();
            listener.point(x, y);
          }
        } else {
          if (v && v_) listener.point(x, y); else {
            var l = {
              a: {
                x: x_,
                y: y_
              },
              b: {
                x: x,
                y: y
              }
            };
            if (clipLine(l)) {
              if (!v_) {
                listener.lineStart();
                listener.point(l.a.x, l.a.y);
              }
              listener.point(l.b.x, l.b.y);
              if (!v) listener.lineEnd();
              clean = false;
            } else if (v) {
              listener.lineStart();
              listener.point(x, y);
              clean = false;
            }
          }
        }
        x_ = x, y_ = y, v_ = v;
      }
      return clip;
    };
    function corner(p, direction) {
      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
    }
    function compare(a, b) {
      return comparePoints(a.x, b.x);
    }
    function comparePoints(a, b) {
      var ca = corner(a, 1), cb = corner(b, 1);
      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
    }
  }
  function d3_geo_compose(a, b) {
    function compose(x, y) {
      return x = a(x, y), b(x[0], x[1]);
    }
    if (a.invert && b.invert) compose.invert = function(x, y) {
      return x = b.invert(x, y), x && a.invert(x[0], x[1]);
    };
    return compose;
  }
  function d3_geo_conic(projectAt) {
    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);
    p.parallels = function(_) {
      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];
      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);
    };
    return p;
  }
  function d3_geo_conicEqualArea(φ0, φ1) {
    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;
    function forward(λ, φ) {
      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;
      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = ρ0 - y;
      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];
    };
    return forward;
  }
  (d3.geo.conicEqualArea = function() {
    return d3_geo_conic(d3_geo_conicEqualArea);
  }).raw = d3_geo_conicEqualArea;
  d3.geo.albers = function() {
    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);
  };
  d3.geo.albersUsa = function() {
    var lower48 = d3.geo.albers();
    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);
    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);
    var point, pointStream = {
      point: function(x, y) {
        point = [ x, y ];
      }
    }, lower48Point, alaskaPoint, hawaiiPoint;
    function albersUsa(coordinates) {
      var x = coordinates[0], y = coordinates[1];
      point = null;
      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);
      return point;
    }
    albersUsa.invert = function(coordinates) {
      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;
      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);
    };
    albersUsa.stream = function(stream) {
      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);
      return {
        point: function(x, y) {
          lower48Stream.point(x, y);
          alaskaStream.point(x, y);
          hawaiiStream.point(x, y);
        },
        sphere: function() {
          lower48Stream.sphere();
          alaskaStream.sphere();
          hawaiiStream.sphere();
        },
        lineStart: function() {
          lower48Stream.lineStart();
          alaskaStream.lineStart();
          hawaiiStream.lineStart();
        },
        lineEnd: function() {
          lower48Stream.lineEnd();
          alaskaStream.lineEnd();
          hawaiiStream.lineEnd();
        },
        polygonStart: function() {
          lower48Stream.polygonStart();
          alaskaStream.polygonStart();
          hawaiiStream.polygonStart();
        },
        polygonEnd: function() {
          lower48Stream.polygonEnd();
          alaskaStream.polygonEnd();
          hawaiiStream.polygonEnd();
        }
      };
    };
    albersUsa.precision = function(_) {
      if (!arguments.length) return lower48.precision();
      lower48.precision(_);
      alaska.precision(_);
      hawaii.precision(_);
      return albersUsa;
    };
    albersUsa.scale = function(_) {
      if (!arguments.length) return lower48.scale();
      lower48.scale(_);
      alaska.scale(_ * .35);
      hawaii.scale(_);
      return albersUsa.translate(lower48.translate());
    };
    albersUsa.translate = function(_) {
      if (!arguments.length) return lower48.translate();
      var k = lower48.scale(), x = +_[0], y = +_[1];
      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;
      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
      return albersUsa;
    };
    return albersUsa.scale(1070);
  };
  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {
    point: d3_noop,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: function() {
      d3_geo_pathAreaPolygon = 0;
      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;
    },
    polygonEnd: function() {
      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;
      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);
    }
  };
  function d3_geo_pathAreaRingStart() {
    var x00, y00, x0, y0;
    d3_geo_pathArea.point = function(x, y) {
      d3_geo_pathArea.point = nextPoint;
      x00 = x0 = x, y00 = y0 = y;
    };
    function nextPoint(x, y) {
      d3_geo_pathAreaPolygon += y0 * x - x0 * y;
      x0 = x, y0 = y;
    }
    d3_geo_pathArea.lineEnd = function() {
      nextPoint(x00, y00);
    };
  }
  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;
  var d3_geo_pathBounds = {
    point: d3_geo_pathBoundsPoint,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: d3_noop,
    polygonEnd: d3_noop
  };
  function d3_geo_pathBoundsPoint(x, y) {
    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;
    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;
    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;
    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;
  }
  function d3_geo_pathBuffer() {
    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];
    var stream = {
      point: point,
      lineStart: function() {
        stream.point = pointLineStart;
      },
      lineEnd: lineEnd,
      polygonStart: function() {
        stream.lineEnd = lineEndPolygon;
      },
      polygonEnd: function() {
        stream.lineEnd = lineEnd;
        stream.point = point;
      },
      pointRadius: function(_) {
        pointCircle = d3_geo_pathBufferCircle(_);
        return stream;
      },
      result: function() {
        if (buffer.length) {
          var result = buffer.join("");
          buffer = [];
          return result;
        }
      }
    };
    function point(x, y) {
      buffer.push("M", x, ",", y, pointCircle);
    }
    function pointLineStart(x, y) {
      buffer.push("M", x, ",", y);
      stream.point = pointLine;
    }
    function pointLine(x, y) {
      buffer.push("L", x, ",", y);
    }
    function lineEnd() {
      stream.point = point;
    }
    function lineEndPolygon() {
      buffer.push("Z");
    }
    return stream;
  }
  function d3_geo_pathBufferCircle(radius) {
    return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
  }
  var d3_geo_pathCentroid = {
    point: d3_geo_pathCentroidPoint,
    lineStart: d3_geo_pathCentroidLineStart,
    lineEnd: d3_geo_pathCentroidLineEnd,
    polygonStart: function() {
      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;
    },
    polygonEnd: function() {
      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;
      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;
    }
  };
  function d3_geo_pathCentroidPoint(x, y) {
    d3_geo_centroidX0 += x;
    d3_geo_centroidY0 += y;
    ++d3_geo_centroidZ0;
  }
  function d3_geo_pathCentroidLineStart() {
    var x0, y0;
    d3_geo_pathCentroid.point = function(x, y) {
      d3_geo_pathCentroid.point = nextPoint;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    };
    function nextPoint(x, y) {
      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
      d3_geo_centroidX1 += z * (x0 + x) / 2;
      d3_geo_centroidY1 += z * (y0 + y) / 2;
      d3_geo_centroidZ1 += z;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    }
  }
  function d3_geo_pathCentroidLineEnd() {
    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
  }
  function d3_geo_pathCentroidRingStart() {
    var x00, y00, x0, y0;
    d3_geo_pathCentroid.point = function(x, y) {
      d3_geo_pathCentroid.point = nextPoint;
      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);
    };
    function nextPoint(x, y) {
      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
      d3_geo_centroidX1 += z * (x0 + x) / 2;
      d3_geo_centroidY1 += z * (y0 + y) / 2;
      d3_geo_centroidZ1 += z;
      z = y0 * x - x0 * y;
      d3_geo_centroidX2 += z * (x0 + x);
      d3_geo_centroidY2 += z * (y0 + y);
      d3_geo_centroidZ2 += z * 3;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    }
    d3_geo_pathCentroid.lineEnd = function() {
      nextPoint(x00, y00);
    };
  }
  function d3_geo_pathContext(context) {
    var pointRadius = 4.5;
    var stream = {
      point: point,
      lineStart: function() {
        stream.point = pointLineStart;
      },
      lineEnd: lineEnd,
      polygonStart: function() {
        stream.lineEnd = lineEndPolygon;
      },
      polygonEnd: function() {
        stream.lineEnd = lineEnd;
        stream.point = point;
      },
      pointRadius: function(_) {
        pointRadius = _;
        return stream;
      },
      result: d3_noop
    };
    function point(x, y) {
      context.moveTo(x, y);
      context.arc(x, y, pointRadius, 0, τ);
    }
    function pointLineStart(x, y) {
      context.moveTo(x, y);
      stream.point = pointLine;
    }
    function pointLine(x, y) {
      context.lineTo(x, y);
    }
    function lineEnd() {
      stream.point = point;
    }
    function lineEndPolygon() {
      context.closePath();
    }
    return stream;
  }
  function d3_geo_resample(project) {
    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;
    function resample(stream) {
      return (maxDepth ? resampleRecursive : resampleNone)(stream);
    }
    function resampleNone(stream) {
      return d3_geo_transformPoint(stream, function(x, y) {
        x = project(x, y);
        stream.point(x[0], x[1]);
      });
    }
    function resampleRecursive(stream) {
      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;
      var resample = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          stream.polygonStart();
          resample.lineStart = ringStart;
        },
        polygonEnd: function() {
          stream.polygonEnd();
          resample.lineStart = lineStart;
        }
      };
      function point(x, y) {
        x = project(x, y);
        stream.point(x[0], x[1]);
      }
      function lineStart() {
        x0 = NaN;
        resample.point = linePoint;
        stream.lineStart();
      }
      function linePoint(λ, φ) {
        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);
        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
        stream.point(x0, y0);
      }
      function lineEnd() {
        resample.point = point;
        stream.lineEnd();
      }
      function ringStart() {
        lineStart();
        resample.point = ringPoint;
        resample.lineEnd = ringEnd;
      }
      function ringPoint(λ, φ) {
        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
        resample.point = linePoint;
      }
      function ringEnd() {
        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);
        resample.lineEnd = lineEnd;
        lineEnd();
      }
      return resample;
    }
    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {
      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;
      if (d2 > 4 * δ2 && depth--) {
        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;
        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);
          stream.point(x2, y2);
          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);
        }
      }
    }
    resample.precision = function(_) {
      if (!arguments.length) return Math.sqrt(δ2);
      maxDepth = (δ2 = _ * _) > 0 && 16;
      return resample;
    };
    return resample;
  }
  d3.geo.path = function() {
    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;
    function path(object) {
      if (object) {
        if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);
        d3.geo.stream(object, cacheStream);
      }
      return contextStream.result();
    }
    path.area = function(object) {
      d3_geo_pathAreaSum = 0;
      d3.geo.stream(object, projectStream(d3_geo_pathArea));
      return d3_geo_pathAreaSum;
    };
    path.centroid = function(object) {
      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));
      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];
    };
    path.bounds = function(object) {
      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);
      d3.geo.stream(object, projectStream(d3_geo_pathBounds));
      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];
    };
    path.projection = function(_) {
      if (!arguments.length) return projection;
      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;
      return reset();
    };
    path.context = function(_) {
      if (!arguments.length) return context;
      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);
      if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
      return reset();
    };
    path.pointRadius = function(_) {
      if (!arguments.length) return pointRadius;
      pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
      return path;
    };
    function reset() {
      cacheStream = null;
      return path;
    }
    return path.projection(d3.geo.albersUsa()).context(null);
  };
  function d3_geo_pathProjectStream(project) {
    var resample = d3_geo_resample(function(x, y) {
      return project([ x * d3_degrees, y * d3_degrees ]);
    });
    return function(stream) {
      return d3_geo_projectionRadians(resample(stream));
    };
  }
  d3.geo.transform = function(methods) {
    return {
      stream: function(stream) {
        var transform = new d3_geo_transform(stream);
        for (var k in methods) transform[k] = methods[k];
        return transform;
      }
    };
  };
  function d3_geo_transform(stream) {
    this.stream = stream;
  }
  d3_geo_transform.prototype = {
    point: function(x, y) {
      this.stream.point(x, y);
    },
    sphere: function() {
      this.stream.sphere();
    },
    lineStart: function() {
      this.stream.lineStart();
    },
    lineEnd: function() {
      this.stream.lineEnd();
    },
    polygonStart: function() {
      this.stream.polygonStart();
    },
    polygonEnd: function() {
      this.stream.polygonEnd();
    }
  };
  function d3_geo_transformPoint(stream, point) {
    return {
      point: point,
      sphere: function() {
        stream.sphere();
      },
      lineStart: function() {
        stream.lineStart();
      },
      lineEnd: function() {
        stream.lineEnd();
      },
      polygonStart: function() {
        stream.polygonStart();
      },
      polygonEnd: function() {
        stream.polygonEnd();
      }
    };
  }
  d3.geo.projection = d3_geo_projection;
  d3.geo.projectionMutator = d3_geo_projectionMutator;
  function d3_geo_projection(project) {
    return d3_geo_projectionMutator(function() {
      return project;
    })();
  }
  function d3_geo_projectionMutator(projectAt) {
    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {
      x = project(x, y);
      return [ x[0] * k + δx, δy - x[1] * k ];
    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;
    function projection(point) {
      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);
      return [ point[0] * k + δx, δy - point[1] * k ];
    }
    function invert(point) {
      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);
      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];
    }
    projection.stream = function(output) {
      if (stream) stream.valid = false;
      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));
      stream.valid = true;
      return stream;
    };
    projection.clipAngle = function(_) {
      if (!arguments.length) return clipAngle;
      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);
      return invalidate();
    };
    projection.clipExtent = function(_) {
      if (!arguments.length) return clipExtent;
      clipExtent = _;
      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;
      return invalidate();
    };
    projection.scale = function(_) {
      if (!arguments.length) return k;
      k = +_;
      return reset();
    };
    projection.translate = function(_) {
      if (!arguments.length) return [ x, y ];
      x = +_[0];
      y = +_[1];
      return reset();
    };
    projection.center = function(_) {
      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];
      λ = _[0] % 360 * d3_radians;
      φ = _[1] % 360 * d3_radians;
      return reset();
    };
    projection.rotate = function(_) {
      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];
      δλ = _[0] % 360 * d3_radians;
      δφ = _[1] % 360 * d3_radians;
      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;
      return reset();
    };
    d3.rebind(projection, projectResample, "precision");
    function reset() {
      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);
      var center = project(λ, φ);
      δx = x - center[0] * k;
      δy = y + center[1] * k;
      return invalidate();
    }
    function invalidate() {
      if (stream) stream.valid = false, stream = null;
      return projection;
    }
    return function() {
      project = projectAt.apply(this, arguments);
      projection.invert = project.invert && invert;
      return reset();
    };
  }
  function d3_geo_projectionRadians(stream) {
    return d3_geo_transformPoint(stream, function(x, y) {
      stream.point(x * d3_radians, y * d3_radians);
    });
  }
  function d3_geo_equirectangular(λ, φ) {
    return [ λ, φ ];
  }
  (d3.geo.equirectangular = function() {
    return d3_geo_projection(d3_geo_equirectangular);
  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;
  d3.geo.rotation = function(rotate) {
    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);
    function forward(coordinates) {
      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
    }
    forward.invert = function(coordinates) {
      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
    };
    return forward;
  };
  function d3_geo_identityRotation(λ, φ) {
    return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
  }
  d3_geo_identityRotation.invert = d3_geo_equirectangular;
  function d3_geo_rotation(δλ, δφ, δγ) {
    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;
  }
  function d3_geo_forwardRotationλ(δλ) {
    return function(λ, φ) {
      return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
    };
  }
  function d3_geo_rotationλ(δλ) {
    var rotation = d3_geo_forwardRotationλ(δλ);
    rotation.invert = d3_geo_forwardRotationλ(-δλ);
    return rotation;
  }
  function d3_geo_rotationφγ(δφ, δγ) {
    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);
    function rotation(λ, φ) {
      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;
      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];
    }
    rotation.invert = function(λ, φ) {
      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;
      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];
    };
    return rotation;
  }
  d3.geo.circle = function() {
    var origin = [ 0, 0 ], angle, precision = 6, interpolate;
    function circle() {
      var center = typeof origin === "function" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];
      interpolate(null, null, 1, {
        point: function(x, y) {
          ring.push(x = rotate(x, y));
          x[0] *= d3_degrees, x[1] *= d3_degrees;
        }
      });
      return {
        type: "Polygon",
        coordinates: [ ring ]
      };
    }
    circle.origin = function(x) {
      if (!arguments.length) return origin;
      origin = x;
      return circle;
    };
    circle.angle = function(x) {
      if (!arguments.length) return angle;
      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);
      return circle;
    };
    circle.precision = function(_) {
      if (!arguments.length) return precision;
      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);
      return circle;
    };
    return circle.angle(90);
  };
  function d3_geo_circleInterpolate(radius, precision) {
    var cr = Math.cos(radius), sr = Math.sin(radius);
    return function(from, to, direction, listener) {
      var step = direction * precision;
      if (from != null) {
        from = d3_geo_circleAngle(cr, from);
        to = d3_geo_circleAngle(cr, to);
        if (direction > 0 ? from < to : from > to) from += direction * τ;
      } else {
        from = radius + direction * τ;
        to = radius - .5 * step;
      }
      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {
        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);
      }
    };
  }
  function d3_geo_circleAngle(cr, point) {
    var a = d3_geo_cartesian(point);
    a[0] -= cr;
    d3_geo_cartesianNormalize(a);
    var angle = d3_acos(-a[1]);
    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);
  }
  d3.geo.distance = function(a, b) {
    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;
    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);
  };
  d3.geo.graticule = function() {
    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;
    function graticule() {
      return {
        type: "MultiLineString",
        coordinates: lines()
      };
    }
    function lines() {
      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {
        return abs(x % DX) > ε;
      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {
        return abs(y % DY) > ε;
      }).map(y));
    }
    graticule.lines = function() {
      return lines().map(function(coordinates) {
        return {
          type: "LineString",
          coordinates: coordinates
        };
      });
    };
    graticule.outline = function() {
      return {
        type: "Polygon",
        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]
      };
    };
    graticule.extent = function(_) {
      if (!arguments.length) return graticule.minorExtent();
      return graticule.majorExtent(_).minorExtent(_);
    };
    graticule.majorExtent = function(_) {
      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];
      X0 = +_[0][0], X1 = +_[1][0];
      Y0 = +_[0][1], Y1 = +_[1][1];
      if (X0 > X1) _ = X0, X0 = X1, X1 = _;
      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
      return graticule.precision(precision);
    };
    graticule.minorExtent = function(_) {
      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
      x0 = +_[0][0], x1 = +_[1][0];
      y0 = +_[0][1], y1 = +_[1][1];
      if (x0 > x1) _ = x0, x0 = x1, x1 = _;
      if (y0 > y1) _ = y0, y0 = y1, y1 = _;
      return graticule.precision(precision);
    };
    graticule.step = function(_) {
      if (!arguments.length) return graticule.minorStep();
      return graticule.majorStep(_).minorStep(_);
    };
    graticule.majorStep = function(_) {
      if (!arguments.length) return [ DX, DY ];
      DX = +_[0], DY = +_[1];
      return graticule;
    };
    graticule.minorStep = function(_) {
      if (!arguments.length) return [ dx, dy ];
      dx = +_[0], dy = +_[1];
      return graticule;
    };
    graticule.precision = function(_) {
      if (!arguments.length) return precision;
      precision = +_;
      x = d3_geo_graticuleX(y0, y1, 90);
      y = d3_geo_graticuleY(x0, x1, precision);
      X = d3_geo_graticuleX(Y0, Y1, 90);
      Y = d3_geo_graticuleY(X0, X1, precision);
      return graticule;
    };
    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);
  };
  function d3_geo_graticuleX(y0, y1, dy) {
    var y = d3.range(y0, y1 - ε, dy).concat(y1);
    return function(x) {
      return y.map(function(y) {
        return [ x, y ];
      });
    };
  }
  function d3_geo_graticuleY(x0, x1, dx) {
    var x = d3.range(x0, x1 - ε, dx).concat(x1);
    return function(y) {
      return x.map(function(x) {
        return [ x, y ];
      });
    };
  }
  function d3_source(d) {
    return d.source;
  }
  function d3_target(d) {
    return d.target;
  }
  d3.geo.greatArc = function() {
    var source = d3_source, source_, target = d3_target, target_;
    function greatArc() {
      return {
        type: "LineString",
        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]
      };
    }
    greatArc.distance = function() {
      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));
    };
    greatArc.source = function(_) {
      if (!arguments.length) return source;
      source = _, source_ = typeof _ === "function" ? null : _;
      return greatArc;
    };
    greatArc.target = function(_) {
      if (!arguments.length) return target;
      target = _, target_ = typeof _ === "function" ? null : _;
      return greatArc;
    };
    greatArc.precision = function() {
      return arguments.length ? greatArc : 0;
    };
    return greatArc;
  };
  d3.geo.interpolate = function(source, target) {
    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);
  };
  function d3_geo_interpolate(x0, y0, x1, y1) {
    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);
    var interpolate = d ? function(t) {
      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;
      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];
    } : function() {
      return [ x0 * d3_degrees, y0 * d3_degrees ];
    };
    interpolate.distance = d;
    return interpolate;
  }
  d3.geo.length = function(object) {
    d3_geo_lengthSum = 0;
    d3.geo.stream(object, d3_geo_length);
    return d3_geo_lengthSum;
  };
  var d3_geo_lengthSum;
  var d3_geo_length = {
    sphere: d3_noop,
    point: d3_noop,
    lineStart: d3_geo_lengthLineStart,
    lineEnd: d3_noop,
    polygonStart: d3_noop,
    polygonEnd: d3_noop
  };
  function d3_geo_lengthLineStart() {
    var λ0, sinφ0, cosφ0;
    d3_geo_length.point = function(λ, φ) {
      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);
      d3_geo_length.point = nextPoint;
    };
    d3_geo_length.lineEnd = function() {
      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;
    };
    function nextPoint(λ, φ) {
      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);
      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);
      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;
    }
  }
  function d3_geo_azimuthal(scale, angle) {
    function azimuthal(λ, φ) {
      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);
      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];
    }
    azimuthal.invert = function(x, y) {
      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);
      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];
    };
    return azimuthal;
  }
  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {
    return Math.sqrt(2 / (1 + cosλcosφ));
  }, function(ρ) {
    return 2 * Math.asin(ρ / 2);
  });
  (d3.geo.azimuthalEqualArea = function() {
    return d3_geo_projection(d3_geo_azimuthalEqualArea);
  }).raw = d3_geo_azimuthalEqualArea;
  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {
    var c = Math.acos(cosλcosφ);
    return c && c / Math.sin(c);
  }, d3_identity);
  (d3.geo.azimuthalEquidistant = function() {
    return d3_geo_projection(d3_geo_azimuthalEquidistant);
  }).raw = d3_geo_azimuthalEquidistant;
  function d3_geo_conicConformal(φ0, φ1) {
    var cosφ0 = Math.cos(φ0), t = function(φ) {
      return Math.tan(π / 4 + φ / 2);
    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;
    if (!n) return d3_geo_mercator;
    function forward(λ, φ) {
      var ρ = abs(abs(φ) - halfπ) < ε ? 0 : F / Math.pow(t(φ), n);
      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);
      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];
    };
    return forward;
  }
  (d3.geo.conicConformal = function() {
    return d3_geo_conic(d3_geo_conicConformal);
  }).raw = d3_geo_conicConformal;
  function d3_geo_conicEquidistant(φ0, φ1) {
    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;
    if (abs(n) < ε) return d3_geo_equirectangular;
    function forward(λ, φ) {
      var ρ = G - φ;
      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = G - y;
      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];
    };
    return forward;
  }
  (d3.geo.conicEquidistant = function() {
    return d3_geo_conic(d3_geo_conicEquidistant);
  }).raw = d3_geo_conicEquidistant;
  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {
    return 1 / cosλcosφ;
  }, Math.atan);
  (d3.geo.gnomonic = function() {
    return d3_geo_projection(d3_geo_gnomonic);
  }).raw = d3_geo_gnomonic;
  function d3_geo_mercator(λ, φ) {
    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];
  }
  d3_geo_mercator.invert = function(x, y) {
    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];
  };
  function d3_geo_mercatorProjection(project) {
    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;
    m.scale = function() {
      var v = scale.apply(m, arguments);
      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
    };
    m.translate = function() {
      var v = translate.apply(m, arguments);
      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
    };
    m.clipExtent = function(_) {
      var v = clipExtent.apply(m, arguments);
      if (v === m) {
        if (clipAuto = _ == null) {
          var k = π * scale(), t = translate();
          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);
        }
      } else if (clipAuto) {
        v = null;
      }
      return v;
    };
    return m.clipExtent(null);
  }
  (d3.geo.mercator = function() {
    return d3_geo_mercatorProjection(d3_geo_mercator);
  }).raw = d3_geo_mercator;
  var d3_geo_orthographic = d3_geo_azimuthal(function() {
    return 1;
  }, Math.asin);
  (d3.geo.orthographic = function() {
    return d3_geo_projection(d3_geo_orthographic);
  }).raw = d3_geo_orthographic;
  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {
    return 1 / (1 + cosλcosφ);
  }, function(ρ) {
    return 2 * Math.atan(ρ);
  });
  (d3.geo.stereographic = function() {
    return d3_geo_projection(d3_geo_stereographic);
  }).raw = d3_geo_stereographic;
  function d3_geo_transverseMercator(λ, φ) {
    var B = Math.cos(φ) * Math.sin(λ);
    return [ Math.log((1 + B) / (1 - B)) / 2, Math.atan2(Math.tan(φ), Math.cos(λ)) ];
  }
  d3_geo_transverseMercator.invert = function(x, y) {
    return [ Math.atan2(d3_sinh(x), Math.cos(y)), d3_asin(Math.sin(y) / d3_cosh(x)) ];
  };
  (d3.geo.transverseMercator = function() {
    return d3_geo_mercatorProjection(d3_geo_transverseMercator);
  }).raw = d3_geo_transverseMercator;
  d3.geom = {};
  function d3_geom_pointX(d) {
    return d[0];
  }
  function d3_geom_pointY(d) {
    return d[1];
  }
  d3.geom.hull = function(vertices) {
    var x = d3_geom_pointX, y = d3_geom_pointY;
    if (arguments.length) return hull(vertices);
    function hull(data) {
      if (data.length < 3) return [];
      var fx = d3_functor(x), fy = d3_functor(y), n = data.length, vertices, plen = n - 1, points = [], stack = [], d, i, j, h = 0, x1, y1, x2, y2, u, v, a, sp;
      if (fx === d3_geom_pointX && y === d3_geom_pointY) vertices = data; else for (i = 0,
      vertices = []; i < n; ++i) {
        vertices.push([ +fx.call(this, d = data[i], i), +fy.call(this, d, i) ]);
      }
      for (i = 1; i < n; ++i) {
        if (vertices[i][1] < vertices[h][1] || vertices[i][1] == vertices[h][1] && vertices[i][0] < vertices[h][0]) h = i;
      }
      for (i = 0; i < n; ++i) {
        if (i === h) continue;
        y1 = vertices[i][1] - vertices[h][1];
        x1 = vertices[i][0] - vertices[h][0];
        points.push({
          angle: Math.atan2(y1, x1),
          index: i
        });
      }
      points.sort(function(a, b) {
        return a.angle - b.angle;
      });
      a = points[0].angle;
      v = points[0].index;
      u = 0;
      for (i = 1; i < plen; ++i) {
        j = points[i].index;
        if (a == points[i].angle) {
          x1 = vertices[v][0] - vertices[h][0];
          y1 = vertices[v][1] - vertices[h][1];
          x2 = vertices[j][0] - vertices[h][0];
          y2 = vertices[j][1] - vertices[h][1];
          if (x1 * x1 + y1 * y1 >= x2 * x2 + y2 * y2) {
            points[i].index = -1;
            continue;
          } else {
            points[u].index = -1;
          }
        }
        a = points[i].angle;
        u = i;
        v = j;
      }
      stack.push(h);
      for (i = 0, j = 0; i < 2; ++j) {
        if (points[j].index > -1) {
          stack.push(points[j].index);
          i++;
        }
      }
      sp = stack.length;
      for (;j < plen; ++j) {
        if (points[j].index < 0) continue;
        while (!d3_geom_hullCCW(stack[sp - 2], stack[sp - 1], points[j].index, vertices)) {
          --sp;
        }
        stack[sp++] = points[j].index;
      }
      var poly = [];
      for (i = sp - 1; i >= 0; --i) poly.push(data[stack[i]]);
      return poly;
    }
    hull.x = function(_) {
      return arguments.length ? (x = _, hull) : x;
    };
    hull.y = function(_) {
      return arguments.length ? (y = _, hull) : y;
    };
    return hull;
  };
  function d3_geom_hullCCW(i1, i2, i3, v) {
    var t, a, b, c, d, e, f;
    t = v[i1];
    a = t[0];
    b = t[1];
    t = v[i2];
    c = t[0];
    d = t[1];
    t = v[i3];
    e = t[0];
    f = t[1];
    return (f - b) * (c - a) - (d - b) * (e - a) > 0;
  }
  d3.geom.polygon = function(coordinates) {
    d3_subclass(coordinates, d3_geom_polygonPrototype);
    return coordinates;
  };
  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];
  d3_geom_polygonPrototype.area = function() {
    var i = -1, n = this.length, a, b = this[n - 1], area = 0;
    while (++i < n) {
      a = b;
      b = this[i];
      area += a[1] * b[0] - a[0] * b[1];
    }
    return area * .5;
  };
  d3_geom_polygonPrototype.centroid = function(k) {
    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;
    if (!arguments.length) k = -1 / (6 * this.area());
    while (++i < n) {
      a = b;
      b = this[i];
      c = a[0] * b[1] - b[0] * a[1];
      x += (a[0] + b[0]) * c;
      y += (a[1] + b[1]) * c;
    }
    return [ x * k, y * k ];
  };
  d3_geom_polygonPrototype.clip = function(subject) {
    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;
    while (++i < n) {
      input = subject.slice();
      subject.length = 0;
      b = this[i];
      c = input[(m = input.length - closed) - 1];
      j = -1;
      while (++j < m) {
        d = input[j];
        if (d3_geom_polygonInside(d, a, b)) {
          if (!d3_geom_polygonInside(c, a, b)) {
            subject.push(d3_geom_polygonIntersect(c, d, a, b));
          }
          subject.push(d);
        } else if (d3_geom_polygonInside(c, a, b)) {
          subject.push(d3_geom_polygonIntersect(c, d, a, b));
        }
        c = d;
      }
      if (closed) subject.push(subject[0]);
      a = b;
    }
    return subject;
  };
  function d3_geom_polygonInside(p, a, b) {
    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);
  }
  function d3_geom_polygonIntersect(c, d, a, b) {
    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);
    return [ x1 + ua * x21, y1 + ua * y21 ];
  }
  function d3_geom_polygonClosed(coordinates) {
    var a = coordinates[0], b = coordinates[coordinates.length - 1];
    return !(a[0] - b[0] || a[1] - b[1]);
  }
  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];
  function d3_geom_voronoiBeach() {
    d3_geom_voronoiRedBlackNode(this);
    this.edge = this.site = this.circle = null;
  }
  function d3_geom_voronoiCreateBeach(site) {
    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();
    beach.site = site;
    return beach;
  }
  function d3_geom_voronoiDetachBeach(beach) {
    d3_geom_voronoiDetachCircle(beach);
    d3_geom_voronoiBeaches.remove(beach);
    d3_geom_voronoiBeachPool.push(beach);
    d3_geom_voronoiRedBlackNode(beach);
  }
  function d3_geom_voronoiRemoveBeach(beach) {
    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {
      x: x,
      y: y
    }, previous = beach.P, next = beach.N, disappearing = [ beach ];
    d3_geom_voronoiDetachBeach(beach);
    var lArc = previous;
    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {
      previous = lArc.P;
      disappearing.unshift(lArc);
      d3_geom_voronoiDetachBeach(lArc);
      lArc = previous;
    }
    disappearing.unshift(lArc);
    d3_geom_voronoiDetachCircle(lArc);
    var rArc = next;
    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {
      next = rArc.N;
      disappearing.push(rArc);
      d3_geom_voronoiDetachBeach(rArc);
      rArc = next;
    }
    disappearing.push(rArc);
    d3_geom_voronoiDetachCircle(rArc);
    var nArcs = disappearing.length, iArc;
    for (iArc = 1; iArc < nArcs; ++iArc) {
      rArc = disappearing[iArc];
      lArc = disappearing[iArc - 1];
      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
    }
    lArc = disappearing[0];
    rArc = disappearing[nArcs - 1];
    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);
    d3_geom_voronoiAttachCircle(lArc);
    d3_geom_voronoiAttachCircle(rArc);
  }
  function d3_geom_voronoiAddBeach(site) {
    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;
    while (node) {
      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;
      if (dxl > ε) node = node.L; else {
        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);
        if (dxr > ε) {
          if (!node.R) {
            lArc = node;
            break;
          }
          node = node.R;
        } else {
          if (dxl > -ε) {
            lArc = node.P;
            rArc = node;
          } else if (dxr > -ε) {
            lArc = node;
            rArc = node.N;
          } else {
            lArc = rArc = node;
          }
          break;
        }
      }
    }
    var newArc = d3_geom_voronoiCreateBeach(site);
    d3_geom_voronoiBeaches.insert(lArc, newArc);
    if (!lArc && !rArc) return;
    if (lArc === rArc) {
      d3_geom_voronoiDetachCircle(lArc);
      rArc = d3_geom_voronoiCreateBeach(lArc.site);
      d3_geom_voronoiBeaches.insert(newArc, rArc);
      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
      d3_geom_voronoiAttachCircle(lArc);
      d3_geom_voronoiAttachCircle(rArc);
      return;
    }
    if (!rArc) {
      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
      return;
    }
    d3_geom_voronoiDetachCircle(lArc);
    d3_geom_voronoiDetachCircle(rArc);
    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {
      x: (cy * hb - by * hc) / d + ax,
      y: (bx * hc - cx * hb) / d + ay
    };
    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);
    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);
    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);
    d3_geom_voronoiAttachCircle(lArc);
    d3_geom_voronoiAttachCircle(rArc);
  }
  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {
    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;
    if (!pby2) return rfocx;
    var lArc = arc.P;
    if (!lArc) return -Infinity;
    site = lArc.site;
    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;
    if (!plby2) return lfocx;
    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;
    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
    return (rfocx + lfocx) / 2;
  }
  function d3_geom_voronoiRightBreakPoint(arc, directrix) {
    var rArc = arc.N;
    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);
    var site = arc.site;
    return site.y === directrix ? site.x : Infinity;
  }
  function d3_geom_voronoiCell(site) {
    this.site = site;
    this.edges = [];
  }
  d3_geom_voronoiCell.prototype.prepare = function() {
    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;
    while (iHalfEdge--) {
      edge = halfEdges[iHalfEdge].edge;
      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);
    }
    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);
    return halfEdges.length;
  };
  function d3_geom_voronoiCloseCells(extent) {
    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;
    while (iCell--) {
      cell = cells[iCell];
      if (!cell || !cell.prepare()) continue;
      halfEdges = cell.edges;
      nHalfEdges = halfEdges.length;
      iHalfEdge = 0;
      while (iHalfEdge < nHalfEdges) {
        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;
        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;
        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {
          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {
            x: x0,
            y: abs(x2 - x0) < ε ? y2 : y1
          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {
            x: abs(y2 - y1) < ε ? x2 : x1,
            y: y1
          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {
            x: x1,
            y: abs(x2 - x1) < ε ? y2 : y0
          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {
            x: abs(y2 - y0) < ε ? x2 : x0,
            y: y0
          } : null), cell.site, null));
          ++nHalfEdges;
        }
      }
    }
  }
  function d3_geom_voronoiHalfEdgeOrder(a, b) {
    return b.angle - a.angle;
  }
  function d3_geom_voronoiCircle() {
    d3_geom_voronoiRedBlackNode(this);
    this.x = this.y = this.arc = this.site = this.cy = null;
  }
  function d3_geom_voronoiAttachCircle(arc) {
    var lArc = arc.P, rArc = arc.N;
    if (!lArc || !rArc) return;
    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;
    if (lSite === rSite) return;
    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;
    var d = 2 * (ax * cy - ay * cx);
    if (d >= -ε2) return;
    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;
    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();
    circle.arc = arc;
    circle.site = cSite;
    circle.x = x + bx;
    circle.y = cy + Math.sqrt(x * x + y * y);
    circle.cy = cy;
    arc.circle = circle;
    var before = null, node = d3_geom_voronoiCircles._;
    while (node) {
      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
        if (node.L) node = node.L; else {
          before = node.P;
          break;
        }
      } else {
        if (node.R) node = node.R; else {
          before = node;
          break;
        }
      }
    }
    d3_geom_voronoiCircles.insert(before, circle);
    if (!before) d3_geom_voronoiFirstCircle = circle;
  }
  function d3_geom_voronoiDetachCircle(arc) {
    var circle = arc.circle;
    if (circle) {
      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;
      d3_geom_voronoiCircles.remove(circle);
      d3_geom_voronoiCirclePool.push(circle);
      d3_geom_voronoiRedBlackNode(circle);
      arc.circle = null;
    }
  }
  function d3_geom_voronoiClipEdges(extent) {
    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;
    while (i--) {
      e = edges[i];
      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {
        e.a = e.b = null;
        edges.splice(i, 1);
      }
    }
  }
  function d3_geom_voronoiConnectEdge(edge, extent) {
    var vb = edge.b;
    if (vb) return true;
    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;
    if (ry === ly) {
      if (fx < x0 || fx >= x1) return;
      if (lx > rx) {
        if (!va) va = {
          x: fx,
          y: y0
        }; else if (va.y >= y1) return;
        vb = {
          x: fx,
          y: y1
        };
      } else {
        if (!va) va = {
          x: fx,
          y: y1
        }; else if (va.y < y0) return;
        vb = {
          x: fx,
          y: y0
        };
      }
    } else {
      fm = (lx - rx) / (ry - ly);
      fb = fy - fm * fx;
      if (fm < -1 || fm > 1) {
        if (lx > rx) {
          if (!va) va = {
            x: (y0 - fb) / fm,
            y: y0
          }; else if (va.y >= y1) return;
          vb = {
            x: (y1 - fb) / fm,
            y: y1
          };
        } else {
          if (!va) va = {
            x: (y1 - fb) / fm,
            y: y1
          }; else if (va.y < y0) return;
          vb = {
            x: (y0 - fb) / fm,
            y: y0
          };
        }
      } else {
        if (ly < ry) {
          if (!va) va = {
            x: x0,
            y: fm * x0 + fb
          }; else if (va.x >= x1) return;
          vb = {
            x: x1,
            y: fm * x1 + fb
          };
        } else {
          if (!va) va = {
            x: x1,
            y: fm * x1 + fb
          }; else if (va.x < x0) return;
          vb = {
            x: x0,
            y: fm * x0 + fb
          };
        }
      }
    }
    edge.a = va;
    edge.b = vb;
    return true;
  }
  function d3_geom_voronoiEdge(lSite, rSite) {
    this.l = lSite;
    this.r = rSite;
    this.a = this.b = null;
  }
  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {
    var edge = new d3_geom_voronoiEdge(lSite, rSite);
    d3_geom_voronoiEdges.push(edge);
    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);
    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);
    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));
    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));
    return edge;
  }
  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {
    var edge = new d3_geom_voronoiEdge(lSite, null);
    edge.a = va;
    edge.b = vb;
    d3_geom_voronoiEdges.push(edge);
    return edge;
  }
  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {
    if (!edge.a && !edge.b) {
      edge.a = vertex;
      edge.l = lSite;
      edge.r = rSite;
    } else if (edge.l === rSite) {
      edge.b = vertex;
    } else {
      edge.a = vertex;
    }
  }
  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {
    var va = edge.a, vb = edge.b;
    this.edge = edge;
    this.site = lSite;
    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);
  }
  d3_geom_voronoiHalfEdge.prototype = {
    start: function() {
      return this.edge.l === this.site ? this.edge.a : this.edge.b;
    },
    end: function() {
      return this.edge.l === this.site ? this.edge.b : this.edge.a;
    }
  };
  function d3_geom_voronoiRedBlackTree() {
    this._ = null;
  }
  function d3_geom_voronoiRedBlackNode(node) {
    node.U = node.C = node.L = node.R = node.P = node.N = null;
  }
  d3_geom_voronoiRedBlackTree.prototype = {
    insert: function(after, node) {
      var parent, grandpa, uncle;
      if (after) {
        node.P = after;
        node.N = after.N;
        if (after.N) after.N.P = node;
        after.N = node;
        if (after.R) {
          after = after.R;
          while (after.L) after = after.L;
          after.L = node;
        } else {
          after.R = node;
        }
        parent = after;
      } else if (this._) {
        after = d3_geom_voronoiRedBlackFirst(this._);
        node.P = null;
        node.N = after;
        after.P = after.L = node;
        parent = after;
      } else {
        node.P = node.N = null;
        this._ = node;
        parent = null;
      }
      node.L = node.R = null;
      node.U = parent;
      node.C = true;
      after = node;
      while (parent && parent.C) {
        grandpa = parent.U;
        if (parent === grandpa.L) {
          uncle = grandpa.R;
          if (uncle && uncle.C) {
            parent.C = uncle.C = false;
            grandpa.C = true;
            after = grandpa;
          } else {
            if (after === parent.R) {
              d3_geom_voronoiRedBlackRotateLeft(this, parent);
              after = parent;
              parent = after.U;
            }
            parent.C = false;
            grandpa.C = true;
            d3_geom_voronoiRedBlackRotateRight(this, grandpa);
          }
        } else {
          uncle = grandpa.L;
          if (uncle && uncle.C) {
            parent.C = uncle.C = false;
            grandpa.C = true;
            after = grandpa;
          } else {
            if (after === parent.L) {
              d3_geom_voronoiRedBlackRotateRight(this, parent);
              after = parent;
              parent = after.U;
            }
            parent.C = false;
            grandpa.C = true;
            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);
          }
        }
        parent = after.U;
      }
      this._.C = false;
    },
    remove: function(node) {
      if (node.N) node.N.P = node.P;
      if (node.P) node.P.N = node.N;
      node.N = node.P = null;
      var parent = node.U, sibling, left = node.L, right = node.R, next, red;
      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);
      if (parent) {
        if (parent.L === node) parent.L = next; else parent.R = next;
      } else {
        this._ = next;
      }
      if (left && right) {
        red = next.C;
        next.C = node.C;
        next.L = left;
        left.U = next;
        if (next !== right) {
          parent = next.U;
          next.U = node.U;
          node = next.R;
          parent.L = node;
          next.R = right;
          right.U = next;
        } else {
          next.U = parent;
          parent = next;
          node = next.R;
        }
      } else {
        red = node.C;
        node = next;
      }
      if (node) node.U = parent;
      if (red) return;
      if (node && node.C) {
        node.C = false;
        return;
      }
      do {
        if (node === this._) break;
        if (node === parent.L) {
          sibling = parent.R;
          if (sibling.C) {
            sibling.C = false;
            parent.C = true;
            d3_geom_voronoiRedBlackRotateLeft(this, parent);
            sibling = parent.R;
          }
          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
            if (!sibling.R || !sibling.R.C) {
              sibling.L.C = false;
              sibling.C = true;
              d3_geom_voronoiRedBlackRotateRight(this, sibling);
              sibling = parent.R;
            }
            sibling.C = parent.C;
            parent.C = sibling.R.C = false;
            d3_geom_voronoiRedBlackRotateLeft(this, parent);
            node = this._;
            break;
          }
        } else {
          sibling = parent.L;
          if (sibling.C) {
            sibling.C = false;
            parent.C = true;
            d3_geom_voronoiRedBlackRotateRight(this, parent);
            sibling = parent.L;
          }
          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
            if (!sibling.L || !sibling.L.C) {
              sibling.R.C = false;
              sibling.C = true;
              d3_geom_voronoiRedBlackRotateLeft(this, sibling);
              sibling = parent.L;
            }
            sibling.C = parent.C;
            parent.C = sibling.L.C = false;
            d3_geom_voronoiRedBlackRotateRight(this, parent);
            node = this._;
            break;
          }
        }
        sibling.C = true;
        node = parent;
        parent = parent.U;
      } while (!node.C);
      if (node) node.C = false;
    }
  };
  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {
    var p = node, q = node.R, parent = p.U;
    if (parent) {
      if (parent.L === p) parent.L = q; else parent.R = q;
    } else {
      tree._ = q;
    }
    q.U = parent;
    p.U = q;
    p.R = q.L;
    if (p.R) p.R.U = p;
    q.L = p;
  }
  function d3_geom_voronoiRedBlackRotateRight(tree, node) {
    var p = node, q = node.L, parent = p.U;
    if (parent) {
      if (parent.L === p) parent.L = q; else parent.R = q;
    } else {
      tree._ = q;
    }
    q.U = parent;
    p.U = q;
    p.L = q.R;
    if (p.L) p.L.U = p;
    q.R = p;
  }
  function d3_geom_voronoiRedBlackFirst(node) {
    while (node.L) node = node.L;
    return node;
  }
  function d3_geom_voronoi(sites, bbox) {
    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;
    d3_geom_voronoiEdges = [];
    d3_geom_voronoiCells = new Array(sites.length);
    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();
    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();
    while (true) {
      circle = d3_geom_voronoiFirstCircle;
      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {
        if (site.x !== x0 || site.y !== y0) {
          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);
          d3_geom_voronoiAddBeach(site);
          x0 = site.x, y0 = site.y;
        }
        site = sites.pop();
      } else if (circle) {
        d3_geom_voronoiRemoveBeach(circle.arc);
      } else {
        break;
      }
    }
    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);
    var diagram = {
      cells: d3_geom_voronoiCells,
      edges: d3_geom_voronoiEdges
    };
    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;
    return diagram;
  }
  function d3_geom_voronoiVertexOrder(a, b) {
    return b.y - a.y || b.x - a.x;
  }
  d3.geom.voronoi = function(points) {
    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;
    if (points) return voronoi(points);
    function voronoi(data) {
      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];
      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {
        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {
          var s = e.start();
          return [ s.x, s.y ];
        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];
        polygon.point = data[i];
      });
      return polygons;
    }
    function sites(data) {
      return data.map(function(d, i) {
        return {
          x: Math.round(fx(d, i) / ε) * ε,
          y: Math.round(fy(d, i) / ε) * ε,
          i: i
        };
      });
    }
    voronoi.links = function(data) {
      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {
        return edge.l && edge.r;
      }).map(function(edge) {
        return {
          source: data[edge.l.i],
          target: data[edge.r.i]
        };
      });
    };
    voronoi.triangles = function(data) {
      var triangles = [];
      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {
        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;
        while (++j < m) {
          e0 = e1;
          s0 = s1;
          e1 = edges[j].edge;
          s1 = e1.l === site ? e1.r : e1.l;
          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {
            triangles.push([ data[i], data[s0.i], data[s1.i] ]);
          }
        }
      });
      return triangles;
    };
    voronoi.x = function(_) {
      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;
    };
    voronoi.y = function(_) {
      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;
    };
    voronoi.clipExtent = function(_) {
      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;
      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;
      return voronoi;
    };
    voronoi.size = function(_) {
      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];
      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);
    };
    return voronoi;
  };
  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];
  function d3_geom_voronoiTriangleArea(a, b, c) {
    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);
  }
  d3.geom.delaunay = function(vertices) {
    return d3.geom.voronoi().triangles(vertices);
  };
  d3.geom.quadtree = function(points, x1, y1, x2, y2) {
    var x = d3_geom_pointX, y = d3_geom_pointY, compat;
    if (compat = arguments.length) {
      x = d3_geom_quadtreeCompatX;
      y = d3_geom_quadtreeCompatY;
      if (compat === 3) {
        y2 = y1;
        x2 = x1;
        y1 = x1 = 0;
      }
      return quadtree(points);
    }
    function quadtree(data) {
      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;
      if (x1 != null) {
        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;
      } else {
        x2_ = y2_ = -(x1_ = y1_ = Infinity);
        xs = [], ys = [];
        n = data.length;
        if (compat) for (i = 0; i < n; ++i) {
          d = data[i];
          if (d.x < x1_) x1_ = d.x;
          if (d.y < y1_) y1_ = d.y;
          if (d.x > x2_) x2_ = d.x;
          if (d.y > y2_) y2_ = d.y;
          xs.push(d.x);
          ys.push(d.y);
        } else for (i = 0; i < n; ++i) {
          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);
          if (x_ < x1_) x1_ = x_;
          if (y_ < y1_) y1_ = y_;
          if (x_ > x2_) x2_ = x_;
          if (y_ > y2_) y2_ = y_;
          xs.push(x_);
          ys.push(y_);
        }
      }
      var dx = x2_ - x1_, dy = y2_ - y1_;
      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;
      function insert(n, d, x, y, x1, y1, x2, y2) {
        if (isNaN(x) || isNaN(y)) return;
        if (n.leaf) {
          var nx = n.x, ny = n.y;
          if (nx != null) {
            if (abs(nx - x) + abs(ny - y) < .01) {
              insertChild(n, d, x, y, x1, y1, x2, y2);
            } else {
              var nPoint = n.point;
              n.x = n.y = n.point = null;
              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);
              insertChild(n, d, x, y, x1, y1, x2, y2);
            }
          } else {
            n.x = x, n.y = y, n.point = d;
          }
        } else {
          insertChild(n, d, x, y, x1, y1, x2, y2);
        }
      }
      function insertChild(n, d, x, y, x1, y1, x2, y2) {
        var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, right = x >= sx, bottom = y >= sy, i = (bottom << 1) + right;
        n.leaf = false;
        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());
        if (right) x1 = sx; else x2 = sx;
        if (bottom) y1 = sy; else y2 = sy;
        insert(n, d, x, y, x1, y1, x2, y2);
      }
      var root = d3_geom_quadtreeNode();
      root.add = function(d) {
        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);
      };
      root.visit = function(f) {
        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);
      };
      i = -1;
      if (x1 == null) {
        while (++i < n) {
          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);
        }
        --i;
      } else data.forEach(root.add);
      xs = ys = data = d = null;
      return root;
    }
    quadtree.x = function(_) {
      return arguments.length ? (x = _, quadtree) : x;
    };
    quadtree.y = function(_) {
      return arguments.length ? (y = _, quadtree) : y;
    };
    quadtree.extent = function(_) {
      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];
      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0],
      y2 = +_[1][1];
      return quadtree;
    };
    quadtree.size = function(_) {
      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];
      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];
      return quadtree;
    };
    return quadtree;
  };
  function d3_geom_quadtreeCompatX(d) {
    return d.x;
  }
  function d3_geom_quadtreeCompatY(d) {
    return d.y;
  }
  function d3_geom_quadtreeNode() {
    return {
      leaf: true,
      nodes: [],
      point: null,
      x: null,
      y: null
    };
  }
  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {
    if (!f(node, x1, y1, x2, y2)) {
      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;
      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);
      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);
      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);
      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);
    }
  }
  d3.interpolateRgb = d3_interpolateRgb;
  function d3_interpolateRgb(a, b) {
    a = d3.rgb(a);
    b = d3.rgb(b);
    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;
    return function(t) {
      return "#" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));
    };
  }
  d3.interpolateObject = d3_interpolateObject;
  function d3_interpolateObject(a, b) {
    var i = {}, c = {}, k;
    for (k in a) {
      if (k in b) {
        i[k] = d3_interpolate(a[k], b[k]);
      } else {
        c[k] = a[k];
      }
    }
    for (k in b) {
      if (!(k in a)) {
        c[k] = b[k];
      }
    }
    return function(t) {
      for (k in i) c[k] = i[k](t);
      return c;
    };
  }
  d3.interpolateNumber = d3_interpolateNumber;
  function d3_interpolateNumber(a, b) {
    b -= a = +a;
    return function(t) {
      return a + b * t;
    };
  }
  d3.interpolateString = d3_interpolateString;
  function d3_interpolateString(a, b) {
    var m, i, j, s0 = 0, s1 = 0, s = [], q = [], n, o;
    a = a + "", b = b + "";
    d3_interpolate_number.lastIndex = 0;
    for (i = 0; m = d3_interpolate_number.exec(b); ++i) {
      if (m.index) s.push(b.substring(s0, s1 = m.index));
      q.push({
        i: s.length,
        x: m[0]
      });
      s.push(null);
      s0 = d3_interpolate_number.lastIndex;
    }
    if (s0 < b.length) s.push(b.substring(s0));
    for (i = 0, n = q.length; (m = d3_interpolate_number.exec(a)) && i < n; ++i) {
      o = q[i];
      if (o.x == m[0]) {
        if (o.i) {
          if (s[o.i + 1] == null) {
            s[o.i - 1] += o.x;
            s.splice(o.i, 1);
            for (j = i + 1; j < n; ++j) q[j].i--;
          } else {
            s[o.i - 1] += o.x + s[o.i + 1];
            s.splice(o.i, 2);
            for (j = i + 1; j < n; ++j) q[j].i -= 2;
          }
        } else {
          if (s[o.i + 1] == null) {
            s[o.i] = o.x;
          } else {
            s[o.i] = o.x + s[o.i + 1];
            s.splice(o.i + 1, 1);
            for (j = i + 1; j < n; ++j) q[j].i--;
          }
        }
        q.splice(i, 1);
        n--;
        i--;
      } else {
        o.x = d3_interpolateNumber(parseFloat(m[0]), parseFloat(o.x));
      }
    }
    while (i < n) {
      o = q.pop();
      if (s[o.i + 1] == null) {
        s[o.i] = o.x;
      } else {
        s[o.i] = o.x + s[o.i + 1];
        s.splice(o.i + 1, 1);
      }
      n--;
    }
    if (s.length === 1) {
      return s[0] == null ? (o = q[0].x, function(t) {
        return o(t) + "";
      }) : function() {
        return b;
      };
    }
    return function(t) {
      for (i = 0; i < n; ++i) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    };
  }
  var d3_interpolate_number = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
  d3.interpolate = d3_interpolate;
  function d3_interpolate(a, b) {
    var i = d3.interpolators.length, f;
    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;
    return f;
  }
  d3.interpolators = [ function(a, b) {
    var t = typeof b;
    return (t === "string" ? d3_rgb_names.has(b) || /^(#|rgb\(|hsl\()/.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_Color ? d3_interpolateRgb : t === "object" ? Array.isArray(b) ? d3_interpolateArray : d3_interpolateObject : d3_interpolateNumber)(a, b);
  } ];
  d3.interpolateArray = d3_interpolateArray;
  function d3_interpolateArray(a, b) {
    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;
    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));
    for (;i < na; ++i) c[i] = a[i];
    for (;i < nb; ++i) c[i] = b[i];
    return function(t) {
      for (i = 0; i < n0; ++i) c[i] = x[i](t);
      return c;
    };
  }
  var d3_ease_default = function() {
    return d3_identity;
  };
  var d3_ease = d3.map({
    linear: d3_ease_default,
    poly: d3_ease_poly,
    quad: function() {
      return d3_ease_quad;
    },
    cubic: function() {
      return d3_ease_cubic;
    },
    sin: function() {
      return d3_ease_sin;
    },
    exp: function() {
      return d3_ease_exp;
    },
    circle: function() {
      return d3_ease_circle;
    },
    elastic: d3_ease_elastic,
    back: d3_ease_back,
    bounce: function() {
      return d3_ease_bounce;
    }
  });
  var d3_ease_mode = d3.map({
    "in": d3_identity,
    out: d3_ease_reverse,
    "in-out": d3_ease_reflect,
    "out-in": function(f) {
      return d3_ease_reflect(d3_ease_reverse(f));
    }
  });
  d3.ease = function(name) {
    var i = name.indexOf("-"), t = i >= 0 ? name.substring(0, i) : name, m = i >= 0 ? name.substring(i + 1) : "in";
    t = d3_ease.get(t) || d3_ease_default;
    m = d3_ease_mode.get(m) || d3_identity;
    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));
  };
  function d3_ease_clamp(f) {
    return function(t) {
      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);
    };
  }
  function d3_ease_reverse(f) {
    return function(t) {
      return 1 - f(1 - t);
    };
  }
  function d3_ease_reflect(f) {
    return function(t) {
      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));
    };
  }
  function d3_ease_quad(t) {
    return t * t;
  }
  function d3_ease_cubic(t) {
    return t * t * t;
  }
  function d3_ease_cubicInOut(t) {
    if (t <= 0) return 0;
    if (t >= 1) return 1;
    var t2 = t * t, t3 = t2 * t;
    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);
  }
  function d3_ease_poly(e) {
    return function(t) {
      return Math.pow(t, e);
    };
  }
  function d3_ease_sin(t) {
    return 1 - Math.cos(t * halfπ);
  }
  function d3_ease_exp(t) {
    return Math.pow(2, 10 * (t - 1));
  }
  function d3_ease_circle(t) {
    return 1 - Math.sqrt(1 - t * t);
  }
  function d3_ease_elastic(a, p) {
    var s;
    if (arguments.length < 2) p = .45;
    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;
    return function(t) {
      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);
    };
  }
  function d3_ease_back(s) {
    if (!s) s = 1.70158;
    return function(t) {
      return t * t * ((s + 1) * t - s);
    };
  }
  function d3_ease_bounce(t) {
    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
  }
  d3.interpolateHcl = d3_interpolateHcl;
  function d3_interpolateHcl(a, b) {
    a = d3.hcl(a);
    b = d3.hcl(b);
    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;
    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;
    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
    return function(t) {
      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + "";
    };
  }
  d3.interpolateHsl = d3_interpolateHsl;
  function d3_interpolateHsl(a, b) {
    a = d3.hsl(a);
    b = d3.hsl(b);
    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;
    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;
    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
    return function(t) {
      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + "";
    };
  }
  d3.interpolateLab = d3_interpolateLab;
  function d3_interpolateLab(a, b) {
    a = d3.lab(a);
    b = d3.lab(b);
    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;
    return function(t) {
      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + "";
    };
  }
  d3.interpolateRound = d3_interpolateRound;
  function d3_interpolateRound(a, b) {
    b -= a;
    return function(t) {
      return Math.round(a + b * t);
    };
  }
  d3.transform = function(string) {

    var g = d3_document.createElementNS(d3.ns.prefix.svg, "g");
    return (d3.transform = function(string) {
      if (string != null) {
        g.setAttribute("transform", string);
        var t = g.transform.baseVal.consolidate();
      }
      return new d3_transform(t ? t.matrix : d3_transformIdentity);
    })(string);
  };
  function d3_transform(m) {
    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;
    if (r0[0] * r1[1] < r1[0] * r0[1]) {
      r0[0] *= -1;
      r0[1] *= -1;
      kx *= -1;
      kz *= -1;
    }
    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;
    this.translate = [ m.e, m.f ];
    this.scale = [ kx, ky ];
    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;
  }
  d3_transform.prototype.toString = function() {
    return "translate(" + this.translate + ")rotate(" + this.rotate + ")skewX(" + this.skew + ")scale(" + this.scale + ")";
  };
  function d3_transformDot(a, b) {
    return a[0] * b[0] + a[1] * b[1];
  }
  function d3_transformNormalize(a) {
    var k = Math.sqrt(d3_transformDot(a, a));
    if (k) {
      a[0] /= k;
      a[1] /= k;
    }
    return k;
  }
  function d3_transformCombine(a, b, k) {
    a[0] += k * b[0];
    a[1] += k * b[1];
    return a;
  }
  var d3_transformIdentity = {
    a: 1,
    b: 0,
    c: 0,
    d: 1,
    e: 0,
    f: 0
  };
  d3.interpolateTransform = d3_interpolateTransform;
  function d3_interpolateTransform(a, b) {
    var s = [], q = [], n, A = d3.transform(a), B = d3.transform(b), ta = A.translate, tb = B.translate, ra = A.rotate, rb = B.rotate, wa = A.skew, wb = B.skew, ka = A.scale, kb = B.scale;
    if (ta[0] != tb[0] || ta[1] != tb[1]) {
      s.push("translate(", null, ",", null, ")");
      q.push({
        i: 1,
        x: d3_interpolateNumber(ta[0], tb[0])
      }, {
        i: 3,
        x: d3_interpolateNumber(ta[1], tb[1])
      });
    } else if (tb[0] || tb[1]) {
      s.push("translate(" + tb + ")");
    } else {
      s.push("");
    }
    if (ra != rb) {
      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;
      q.push({
        i: s.push(s.pop() + "rotate(", null, ")") - 2,
        x: d3_interpolateNumber(ra, rb)
      });
    } else if (rb) {
      s.push(s.pop() + "rotate(" + rb + ")");
    }
    if (wa != wb) {
      q.push({
        i: s.push(s.pop() + "skewX(", null, ")") - 2,
        x: d3_interpolateNumber(wa, wb)
      });
    } else if (wb) {
      s.push(s.pop() + "skewX(" + wb + ")");
    }
    if (ka[0] != kb[0] || ka[1] != kb[1]) {
      n = s.push(s.pop() + "scale(", null, ",", null, ")");
      q.push({
        i: n - 4,
        x: d3_interpolateNumber(ka[0], kb[0])
      }, {
        i: n - 2,
        x: d3_interpolateNumber(ka[1], kb[1])
      });
    } else if (kb[0] != 1 || kb[1] != 1) {
      s.push(s.pop() + "scale(" + kb + ")");
    }
    n = q.length;
    return function(t) {
      var i = -1, o;
      while (++i < n) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    };
  }
  function d3_uninterpolateNumber(a, b) {
    b = b - (a = +a) ? 1 / (b - a) : 0;
    return function(x) {
      return (x - a) * b;
    };
  }
  function d3_uninterpolateClamp(a, b) {
    b = b - (a = +a) ? 1 / (b - a) : 0;
    return function(x) {
      return Math.max(0, Math.min(1, (x - a) * b));
    };
  }
  d3.layout = {};
  d3.layout.bundle = function() {
    return function(links) {
      var paths = [], i = -1, n = links.length;
      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));
      return paths;
    };
  };
  function d3_layout_bundlePath(link) {
    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];
    while (start !== lca) {
      start = start.parent;
      points.push(start);
    }
    var k = points.length;
    while (end !== lca) {
      points.splice(k, 0, end);
      end = end.parent;
    }
    return points;
  }
  function d3_layout_bundleAncestors(node) {
    var ancestors = [], parent = node.parent;
    while (parent != null) {
      ancestors.push(node);
      node = parent;
      parent = parent.parent;
    }
    ancestors.push(node);
    return ancestors;
  }
  function d3_layout_bundleLeastCommonAncestor(a, b) {
    if (a === b) return a;
    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;
    while (aNode === bNode) {
      sharedNode = aNode;
      aNode = aNodes.pop();
      bNode = bNodes.pop();
    }
    return sharedNode;
  }
  d3.layout.chord = function() {
    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;
    function relayout() {
      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;
      chords = [];
      groups = [];
      k = 0, i = -1;
      while (++i < n) {
        x = 0, j = -1;
        while (++j < n) {
          x += matrix[i][j];
        }
        groupSums.push(x);
        subgroupIndex.push(d3.range(n));
        k += x;
      }
      if (sortGroups) {
        groupIndex.sort(function(a, b) {
          return sortGroups(groupSums[a], groupSums[b]);
        });
      }
      if (sortSubgroups) {
        subgroupIndex.forEach(function(d, i) {
          d.sort(function(a, b) {
            return sortSubgroups(matrix[i][a], matrix[i][b]);
          });
        });
      }
      k = (τ - padding * n) / k;
      x = 0, i = -1;
      while (++i < n) {
        x0 = x, j = -1;
        while (++j < n) {
          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;
          subgroups[di + "-" + dj] = {
            index: di,
            subindex: dj,
            startAngle: a0,
            endAngle: a1,
            value: v
          };
        }
        groups[di] = {
          index: di,
          startAngle: x0,
          endAngle: x,
          value: (x - x0) / k
        };
        x += padding;
      }
      i = -1;
      while (++i < n) {
        j = i - 1;
        while (++j < n) {
          var source = subgroups[i + "-" + j], target = subgroups[j + "-" + i];
          if (source.value || target.value) {
            chords.push(source.value < target.value ? {
              source: target,
              target: source
            } : {
              source: source,
              target: target
            });
          }
        }
      }
      if (sortChords) resort();
    }
    function resort() {
      chords.sort(function(a, b) {
        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);
      });
    }
    chord.matrix = function(x) {
      if (!arguments.length) return matrix;
      n = (matrix = x) && matrix.length;
      chords = groups = null;
      return chord;
    };
    chord.padding = function(x) {
      if (!arguments.length) return padding;
      padding = x;
      chords = groups = null;
      return chord;
    };
    chord.sortGroups = function(x) {
      if (!arguments.length) return sortGroups;
      sortGroups = x;
      chords = groups = null;
      return chord;
    };
    chord.sortSubgroups = function(x) {
      if (!arguments.length) return sortSubgroups;
      sortSubgroups = x;
      chords = null;
      return chord;
    };
    chord.sortChords = function(x) {
      if (!arguments.length) return sortChords;
      sortChords = x;
      if (chords) resort();
      return chord;
    };
    chord.chords = function() {
      if (!chords) relayout();
      return chords;
    };
    chord.groups = function() {
      if (!groups) relayout();
      return groups;
    };
    return chord;
  };
  d3.layout.force = function() {
    var force = {}, event = d3.dispatch("start", "tick", "end"), size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, gravity = .1, theta = .8, nodes = [], links = [], distances, strengths, charges;
    function repulse(node) {
      return function(quad, x1, _, x2) {
        if (quad.point !== node) {
          var dx = quad.cx - node.x, dy = quad.cy - node.y, dn = 1 / Math.sqrt(dx * dx + dy * dy);
          if ((x2 - x1) * dn < theta) {
            var k = quad.charge * dn * dn;
            node.px -= dx * k;
            node.py -= dy * k;
            return true;
          }
          if (quad.point && isFinite(dn)) {
            var k = quad.pointCharge * dn * dn;
            node.px -= dx * k;
            node.py -= dy * k;
          }
        }
        return !quad.charge;
      };
    }
    force.tick = function() {
      if ((alpha *= .99) < .005) {
        event.end({
          type: "end",
          alpha: alpha = 0
        });
        return true;
      }
      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;
      for (i = 0; i < m; ++i) {
        o = links[i];
        s = o.source;
        t = o.target;
        x = t.x - s.x;
        y = t.y - s.y;
        if (l = x * x + y * y) {
          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;
          x *= l;
          y *= l;
          t.x -= x * (k = s.weight / (t.weight + s.weight));
          t.y -= y * k;
          s.x += x * (k = 1 - k);
          s.y += y * k;
        }
      }
      if (k = alpha * gravity) {
        x = size[0] / 2;
        y = size[1] / 2;
        i = -1;
        if (k) while (++i < n) {
          o = nodes[i];
          o.x += (x - o.x) * k;
          o.y += (y - o.y) * k;
        }
      }
      if (charge) {
        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);
        i = -1;
        while (++i < n) {
          if (!(o = nodes[i]).fixed) {
            q.visit(repulse(o));
          }
        }
      }
      i = -1;
      while (++i < n) {
        o = nodes[i];
        if (o.fixed) {
          o.x = o.px;
          o.y = o.py;
        } else {
          o.x -= (o.px - (o.px = o.x)) * friction;
          o.y -= (o.py - (o.py = o.y)) * friction;
        }
      }
      event.tick({
        type: "tick",
        alpha: alpha
      });
    };
    force.nodes = function(x) {
      if (!arguments.length) return nodes;
      nodes = x;
      return force;
    };
    force.links = function(x) {
      if (!arguments.length) return links;
      links = x;
      return force;
    };
    force.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return force;
    };
    force.linkDistance = function(x) {
      if (!arguments.length) return linkDistance;
      linkDistance = typeof x === "function" ? x : +x;
      return force;
    };
    force.distance = force.linkDistance;
    force.linkStrength = function(x) {
      if (!arguments.length) return linkStrength;
      linkStrength = typeof x === "function" ? x : +x;
      return force;
    };
    force.friction = function(x) {
      if (!arguments.length) return friction;
      friction = +x;
      return force;
    };
    force.charge = function(x) {
      if (!arguments.length) return charge;
      charge = typeof x === "function" ? x : +x;
      return force;
    };
    force.gravity = function(x) {
      if (!arguments.length) return gravity;
      gravity = +x;
      return force;
    };
    force.theta = function(x) {
      if (!arguments.length) return theta;
      theta = +x;
      return force;
    };
    force.alpha = function(x) {
      if (!arguments.length) return alpha;
      x = +x;
      if (alpha) {
        if (x > 0) alpha = x; else alpha = 0;
      } else if (x > 0) {
        event.start({
          type: "start",
          alpha: alpha = x
        });
        d3.timer(force.tick);
      }
      return force;
    };
    force.start = function() {
      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;
      for (i = 0; i < n; ++i) {
        (o = nodes[i]).index = i;
        o.weight = 0;
      }
      for (i = 0; i < m; ++i) {
        o = links[i];
        if (typeof o.source == "number") o.source = nodes[o.source];
        if (typeof o.target == "number") o.target = nodes[o.target];
        ++o.source.weight;
        ++o.target.weight;
      }
      for (i = 0; i < n; ++i) {
        o = nodes[i];
        if (isNaN(o.x)) o.x = position("x", w);
        if (isNaN(o.y)) o.y = position("y", h);
        if (isNaN(o.px)) o.px = o.x;
        if (isNaN(o.py)) o.py = o.y;
      }
      distances = [];
      if (typeof linkDistance === "function") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;
      strengths = [];
      if (typeof linkStrength === "function") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;
      charges = [];
      if (typeof charge === "function") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;
      function position(dimension, size) {
        if (!neighbors) {
          neighbors = new Array(n);
          for (j = 0; j < n; ++j) {
            neighbors[j] = [];
          }
          for (j = 0; j < m; ++j) {
            var o = links[j];
            neighbors[o.source.index].push(o.target);
            neighbors[o.target.index].push(o.source);
          }
        }
        var candidates = neighbors[i], j = -1, m = candidates.length, x;
        while (++j < m) if (!isNaN(x = candidates[j][dimension])) return x;
        return Math.random() * size;
      }
      return force.resume();
    };
    force.resume = function() {
      return force.alpha(.1);
    };
    force.stop = function() {
      return force.alpha(0);
    };
    force.drag = function() {
      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on("dragstart.force", d3_layout_forceDragstart).on("drag.force", dragmove).on("dragend.force", d3_layout_forceDragend);
      if (!arguments.length) return drag;
      this.on("mouseover.force", d3_layout_forceMouseover).on("mouseout.force", d3_layout_forceMouseout).call(drag);
    };
    function dragmove(d) {
      d.px = d3.event.x, d.py = d3.event.y;
      force.resume();
    }
    return d3.rebind(force, event, "on");
  };
  function d3_layout_forceDragstart(d) {
    d.fixed |= 2;
  }
  function d3_layout_forceDragend(d) {
    d.fixed &= ~6;
  }
  function d3_layout_forceMouseover(d) {
    d.fixed |= 4;
    d.px = d.x, d.py = d.y;
  }
  function d3_layout_forceMouseout(d) {
    d.fixed &= ~4;
  }
  function d3_layout_forceAccumulate(quad, alpha, charges) {
    var cx = 0, cy = 0;
    quad.charge = 0;
    if (!quad.leaf) {
      var nodes = quad.nodes, n = nodes.length, i = -1, c;
      while (++i < n) {
        c = nodes[i];
        if (c == null) continue;
        d3_layout_forceAccumulate(c, alpha, charges);
        quad.charge += c.charge;
        cx += c.charge * c.cx;
        cy += c.charge * c.cy;
      }
    }
    if (quad.point) {
      if (!quad.leaf) {
        quad.point.x += Math.random() - .5;
        quad.point.y += Math.random() - .5;
      }
      var k = alpha * charges[quad.point.index];
      quad.charge += quad.pointCharge = k;
      cx += k * quad.point.x;
      cy += k * quad.point.y;
    }
    quad.cx = cx / quad.charge;
    quad.cy = cy / quad.charge;
  }
  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1;
  d3.layout.hierarchy = function() {
    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;
    function recurse(node, depth, nodes) {
      var childs = children.call(hierarchy, node, depth);
      node.depth = depth;
      nodes.push(node);
      if (childs && (n = childs.length)) {
        var i = -1, n, c = node.children = new Array(n), v = 0, j = depth + 1, d;
        while (++i < n) {
          d = c[i] = recurse(childs[i], j, nodes);
          d.parent = node;
          v += d.value;
        }
        if (sort) c.sort(sort);
        if (value) node.value = v;
      } else {
        delete node.children;
        if (value) {
          node.value = +value.call(hierarchy, node, depth) || 0;
        }
      }
      return node;
    }
    function revalue(node, depth) {
      var children = node.children, v = 0;
      if (children && (n = children.length)) {
        var i = -1, n, j = depth + 1;
        while (++i < n) v += revalue(children[i], j);
      } else if (value) {
        v = +value.call(hierarchy, node, depth) || 0;
      }
      if (value) node.value = v;
      return v;
    }
    function hierarchy(d) {
      var nodes = [];
      recurse(d, 0, nodes);
      return nodes;
    }
    hierarchy.sort = function(x) {
      if (!arguments.length) return sort;
      sort = x;
      return hierarchy;
    };
    hierarchy.children = function(x) {
      if (!arguments.length) return children;
      children = x;
      return hierarchy;
    };
    hierarchy.value = function(x) {
      if (!arguments.length) return value;
      value = x;
      return hierarchy;
    };
    hierarchy.revalue = function(root) {
      revalue(root, 0);
      return root;
    };
    return hierarchy;
  };
  function d3_layout_hierarchyRebind(object, hierarchy) {
    d3.rebind(object, hierarchy, "sort", "children", "value");
    object.nodes = object;
    object.links = d3_layout_hierarchyLinks;
    return object;
  }
  function d3_layout_hierarchyChildren(d) {
    return d.children;
  }
  function d3_layout_hierarchyValue(d) {
    return d.value;
  }
  function d3_layout_hierarchySort(a, b) {
    return b.value - a.value;
  }
  function d3_layout_hierarchyLinks(nodes) {
    return d3.merge(nodes.map(function(parent) {
      return (parent.children || []).map(function(child) {
        return {
          source: parent,
          target: child
        };
      });
    }));
  }
  d3.layout.partition = function() {
    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];
    function position(node, x, dx, dy) {
      var children = node.children;
      node.x = x;
      node.y = node.depth * dy;
      node.dx = dx;
      node.dy = dy;
      if (children && (n = children.length)) {
        var i = -1, n, c, d;
        dx = node.value ? dx / node.value : 0;
        while (++i < n) {
          position(c = children[i], x, d = c.value * dx, dy);
          x += d;
        }
      }
    }
    function depth(node) {
      var children = node.children, d = 0;
      if (children && (n = children.length)) {
        var i = -1, n;
        while (++i < n) d = Math.max(d, depth(children[i]));
      }
      return 1 + d;
    }
    function partition(d, i) {
      var nodes = hierarchy.call(this, d, i);
      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));
      return nodes;
    }
    partition.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return partition;
    };
    return d3_layout_hierarchyRebind(partition, hierarchy);
  };
  d3.layout.pie = function() {
    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ;
    function pie(data) {
      var values = data.map(function(d, i) {
        return +value.call(pie, d, i);
      });
      var a = +(typeof startAngle === "function" ? startAngle.apply(this, arguments) : startAngle);
      var k = ((typeof endAngle === "function" ? endAngle.apply(this, arguments) : endAngle) - a) / d3.sum(values);
      var index = d3.range(data.length);
      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {
        return values[j] - values[i];
      } : function(i, j) {
        return sort(data[i], data[j]);
      });
      var arcs = [];
      index.forEach(function(i) {
        var d;
        arcs[i] = {
          data: data[i],
          value: d = values[i],
          startAngle: a,
          endAngle: a += d * k
        };
      });
      return arcs;
    }
    pie.value = function(x) {
      if (!arguments.length) return value;
      value = x;
      return pie;
    };
    pie.sort = function(x) {
      if (!arguments.length) return sort;
      sort = x;
      return pie;
    };
    pie.startAngle = function(x) {
      if (!arguments.length) return startAngle;
      startAngle = x;
      return pie;
    };
    pie.endAngle = function(x) {
      if (!arguments.length) return endAngle;
      endAngle = x;
      return pie;
    };
    return pie;
  };
  var d3_layout_pieSortByValue = {};
  d3.layout.stack = function() {
    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;
    function stack(data, index) {
      var series = data.map(function(d, i) {
        return values.call(stack, d, i);
      });
      var points = series.map(function(d) {
        return d.map(function(v, i) {
          return [ x.call(stack, v, i), y.call(stack, v, i) ];
        });
      });
      var orders = order.call(stack, points, index);
      series = d3.permute(series, orders);
      points = d3.permute(points, orders);
      var offsets = offset.call(stack, points, index);
      var n = series.length, m = series[0].length, i, j, o;
      for (j = 0; j < m; ++j) {
        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);
        for (i = 1; i < n; ++i) {
          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);
        }
      }
      return data;
    }
    stack.values = function(x) {
      if (!arguments.length) return values;
      values = x;
      return stack;
    };
    stack.order = function(x) {
      if (!arguments.length) return order;
      order = typeof x === "function" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;
      return stack;
    };
    stack.offset = function(x) {
      if (!arguments.length) return offset;
      offset = typeof x === "function" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;
      return stack;
    };
    stack.x = function(z) {
      if (!arguments.length) return x;
      x = z;
      return stack;
    };
    stack.y = function(z) {
      if (!arguments.length) return y;
      y = z;
      return stack;
    };
    stack.out = function(z) {
      if (!arguments.length) return out;
      out = z;
      return stack;
    };
    return stack;
  };
  function d3_layout_stackX(d) {
    return d.x;
  }
  function d3_layout_stackY(d) {
    return d.y;
  }
  function d3_layout_stackOut(d, y0, y) {
    d.y0 = y0;
    d.y = y;
  }
  var d3_layout_stackOrders = d3.map({
    "inside-out": function(data) {
      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {
        return max[a] - max[b];
      }), top = 0, bottom = 0, tops = [], bottoms = [];
      for (i = 0; i < n; ++i) {
        j = index[i];
        if (top < bottom) {
          top += sums[j];
          tops.push(j);
        } else {
          bottom += sums[j];
          bottoms.push(j);
        }
      }
      return bottoms.reverse().concat(tops);
    },
    reverse: function(data) {
      return d3.range(data.length).reverse();
    },
    "default": d3_layout_stackOrderDefault
  });
  var d3_layout_stackOffsets = d3.map({
    silhouette: function(data) {
      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];
      for (j = 0; j < m; ++j) {
        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
        if (o > max) max = o;
        sums.push(o);
      }
      for (j = 0; j < m; ++j) {
        y0[j] = (max - sums[j]) / 2;
      }
      return y0;
    },
    wiggle: function(data) {
      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];
      y0[0] = o = o0 = 0;
      for (j = 1; j < m; ++j) {
        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];
        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {
          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {
            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;
          }
          s2 += s3 * data[i][j][1];
        }
        y0[j] = o -= s1 ? s2 / s1 * dx : 0;
        if (o < o0) o0 = o;
      }
      for (j = 0; j < m; ++j) y0[j] -= o0;
      return y0;
    },
    expand: function(data) {
      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];
      for (j = 0; j < m; ++j) {
        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;
      }
      for (j = 0; j < m; ++j) y0[j] = 0;
      return y0;
    },
    zero: d3_layout_stackOffsetZero
  });
  function d3_layout_stackOrderDefault(data) {
    return d3.range(data.length);
  }
  function d3_layout_stackOffsetZero(data) {
    var j = -1, m = data[0].length, y0 = [];
    while (++j < m) y0[j] = 0;
    return y0;
  }
  function d3_layout_stackMaxIndex(array) {
    var i = 1, j = 0, v = array[0][1], k, n = array.length;
    for (;i < n; ++i) {
      if ((k = array[i][1]) > v) {
        j = i;
        v = k;
      }
    }
    return j;
  }
  function d3_layout_stackReduceSum(d) {
    return d.reduce(d3_layout_stackSum, 0);
  }
  function d3_layout_stackSum(p, d) {
    return p + d[1];
  }
  d3.layout.histogram = function() {
    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;
    function histogram(data, i) {
      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;
      while (++i < m) {
        bin = bins[i] = [];
        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);
        bin.y = 0;
      }
      if (m > 0) {
        i = -1;
        while (++i < n) {
          x = values[i];
          if (x >= range[0] && x <= range[1]) {
            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];
            bin.y += k;
            bin.push(data[i]);
          }
        }
      }
      return bins;
    }
    histogram.value = function(x) {
      if (!arguments.length) return valuer;
      valuer = x;
      return histogram;
    };
    histogram.range = function(x) {
      if (!arguments.length) return ranger;
      ranger = d3_functor(x);
      return histogram;
    };
    histogram.bins = function(x) {
      if (!arguments.length) return binner;
      binner = typeof x === "number" ? function(range) {
        return d3_layout_histogramBinFixed(range, x);
      } : d3_functor(x);
      return histogram;
    };
    histogram.frequency = function(x) {
      if (!arguments.length) return frequency;
      frequency = !!x;
      return histogram;
    };
    return histogram;
  };
  function d3_layout_histogramBinSturges(range, values) {
    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));
  }
  function d3_layout_histogramBinFixed(range, n) {
    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];
    while (++x <= n) f[x] = m * x + b;
    return f;
  }
  function d3_layout_histogramRange(values) {
    return [ d3.min(values), d3.max(values) ];
  }
  d3.layout.tree = function() {
    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;
    function tree(d, i) {
      var nodes = hierarchy.call(this, d, i), root = nodes[0];
      function firstWalk(node, previousSibling) {
        var children = node.children, layout = node._tree;
        if (children && (n = children.length)) {
          var n, firstChild = children[0], previousChild, ancestor = firstChild, child, i = -1;
          while (++i < n) {
            child = children[i];
            firstWalk(child, previousChild);
            ancestor = apportion(child, previousChild, ancestor);
            previousChild = child;
          }
          d3_layout_treeShift(node);
          var midpoint = .5 * (firstChild._tree.prelim + child._tree.prelim);
          if (previousSibling) {
            layout.prelim = previousSibling._tree.prelim + separation(node, previousSibling);
            layout.mod = layout.prelim - midpoint;
          } else {
            layout.prelim = midpoint;
          }
        } else {
          if (previousSibling) {
            layout.prelim = previousSibling._tree.prelim + separation(node, previousSibling);
          }
        }
      }
      function secondWalk(node, x) {
        node.x = node._tree.prelim + x;
        var children = node.children;
        if (children && (n = children.length)) {
          var i = -1, n;
          x += node._tree.mod;
          while (++i < n) {
            secondWalk(children[i], x);
          }
        }
      }
      function apportion(node, previousSibling, ancestor) {
        if (previousSibling) {
          var vip = node, vop = node, vim = previousSibling, vom = node.parent.children[0], sip = vip._tree.mod, sop = vop._tree.mod, sim = vim._tree.mod, som = vom._tree.mod, shift;
          while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {
            vom = d3_layout_treeLeft(vom);
            vop = d3_layout_treeRight(vop);
            vop._tree.ancestor = node;
            shift = vim._tree.prelim + sim - vip._tree.prelim - sip + separation(vim, vip);
            if (shift > 0) {
              d3_layout_treeMove(d3_layout_treeAncestor(vim, node, ancestor), node, shift);
              sip += shift;
              sop += shift;
            }
            sim += vim._tree.mod;
            sip += vip._tree.mod;
            som += vom._tree.mod;
            sop += vop._tree.mod;
          }
          if (vim && !d3_layout_treeRight(vop)) {
            vop._tree.thread = vim;
            vop._tree.mod += sim - sop;
          }
          if (vip && !d3_layout_treeLeft(vom)) {
            vom._tree.thread = vip;
            vom._tree.mod += sip - som;
            ancestor = node;
          }
        }
        return ancestor;
      }
      d3_layout_treeVisitAfter(root, function(node, previousSibling) {
        node._tree = {
          ancestor: node,
          prelim: 0,
          mod: 0,
          change: 0,
          shift: 0,
          number: previousSibling ? previousSibling._tree.number + 1 : 0
        };
      });
      firstWalk(root);
      secondWalk(root, -root._tree.prelim);
      var left = d3_layout_treeSearch(root, d3_layout_treeLeftmost), right = d3_layout_treeSearch(root, d3_layout_treeRightmost), deep = d3_layout_treeSearch(root, d3_layout_treeDeepest), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2, y1 = deep.depth || 1;
      d3_layout_treeVisitAfter(root, nodeSize ? function(node) {
        node.x *= size[0];
        node.y = node.depth * size[1];
        delete node._tree;
      } : function(node) {
        node.x = (node.x - x0) / (x1 - x0) * size[0];
        node.y = node.depth / y1 * size[1];
        delete node._tree;
      });
      return nodes;
    }
    tree.separation = function(x) {
      if (!arguments.length) return separation;
      separation = x;
      return tree;
    };
    tree.size = function(x) {
      if (!arguments.length) return nodeSize ? null : size;
      nodeSize = (size = x) == null;
      return tree;
    };
    tree.nodeSize = function(x) {
      if (!arguments.length) return nodeSize ? size : null;
      nodeSize = (size = x) != null;
      return tree;
    };
    return d3_layout_hierarchyRebind(tree, hierarchy);
  };
  function d3_layout_treeSeparation(a, b) {
    return a.parent == b.parent ? 1 : 2;
  }
  function d3_layout_treeLeft(node) {
    var children = node.children;
    return children && children.length ? children[0] : node._tree.thread;
  }
  function d3_layout_treeRight(node) {
    var children = node.children, n;
    return children && (n = children.length) ? children[n - 1] : node._tree.thread;
  }
  function d3_layout_treeSearch(node, compare) {
    var children = node.children;
    if (children && (n = children.length)) {
      var child, n, i = -1;
      while (++i < n) {
        if (compare(child = d3_layout_treeSearch(children[i], compare), node) > 0) {
          node = child;
        }
      }
    }
    return node;
  }
  function d3_layout_treeRightmost(a, b) {
    return a.x - b.x;
  }
  function d3_layout_treeLeftmost(a, b) {
    return b.x - a.x;
  }
  function d3_layout_treeDeepest(a, b) {
    return a.depth - b.depth;
  }
  function d3_layout_treeVisitAfter(node, callback) {
    function visit(node, previousSibling) {
      var children = node.children;
      if (children && (n = children.length)) {
        var child, previousChild = null, i = -1, n;
        while (++i < n) {
          child = children[i];
          visit(child, previousChild);
          previousChild = child;
        }
      }
      callback(node, previousSibling);
    }
    visit(node, null);
  }
  function d3_layout_treeShift(node) {
    var shift = 0, change = 0, children = node.children, i = children.length, child;
    while (--i >= 0) {
      child = children[i]._tree;
      child.prelim += shift;
      child.mod += shift;
      shift += child.shift + (change += child.change);
    }
  }
  function d3_layout_treeMove(ancestor, node, shift) {
    ancestor = ancestor._tree;
    node = node._tree;
    var change = shift / (node.number - ancestor.number);
    ancestor.change += change;
    node.change -= change;
    node.shift += shift;
    node.prelim += shift;
    node.mod += shift;
  }
  function d3_layout_treeAncestor(vim, node, ancestor) {
    return vim._tree.ancestor.parent == node.parent ? vim._tree.ancestor : ancestor;
  }
  d3.layout.pack = function() {
    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;
    function pack(d, i) {
      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === "function" ? radius : function() {
        return radius;
      };
      root.x = root.y = 0;
      d3_layout_treeVisitAfter(root, function(d) {
        d.r = +r(d.value);
      });
      d3_layout_treeVisitAfter(root, d3_layout_packSiblings);
      if (padding) {
        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;
        d3_layout_treeVisitAfter(root, function(d) {
          d.r += dr;
        });
        d3_layout_treeVisitAfter(root, d3_layout_packSiblings);
        d3_layout_treeVisitAfter(root, function(d) {
          d.r -= dr;
        });
      }
      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));
      return nodes;
    }
    pack.size = function(_) {
      if (!arguments.length) return size;
      size = _;
      return pack;
    };
    pack.radius = function(_) {
      if (!arguments.length) return radius;
      radius = _ == null || typeof _ === "function" ? _ : +_;
      return pack;
    };
    pack.padding = function(_) {
      if (!arguments.length) return padding;
      padding = +_;
      return pack;
    };
    return d3_layout_hierarchyRebind(pack, hierarchy);
  };
  function d3_layout_packSort(a, b) {
    return a.value - b.value;
  }
  function d3_layout_packInsert(a, b) {
    var c = a._pack_next;
    a._pack_next = b;
    b._pack_prev = a;
    b._pack_next = c;
    c._pack_prev = b;
  }
  function d3_layout_packSplice(a, b) {
    a._pack_next = b;
    b._pack_prev = a;
  }
  function d3_layout_packIntersects(a, b) {
    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;
    return .999 * dr * dr > dx * dx + dy * dy;
  }
  function d3_layout_packSiblings(node) {
    if (!(nodes = node.children) || !(n = nodes.length)) return;
    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;
    function bound(node) {
      xMin = Math.min(node.x - node.r, xMin);
      xMax = Math.max(node.x + node.r, xMax);
      yMin = Math.min(node.y - node.r, yMin);
      yMax = Math.max(node.y + node.r, yMax);
    }
    nodes.forEach(d3_layout_packLink);
    a = nodes[0];
    a.x = -a.r;
    a.y = 0;
    bound(a);
    if (n > 1) {
      b = nodes[1];
      b.x = b.r;
      b.y = 0;
      bound(b);
      if (n > 2) {
        c = nodes[2];
        d3_layout_packPlace(a, b, c);
        bound(c);
        d3_layout_packInsert(a, c);
        a._pack_prev = c;
        d3_layout_packInsert(c, b);
        b = a._pack_next;
        for (i = 3; i < n; i++) {
          d3_layout_packPlace(a, b, c = nodes[i]);
          var isect = 0, s1 = 1, s2 = 1;
          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {
            if (d3_layout_packIntersects(j, c)) {
              isect = 1;
              break;
            }
          }
          if (isect == 1) {
            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {
              if (d3_layout_packIntersects(k, c)) {
                break;
              }
            }
          }
          if (isect) {
            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);
            i--;
          } else {
            d3_layout_packInsert(a, c);
            b = c;
            bound(c);
          }
        }
      }
    }
    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;
    for (i = 0; i < n; i++) {
      c = nodes[i];
      c.x -= cx;
      c.y -= cy;
      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));
    }
    node.r = cr;
    nodes.forEach(d3_layout_packUnlink);
  }
  function d3_layout_packLink(node) {
    node._pack_next = node._pack_prev = node;
  }
  function d3_layout_packUnlink(node) {
    delete node._pack_next;
    delete node._pack_prev;
  }
  function d3_layout_packTransform(node, x, y, k) {
    var children = node.children;
    node.x = x += k * node.x;
    node.y = y += k * node.y;
    node.r *= k;
    if (children) {
      var i = -1, n = children.length;
      while (++i < n) d3_layout_packTransform(children[i], x, y, k);
    }
  }
  function d3_layout_packPlace(a, b, c) {
    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;
    if (db && (dx || dy)) {
      var da = b.r + c.r, dc = dx * dx + dy * dy;
      da *= da;
      db *= db;
      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
      c.x = a.x + x * dx + y * dy;
      c.y = a.y + x * dy - y * dx;
    } else {
      c.x = a.x + db;
      c.y = a.y;
    }
  }
  d3.layout.cluster = function() {
    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;
    function cluster(d, i) {
      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;
      d3_layout_treeVisitAfter(root, function(node) {
        var children = node.children;
        if (children && children.length) {
          node.x = d3_layout_clusterX(children);
          node.y = d3_layout_clusterY(children);
        } else {
          node.x = previousNode ? x += separation(node, previousNode) : 0;
          node.y = 0;
          previousNode = node;
        }
      });
      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
      d3_layout_treeVisitAfter(root, nodeSize ? function(node) {
        node.x = (node.x - root.x) * size[0];
        node.y = (root.y - node.y) * size[1];
      } : function(node) {
        node.x = (node.x - x0) / (x1 - x0) * size[0];
        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];
      });
      return nodes;
    }
    cluster.separation = function(x) {
      if (!arguments.length) return separation;
      separation = x;
      return cluster;
    };
    cluster.size = function(x) {
      if (!arguments.length) return nodeSize ? null : size;
      nodeSize = (size = x) == null;
      return cluster;
    };
    cluster.nodeSize = function(x) {
      if (!arguments.length) return nodeSize ? size : null;
      nodeSize = (size = x) != null;
      return cluster;
    };
    return d3_layout_hierarchyRebind(cluster, hierarchy);
  };
  function d3_layout_clusterY(children) {
    return 1 + d3.max(children, function(child) {
      return child.y;
    });
  }
  function d3_layout_clusterX(children) {
    return children.reduce(function(x, child) {
      return x + child.x;
    }, 0) / children.length;
  }
  function d3_layout_clusterLeft(node) {
    var children = node.children;
    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;
  }
  function d3_layout_clusterRight(node) {
    var children = node.children, n;
    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;
  }
  d3.layout.treemap = function() {
    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = "squarify", ratio = .5 * (1 + Math.sqrt(5));
    function scale(children, k) {
      var i = -1, n = children.length, child, area;
      while (++i < n) {
        area = (child = children[i]).value * (k < 0 ? 0 : k);
        child.area = isNaN(area) || area <= 0 ? 0 : area;
      }
    }
    function squarify(node) {
      var children = node.children;
      if (children && children.length) {
        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === "slice" ? rect.dx : mode === "dice" ? rect.dy : mode === "slice-dice" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;
        scale(remaining, rect.dx * rect.dy / node.value);
        row.area = 0;
        while ((n = remaining.length) > 0) {
          row.push(child = remaining[n - 1]);
          row.area += child.area;
          if (mode !== "squarify" || (score = worst(row, u)) <= best) {
            remaining.pop();
            best = score;
          } else {
            row.area -= row.pop().area;
            position(row, u, rect, false);
            u = Math.min(rect.dx, rect.dy);
            row.length = row.area = 0;
            best = Infinity;
          }
        }
        if (row.length) {
          position(row, u, rect, true);
          row.length = row.area = 0;
        }
        children.forEach(squarify);
      }
    }
    function stickify(node) {
      var children = node.children;
      if (children && children.length) {
        var rect = pad(node), remaining = children.slice(), child, row = [];
        scale(remaining, rect.dx * rect.dy / node.value);
        row.area = 0;
        while (child = remaining.pop()) {
          row.push(child);
          row.area += child.area;
          if (child.z != null) {
            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);
            row.length = row.area = 0;
          }
        }
        children.forEach(stickify);
      }
    }
    function worst(row, u) {
      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;
      while (++i < n) {
        if (!(r = row[i].area)) continue;
        if (r < rmin) rmin = r;
        if (r > rmax) rmax = r;
      }
      s *= s;
      u *= u;
      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;
    }
    function position(row, u, rect, flush) {
      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;
      if (u == rect.dx) {
        if (flush || v > rect.dy) v = rect.dy;
        while (++i < n) {
          o = row[i];
          o.x = x;
          o.y = y;
          o.dy = v;
          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);
        }
        o.z = true;
        o.dx += rect.x + rect.dx - x;
        rect.y += v;
        rect.dy -= v;
      } else {
        if (flush || v > rect.dx) v = rect.dx;
        while (++i < n) {
          o = row[i];
          o.x = x;
          o.y = y;
          o.dx = v;
          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);
        }
        o.z = false;
        o.dy += rect.y + rect.dy - y;
        rect.x += v;
        rect.dx -= v;
      }
    }
    function treemap(d) {
      var nodes = stickies || hierarchy(d), root = nodes[0];
      root.x = 0;
      root.y = 0;
      root.dx = size[0];
      root.dy = size[1];
      if (stickies) hierarchy.revalue(root);
      scale([ root ], root.dx * root.dy / root.value);
      (stickies ? stickify : squarify)(root);
      if (sticky) stickies = nodes;
      return nodes;
    }
    treemap.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return treemap;
    };
    treemap.padding = function(x) {
      if (!arguments.length) return padding;
      function padFunction(node) {
        var p = x.call(treemap, node, node.depth);
        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === "number" ? [ p, p, p, p ] : p);
      }
      function padConstant(node) {
        return d3_layout_treemapPad(node, x);
      }
      var type;
      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === "function" ? padFunction : type === "number" ? (x = [ x, x, x, x ],
      padConstant) : padConstant;
      return treemap;
    };
    treemap.round = function(x) {
      if (!arguments.length) return round != Number;
      round = x ? Math.round : Number;
      return treemap;
    };
    treemap.sticky = function(x) {
      if (!arguments.length) return sticky;
      sticky = x;
      stickies = null;
      return treemap;
    };
    treemap.ratio = function(x) {
      if (!arguments.length) return ratio;
      ratio = x;
      return treemap;
    };
    treemap.mode = function(x) {
      if (!arguments.length) return mode;
      mode = x + "";
      return treemap;
    };
    return d3_layout_hierarchyRebind(treemap, hierarchy);
  };
  function d3_layout_treemapPadNull(node) {
    return {
      x: node.x,
      y: node.y,
      dx: node.dx,
      dy: node.dy
    };
  }
  function d3_layout_treemapPad(node, padding) {
    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];
    if (dx < 0) {
      x += dx / 2;
      dx = 0;
    }
    if (dy < 0) {
      y += dy / 2;
      dy = 0;
    }
    return {
      x: x,
      y: y,
      dx: dx,
      dy: dy
    };
  }
  d3.random = {
    normal: function(µ, σ) {
      var n = arguments.length;
      if (n < 2) σ = 1;
      if (n < 1) µ = 0;
      return function() {
        var x, y, r;
        do {
          x = Math.random() * 2 - 1;
          y = Math.random() * 2 - 1;
          r = x * x + y * y;
        } while (!r || r > 1);
        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);
      };
    },
    logNormal: function() {
      var random = d3.random.normal.apply(d3, arguments);
      return function() {
        return Math.exp(random());
      };
    },
    irwinHall: function(m) {
      return function() {
        for (var s = 0, j = 0; j < m; j++) s += Math.random();
        return s / m;
      };
    }
  };
  d3.scale = {};
  function d3_scaleExtent(domain) {
    var start = domain[0], stop = domain[domain.length - 1];
    return start < stop ? [ start, stop ] : [ stop, start ];
  }
  function d3_scaleRange(scale) {
    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());
  }
  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {
    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);
    return function(x) {
      return i(u(x));
    };
  }
  function d3_scale_nice(domain, nice) {
    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;
    if (x1 < x0) {
      dx = i0, i0 = i1, i1 = dx;
      dx = x0, x0 = x1, x1 = dx;
    }
    domain[i0] = nice.floor(x0);
    domain[i1] = nice.ceil(x1);
    return domain;
  }
  function d3_scale_niceStep(step) {
    return step ? {
      floor: function(x) {
        return Math.floor(x / step) * step;
      },
      ceil: function(x) {
        return Math.ceil(x / step) * step;
      }
    } : d3_scale_niceIdentity;
  }
  var d3_scale_niceIdentity = {
    floor: d3_identity,
    ceil: d3_identity
  };
  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {
    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;
    if (domain[k] < domain[0]) {
      domain = domain.slice().reverse();
      range = range.slice().reverse();
    }
    while (++j <= k) {
      u.push(uninterpolate(domain[j - 1], domain[j]));
      i.push(interpolate(range[j - 1], range[j]));
    }
    return function(x) {
      var j = d3.bisect(domain, x, 1, k) - 1;
      return i[j](u[j](x));
    };
  }
  d3.scale.linear = function() {
    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);
  };
  function d3_scale_linear(domain, range, interpolate, clamp) {
    var output, input;
    function rescale() {
      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;
      output = linear(domain, range, uninterpolate, interpolate);
      input = linear(range, domain, uninterpolate, d3_interpolate);
      return scale;
    }
    function scale(x) {
      return output(x);
    }
    scale.invert = function(y) {
      return input(y);
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(Number);
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.rangeRound = function(x) {
      return scale.range(x).interpolate(d3_interpolateRound);
    };
    scale.clamp = function(x) {
      if (!arguments.length) return clamp;
      clamp = x;
      return rescale();
    };
    scale.interpolate = function(x) {
      if (!arguments.length) return interpolate;
      interpolate = x;
      return rescale();
    };
    scale.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    scale.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    scale.nice = function(m) {
      d3_scale_linearNice(domain, m);
      return rescale();
    };
    scale.copy = function() {
      return d3_scale_linear(domain, range, interpolate, clamp);
    };
    return rescale();
  }
  function d3_scale_linearRebind(scale, linear) {
    return d3.rebind(scale, linear, "range", "rangeRound", "interpolate", "clamp");
  }
  function d3_scale_linearNice(domain, m) {
    return d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
  }
  function d3_scale_linearTickRange(domain, m) {
    if (m == null) m = 10;
    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;
    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;
    extent[0] = Math.ceil(extent[0] / step) * step;
    extent[1] = Math.floor(extent[1] / step) * step + step * .5;
    extent[2] = step;
    return extent;
  }
  function d3_scale_linearTicks(domain, m) {
    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));
  }
  function d3_scale_linearTickFormat(domain, m, format) {
    var range = d3_scale_linearTickRange(domain, m);
    return d3.format(format ? format.replace(d3_format_re, function(a, b, c, d, e, f, g, h, i, j) {
      return [ b, c, d, e, f, g, h, i || "." + d3_scale_linearFormatPrecision(j, range), j ].join("");
    }) : ",." + d3_scale_linearPrecision(range[2]) + "f");
  }
  var d3_scale_linearFormatSignificant = {
    s: 1,
    g: 1,
    p: 1,
    r: 1,
    e: 1
  };
  function d3_scale_linearPrecision(value) {
    return -Math.floor(Math.log(value) / Math.LN10 + .01);
  }
  function d3_scale_linearFormatPrecision(type, range) {
    var p = d3_scale_linearPrecision(range[2]);
    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(Math.abs(range[0]), Math.abs(range[1])))) + +(type !== "e") : p - (type === "%") * 2;
  }
  d3.scale.log = function() {
    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);
  };
  function d3_scale_log(linear, base, positive, domain) {
    function log(x) {
      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);
    }
    function pow(x) {
      return positive ? Math.pow(base, x) : -Math.pow(base, -x);
    }
    function scale(x) {
      return linear(log(x));
    }
    scale.invert = function(x) {
      return pow(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      positive = x[0] >= 0;
      linear.domain((domain = x.map(Number)).map(log));
      return scale;
    };
    scale.base = function(_) {
      if (!arguments.length) return base;
      base = +_;
      linear.domain(domain.map(log));
      return scale;
    };
    scale.nice = function() {
      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);
      linear.domain(niced);
      domain = niced.map(pow);
      return scale;
    };
    scale.ticks = function() {
      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;
      if (isFinite(j - i)) {
        if (positive) {
          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);
          ticks.push(pow(i));
        } else {
          ticks.push(pow(i));
          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);
        }
        for (i = 0; ticks[i] < u; i++) {}
        for (j = ticks.length; ticks[j - 1] > v; j--) {}
        ticks = ticks.slice(i, j);
      }
      return ticks;
    };
    scale.tickFormat = function(n, format) {
      if (!arguments.length) return d3_scale_logFormat;
      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== "function") format = d3.format(format);
      var k = Math.max(.1, n / scale.ticks().length), f = positive ? (e = 1e-12, Math.ceil) : (e = -1e-12,
      Math.floor), e;
      return function(d) {
        return d / pow(f(log(d) + e)) <= k ? format(d) : "";
      };
    };
    scale.copy = function() {
      return d3_scale_log(linear.copy(), base, positive, domain);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  var d3_scale_logFormat = d3.format(".0e"), d3_scale_logNiceNegative = {
    floor: function(x) {
      return -Math.ceil(-x);
    },
    ceil: function(x) {
      return -Math.floor(-x);
    }
  };
  d3.scale.pow = function() {
    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);
  };
  function d3_scale_pow(linear, exponent, domain) {
    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);
    function scale(x) {
      return linear(powp(x));
    }
    scale.invert = function(x) {
      return powb(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      linear.domain((domain = x.map(Number)).map(powp));
      return scale;
    };
    scale.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    scale.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    scale.nice = function(m) {
      return scale.domain(d3_scale_linearNice(domain, m));
    };
    scale.exponent = function(x) {
      if (!arguments.length) return exponent;
      powp = d3_scale_powPow(exponent = x);
      powb = d3_scale_powPow(1 / exponent);
      linear.domain(domain.map(powp));
      return scale;
    };
    scale.copy = function() {
      return d3_scale_pow(linear.copy(), exponent, domain);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  function d3_scale_powPow(e) {
    return function(x) {
      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);
    };
  }
  d3.scale.sqrt = function() {
    return d3.scale.pow().exponent(.5);
  };
  d3.scale.ordinal = function() {
    return d3_scale_ordinal([], {
      t: "range",
      a: [ [] ]
    });
  };
  function d3_scale_ordinal(domain, ranger) {
    var index, range, rangeBand;
    function scale(x) {
      return range[((index.get(x) || ranger.t === "range" && index.set(x, domain.push(x))) - 1) % range.length];
    }
    function steps(start, step) {
      return d3.range(domain.length).map(function(i) {
        return start + step * i;
      });
    }
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = [];
      index = new d3_Map();
      var i = -1, n = x.length, xi;
      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));
      return scale[ranger.t].apply(scale, ranger.a);
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      rangeBand = 0;
      ranger = {
        t: "range",
        a: arguments
      };
      return scale;
    };
    scale.rangePoints = function(x, padding) {
      if (arguments.length < 2) padding = 0;
      var start = x[0], stop = x[1], step = (stop - start) / (Math.max(1, domain.length - 1) + padding);
      range = steps(domain.length < 2 ? (start + stop) / 2 : start + step * padding / 2, step);
      rangeBand = 0;
      ranger = {
        t: "rangePoints",
        a: arguments
      };
      return scale;
    };
    scale.rangeBands = function(x, padding, outerPadding) {
      if (arguments.length < 2) padding = 0;
      if (arguments.length < 3) outerPadding = padding;
      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);
      range = steps(start + step * outerPadding, step);
      if (reverse) range.reverse();
      rangeBand = step * (1 - padding);
      ranger = {
        t: "rangeBands",
        a: arguments
      };
      return scale;
    };
    scale.rangeRoundBands = function(x, padding, outerPadding) {
      if (arguments.length < 2) padding = 0;
      if (arguments.length < 3) outerPadding = padding;
      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding)), error = stop - start - (domain.length - padding) * step;
      range = steps(start + Math.round(error / 2), step);
      if (reverse) range.reverse();
      rangeBand = Math.round(step * (1 - padding));
      ranger = {
        t: "rangeRoundBands",
        a: arguments
      };
      return scale;
    };
    scale.rangeBand = function() {
      return rangeBand;
    };
    scale.rangeExtent = function() {
      return d3_scaleExtent(ranger.a[0]);
    };
    scale.copy = function() {
      return d3_scale_ordinal(domain, ranger);
    };
    return scale.domain(domain);
  }
  d3.scale.category10 = function() {
    return d3.scale.ordinal().range(d3_category10);
  };
  d3.scale.category20 = function() {
    return d3.scale.ordinal().range(d3_category20);
  };
  d3.scale.category20b = function() {
    return d3.scale.ordinal().range(d3_category20b);
  };
  d3.scale.category20c = function() {
    return d3.scale.ordinal().range(d3_category20c);
  };
  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);
  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);
  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);
  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);
  d3.scale.quantile = function() {
    return d3_scale_quantile([], []);
  };
  function d3_scale_quantile(domain, range) {
    var thresholds;
    function rescale() {
      var k = 0, q = range.length;
      thresholds = [];
      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);
      return scale;
    }
    function scale(x) {
      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];
    }
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = x.filter(function(d) {
        return !isNaN(d);
      }).sort(d3.ascending);
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.quantiles = function() {
      return thresholds;
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];
    };
    scale.copy = function() {
      return d3_scale_quantile(domain, range);
    };
    return rescale();
  }
  d3.scale.quantize = function() {
    return d3_scale_quantize(0, 1, [ 0, 1 ]);
  };
  function d3_scale_quantize(x0, x1, range) {
    var kx, i;
    function scale(x) {
      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];
    }
    function rescale() {
      kx = range.length / (x1 - x0);
      i = range.length - 1;
      return scale;
    }
    scale.domain = function(x) {
      if (!arguments.length) return [ x0, x1 ];
      x0 = +x[0];
      x1 = +x[x.length - 1];
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      y = y < 0 ? NaN : y / kx + x0;
      return [ y, y + 1 / kx ];
    };
    scale.copy = function() {
      return d3_scale_quantize(x0, x1, range);
    };
    return rescale();
  }
  d3.scale.threshold = function() {
    return d3_scale_threshold([ .5 ], [ 0, 1 ]);
  };
  function d3_scale_threshold(domain, range) {
    function scale(x) {
      if (x <= x) return range[d3.bisect(domain, x)];
    }
    scale.domain = function(_) {
      if (!arguments.length) return domain;
      domain = _;
      return scale;
    };
    scale.range = function(_) {
      if (!arguments.length) return range;
      range = _;
      return scale;
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      return [ domain[y - 1], domain[y] ];
    };
    scale.copy = function() {
      return d3_scale_threshold(domain, range);
    };
    return scale;
  }
  d3.scale.identity = function() {
    return d3_scale_identity([ 0, 1 ]);
  };
  function d3_scale_identity(domain) {
    function identity(x) {
      return +x;
    }
    identity.invert = identity;
    identity.domain = identity.range = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(identity);
      return identity;
    };
    identity.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    identity.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    identity.copy = function() {
      return d3_scale_identity(domain);
    };
    return identity;
  }
  d3.svg = {};
  d3.svg.arc = function() {
    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;
    function arc() {
      var r0 = innerRadius.apply(this, arguments), r1 = outerRadius.apply(this, arguments), a0 = startAngle.apply(this, arguments) + d3_svg_arcOffset, a1 = endAngle.apply(this, arguments) + d3_svg_arcOffset, da = (a1 < a0 && (da = a0,
      a0 = a1, a1 = da), a1 - a0), df = da < π ? "0" : "1", c0 = Math.cos(a0), s0 = Math.sin(a0), c1 = Math.cos(a1), s1 = Math.sin(a1);
      return da >= d3_svg_arcMax ? r0 ? "M0," + r1 + "A" + r1 + "," + r1 + " 0 1,1 0," + -r1 + "A" + r1 + "," + r1 + " 0 1,1 0," + r1 + "M0," + r0 + "A" + r0 + "," + r0 + " 0 1,0 0," + -r0 + "A" + r0 + "," + r0 + " 0 1,0 0," + r0 + "Z" : "M0," + r1 + "A" + r1 + "," + r1 + " 0 1,1 0," + -r1 + "A" + r1 + "," + r1 + " 0 1,1 0," + r1 + "Z" : r0 ? "M" + r1 * c0 + "," + r1 * s0 + "A" + r1 + "," + r1 + " 0 " + df + ",1 " + r1 * c1 + "," + r1 * s1 + "L" + r0 * c1 + "," + r0 * s1 + "A" + r0 + "," + r0 + " 0 " + df + ",0 " + r0 * c0 + "," + r0 * s0 + "Z" : "M" + r1 * c0 + "," + r1 * s0 + "A" + r1 + "," + r1 + " 0 " + df + ",1 " + r1 * c1 + "," + r1 * s1 + "L0,0" + "Z";
    }
    arc.innerRadius = function(v) {
      if (!arguments.length) return innerRadius;
      innerRadius = d3_functor(v);
      return arc;
    };
    arc.outerRadius = function(v) {
      if (!arguments.length) return outerRadius;
      outerRadius = d3_functor(v);
      return arc;
    };
    arc.startAngle = function(v) {
      if (!arguments.length) return startAngle;
      startAngle = d3_functor(v);
      return arc;
    };
    arc.endAngle = function(v) {
      if (!arguments.length) return endAngle;
      endAngle = d3_functor(v);
      return arc;
    };
    arc.centroid = function() {
      var r = (innerRadius.apply(this, arguments) + outerRadius.apply(this, arguments)) / 2, a = (startAngle.apply(this, arguments) + endAngle.apply(this, arguments)) / 2 + d3_svg_arcOffset;
      return [ Math.cos(a) * r, Math.sin(a) * r ];
    };
    return arc;
  };
  var d3_svg_arcOffset = -halfπ, d3_svg_arcMax = τ - ε;
  function d3_svg_arcInnerRadius(d) {
    return d.innerRadius;
  }
  function d3_svg_arcOuterRadius(d) {
    return d.outerRadius;
  }
  function d3_svg_arcStartAngle(d) {
    return d.startAngle;
  }
  function d3_svg_arcEndAngle(d) {
    return d.endAngle;
  }
  function d3_svg_line(projection) {
    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;
    function line(data) {
      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);
      function segment() {
        segments.push("M", interpolate(projection(points), tension));
      }
      while (++i < n) {
        if (defined.call(this, d = data[i], i)) {
          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);
        } else if (points.length) {
          segment();
          points = [];
        }
      }
      if (points.length) segment();
      return segments.length ? segments.join("") : null;
    }
    line.x = function(_) {
      if (!arguments.length) return x;
      x = _;
      return line;
    };
    line.y = function(_) {
      if (!arguments.length) return y;
      y = _;
      return line;
    };
    line.defined = function(_) {
      if (!arguments.length) return defined;
      defined = _;
      return line;
    };
    line.interpolate = function(_) {
      if (!arguments.length) return interpolateKey;
      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
      return line;
    };
    line.tension = function(_) {
      if (!arguments.length) return tension;
      tension = _;
      return line;
    };
    return line;
  }
  d3.svg.line = function() {
    return d3_svg_line(d3_identity);
  };
  var d3_svg_lineInterpolators = d3.map({
    linear: d3_svg_lineLinear,
    "linear-closed": d3_svg_lineLinearClosed,
    step: d3_svg_lineStep,
    "step-before": d3_svg_lineStepBefore,
    "step-after": d3_svg_lineStepAfter,
    basis: d3_svg_lineBasis,
    "basis-open": d3_svg_lineBasisOpen,
    "basis-closed": d3_svg_lineBasisClosed,
    bundle: d3_svg_lineBundle,
    cardinal: d3_svg_lineCardinal,
    "cardinal-open": d3_svg_lineCardinalOpen,
    "cardinal-closed": d3_svg_lineCardinalClosed,
    monotone: d3_svg_lineMonotone
  });
  d3_svg_lineInterpolators.forEach(function(key, value) {
    value.key = key;
    value.closed = /-closed$/.test(key);
  });
  function d3_svg_lineLinear(points) {
    return points.join("L");
  }
  function d3_svg_lineLinearClosed(points) {
    return d3_svg_lineLinear(points) + "Z";
  }
  function d3_svg_lineStep(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("H", (p[0] + (p = points[i])[0]) / 2, "V", p[1]);
    if (n > 1) path.push("H", p[0]);
    return path.join("");
  }
  function d3_svg_lineStepBefore(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("V", (p = points[i])[1], "H", p[0]);
    return path.join("");
  }
  function d3_svg_lineStepAfter(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("H", (p = points[i])[0], "V", p[1]);
    return path.join("");
  }
  function d3_svg_lineCardinalOpen(points, tension) {
    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, points.length - 1), d3_svg_lineCardinalTangents(points, tension));
  }
  function d3_svg_lineCardinalClosed(points, tension) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite((points.push(points[0]),
    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));
  }
  function d3_svg_lineCardinal(points, tension) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));
  }
  function d3_svg_lineHermite(points, tangents) {
    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {
      return d3_svg_lineLinear(points);
    }
    var quad = points.length != tangents.length, path = "", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;
    if (quad) {
      path += "Q" + (p[0] - t0[0] * 2 / 3) + "," + (p[1] - t0[1] * 2 / 3) + "," + p[0] + "," + p[1];
      p0 = points[1];
      pi = 2;
    }
    if (tangents.length > 1) {
      t = tangents[1];
      p = points[pi];
      pi++;
      path += "C" + (p0[0] + t0[0]) + "," + (p0[1] + t0[1]) + "," + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
      for (var i = 2; i < tangents.length; i++, pi++) {
        p = points[pi];
        t = tangents[i];
        path += "S" + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
      }
    }
    if (quad) {
      var lp = points[pi];
      path += "Q" + (p[0] + t[0] * 2 / 3) + "," + (p[1] + t[1] * 2 / 3) + "," + lp[0] + "," + lp[1];
    }
    return path;
  }
  function d3_svg_lineCardinalTangents(points, tension) {
    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;
    while (++i < n) {
      p0 = p1;
      p1 = p2;
      p2 = points[i];
      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);
    }
    return tangents;
  }
  function d3_svg_lineBasis(points) {
    if (points.length < 3) return d3_svg_lineLinear(points);
    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, ",", y0, "L", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
    points.push(points[n - 1]);
    while (++i <= n) {
      pi = points[i];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    points.pop();
    path.push("L", pi);
    return path.join("");
  }
  function d3_svg_lineBasisOpen(points) {
    if (points.length < 4) return d3_svg_lineLinear(points);
    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];
    while (++i < 3) {
      pi = points[i];
      px.push(pi[0]);
      py.push(pi[1]);
    }
    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + "," + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));
    --i;
    while (++i < n) {
      pi = points[i];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    return path.join("");
  }
  function d3_svg_lineBasisClosed(points) {
    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];
    while (++i < 4) {
      pi = points[i % n];
      px.push(pi[0]);
      py.push(pi[1]);
    }
    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
    --i;
    while (++i < m) {
      pi = points[i % n];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    return path.join("");
  }
  function d3_svg_lineBundle(points, tension) {
    var n = points.length - 1;
    if (n) {
      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;
      while (++i <= n) {
        p = points[i];
        t = i / n;
        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);
        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);
      }
    }
    return d3_svg_lineBasis(points);
  }
  function d3_svg_lineDot4(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
  }
  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];
  function d3_svg_lineBasisBezier(path, x, y) {
    path.push("C", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));
  }
  function d3_svg_lineSlope(p0, p1) {
    return (p1[1] - p0[1]) / (p1[0] - p0[0]);
  }
  function d3_svg_lineFiniteDifferences(points) {
    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);
    while (++i < j) {
      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;
    }
    m[i] = d;
    return m;
  }
  function d3_svg_lineMonotoneTangents(points) {
    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;
    while (++i < j) {
      d = d3_svg_lineSlope(points[i], points[i + 1]);
      if (abs(d) < ε) {
        m[i] = m[i + 1] = 0;
      } else {
        a = m[i] / d;
        b = m[i + 1] / d;
        s = a * a + b * b;
        if (s > 9) {
          s = d * 3 / Math.sqrt(s);
          m[i] = s * a;
          m[i + 1] = s * b;
        }
      }
    }
    i = -1;
    while (++i <= j) {
      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));
      tangents.push([ s || 0, m[i] * s || 0 ]);
    }
    return tangents;
  }
  function d3_svg_lineMonotone(points) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));
  }
  d3.svg.line.radial = function() {
    var line = d3_svg_line(d3_svg_lineRadial);
    line.radius = line.x, delete line.x;
    line.angle = line.y, delete line.y;
    return line;
  };
  function d3_svg_lineRadial(points) {
    var point, i = -1, n = points.length, r, a;
    while (++i < n) {
      point = points[i];
      r = point[0];
      a = point[1] + d3_svg_arcOffset;
      point[0] = r * Math.cos(a);
      point[1] = r * Math.sin(a);
    }
    return points;
  }
  function d3_svg_area(projection) {
    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = "L", tension = .7;
    function area(data) {
      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {
        return x;
      } : d3_functor(x1), fy1 = y0 === y1 ? function() {
        return y;
      } : d3_functor(y1), x, y;
      function segment() {
        segments.push("M", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), "Z");
      }
      while (++i < n) {
        if (defined.call(this, d = data[i], i)) {
          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);
          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);
        } else if (points0.length) {
          segment();
          points0 = [];
          points1 = [];
        }
      }
      if (points0.length) segment();
      return segments.length ? segments.join("") : null;
    }
    area.x = function(_) {
      if (!arguments.length) return x1;
      x0 = x1 = _;
      return area;
    };
    area.x0 = function(_) {
      if (!arguments.length) return x0;
      x0 = _;
      return area;
    };
    area.x1 = function(_) {
      if (!arguments.length) return x1;
      x1 = _;
      return area;
    };
    area.y = function(_) {
      if (!arguments.length) return y1;
      y0 = y1 = _;
      return area;
    };
    area.y0 = function(_) {
      if (!arguments.length) return y0;
      y0 = _;
      return area;
    };
    area.y1 = function(_) {
      if (!arguments.length) return y1;
      y1 = _;
      return area;
    };
    area.defined = function(_) {
      if (!arguments.length) return defined;
      defined = _;
      return area;
    };
    area.interpolate = function(_) {
      if (!arguments.length) return interpolateKey;
      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
      interpolateReverse = interpolate.reverse || interpolate;
      L = interpolate.closed ? "M" : "L";
      return area;
    };
    area.tension = function(_) {
      if (!arguments.length) return tension;
      tension = _;
      return area;
    };
    return area;
  }
  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;
  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;
  d3.svg.area = function() {
    return d3_svg_area(d3_identity);
  };
  d3.svg.area.radial = function() {
    var area = d3_svg_area(d3_svg_lineRadial);
    area.radius = area.x, delete area.x;
    area.innerRadius = area.x0, delete area.x0;
    area.outerRadius = area.x1, delete area.x1;
    area.angle = area.y, delete area.y;
    area.startAngle = area.y0, delete area.y0;
    area.endAngle = area.y1, delete area.y1;
    return area;
  };
  d3.svg.chord = function() {
    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;
    function chord(d, i) {
      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);
      return "M" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + "Z";
    }
    function subgroup(self, f, d, i) {
      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) + d3_svg_arcOffset, a1 = endAngle.call(self, subgroup, i) + d3_svg_arcOffset;
      return {
        r: r,
        a0: a0,
        a1: a1,
        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],
        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]
      };
    }
    function equals(a, b) {
      return a.a0 == b.a0 && a.a1 == b.a1;
    }
    function arc(r, p, a) {
      return "A" + r + "," + r + " 0 " + +(a > π) + ",1 " + p;
    }
    function curve(r0, p0, r1, p1) {
      return "Q 0,0 " + p1;
    }
    chord.radius = function(v) {
      if (!arguments.length) return radius;
      radius = d3_functor(v);
      return chord;
    };
    chord.source = function(v) {
      if (!arguments.length) return source;
      source = d3_functor(v);
      return chord;
    };
    chord.target = function(v) {
      if (!arguments.length) return target;
      target = d3_functor(v);
      return chord;
    };
    chord.startAngle = function(v) {
      if (!arguments.length) return startAngle;
      startAngle = d3_functor(v);
      return chord;
    };
    chord.endAngle = function(v) {
      if (!arguments.length) return endAngle;
      endAngle = d3_functor(v);
      return chord;
    };
    return chord;
  };
  function d3_svg_chordRadius(d) {
    return d.radius;
  }
  d3.svg.diagonal = function() {
    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;
    function diagonal(d, i) {
      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {
        x: p0.x,
        y: m
      }, {
        x: p3.x,
        y: m
      }, p3 ];
      p = p.map(projection);
      return "M" + p[0] + "C" + p[1] + " " + p[2] + " " + p[3];
    }
    diagonal.source = function(x) {
      if (!arguments.length) return source;
      source = d3_functor(x);
      return diagonal;
    };
    diagonal.target = function(x) {
      if (!arguments.length) return target;
      target = d3_functor(x);
      return diagonal;
    };
    diagonal.projection = function(x) {
      if (!arguments.length) return projection;
      projection = x;
      return diagonal;
    };
    return diagonal;
  };
  function d3_svg_diagonalProjection(d) {
    return [ d.x, d.y ];
  }
  d3.svg.diagonal.radial = function() {
    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;
    diagonal.projection = function(x) {
      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;
    };
    return diagonal;
  };
  function d3_svg_diagonalRadialProjection(projection) {
    return function() {
      var d = projection.apply(this, arguments), r = d[0], a = d[1] + d3_svg_arcOffset;
      return [ r * Math.cos(a), r * Math.sin(a) ];
    };
  }
  d3.svg.symbol = function() {
    var type = d3_svg_symbolType, size = d3_svg_symbolSize;
    function symbol(d, i) {
      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));
    }
    symbol.type = function(x) {
      if (!arguments.length) return type;
      type = d3_functor(x);
      return symbol;
    };
    symbol.size = function(x) {
      if (!arguments.length) return size;
      size = d3_functor(x);
      return symbol;
    };
    return symbol;
  };
  function d3_svg_symbolSize() {
    return 64;
  }
  function d3_svg_symbolType() {
    return "circle";
  }
  function d3_svg_symbolCircle(size) {
    var r = Math.sqrt(size / π);
    return "M0," + r + "A" + r + "," + r + " 0 1,1 0," + -r + "A" + r + "," + r + " 0 1,1 0," + r + "Z";
  }
  var d3_svg_symbols = d3.map({
    circle: d3_svg_symbolCircle,
    cross: function(size) {
      var r = Math.sqrt(size / 5) / 2;
      return "M" + -3 * r + "," + -r + "H" + -r + "V" + -3 * r + "H" + r + "V" + -r + "H" + 3 * r + "V" + r + "H" + r + "V" + 3 * r + "H" + -r + "V" + r + "H" + -3 * r + "Z";
    },
    diamond: function(size) {
      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;
      return "M0," + -ry + "L" + rx + ",0" + " 0," + ry + " " + -rx + ",0" + "Z";
    },
    square: function(size) {
      var r = Math.sqrt(size) / 2;
      return "M" + -r + "," + -r + "L" + r + "," + -r + " " + r + "," + r + " " + -r + "," + r + "Z";
    },
    "triangle-down": function(size) {
      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
      return "M0," + ry + "L" + rx + "," + -ry + " " + -rx + "," + -ry + "Z";
    },
    "triangle-up": function(size) {
      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
      return "M0," + -ry + "L" + rx + "," + ry + " " + -rx + "," + ry + "Z";
    }
  });
  d3.svg.symbolTypes = d3_svg_symbols.keys();
  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);
  function d3_transition(groups, id) {
    d3_subclass(groups, d3_transitionPrototype);
    groups.id = id;
    return groups;
  }
  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;
  d3_transitionPrototype.call = d3_selectionPrototype.call;
  d3_transitionPrototype.empty = d3_selectionPrototype.empty;
  d3_transitionPrototype.node = d3_selectionPrototype.node;
  d3_transitionPrototype.size = d3_selectionPrototype.size;
  d3.transition = function(selection) {
    return arguments.length ? d3_transitionInheritId ? selection.transition() : selection : d3_selectionRoot.transition();
  };
  d3.transition.prototype = d3_transitionPrototype;
  d3_transitionPrototype.select = function(selector) {
    var id = this.id, subgroups = [], subgroup, subnode, node;
    selector = d3_selection_selector(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {
          if ("__data__" in node) subnode.__data__ = node.__data__;
          d3_transitionNode(subnode, i, id, node.__transition__[id]);
          subgroup.push(subnode);
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_transition(subgroups, id);
  };
  d3_transitionPrototype.selectAll = function(selector) {
    var id = this.id, subgroups = [], subgroup, subnodes, node, subnode, transition;
    selector = d3_selection_selectorAll(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          transition = node.__transition__[id];
          subnodes = selector.call(node, node.__data__, i, j);
          subgroups.push(subgroup = []);
          for (var k = -1, o = subnodes.length; ++k < o; ) {
            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, id, transition);
            subgroup.push(subnode);
          }
        }
      }
    }
    return d3_transition(subgroups, id);
  };
  d3_transitionPrototype.filter = function(filter) {
    var subgroups = [], subgroup, group, node;
    if (typeof filter !== "function") filter = d3_selection_filter(filter);
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
          subgroup.push(node);
        }
      }
    }
    return d3_transition(subgroups, this.id);
  };
  d3_transitionPrototype.tween = function(name, tween) {
    var id = this.id;
    if (arguments.length < 2) return this.node().__transition__[id].tween.get(name);
    return d3_selection_each(this, tween == null ? function(node) {
      node.__transition__[id].tween.remove(name);
    } : function(node) {
      node.__transition__[id].tween.set(name, tween);
    });
  };
  function d3_transition_tween(groups, name, value, tween) {
    var id = groups.id;
    return d3_selection_each(groups, typeof value === "function" ? function(node, i, j) {
      node.__transition__[id].tween.set(name, tween(value.call(node, node.__data__, i, j)));
    } : (value = tween(value), function(node) {
      node.__transition__[id].tween.set(name, value);
    }));
  }
  d3_transitionPrototype.attr = function(nameNS, value) {
    if (arguments.length < 2) {
      for (value in nameNS) this.attr(value, nameNS[value]);
      return this;
    }
    var interpolate = nameNS == "transform" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);
    function attrNull() {
      this.removeAttribute(name);
    }
    function attrNullNS() {
      this.removeAttributeNS(name.space, name.local);
    }
    function attrTween(b) {
      return b == null ? attrNull : (b += "", function() {
        var a = this.getAttribute(name), i;
        return a !== b && (i = interpolate(a, b), function(t) {
          this.setAttribute(name, i(t));
        });
      });
    }
    function attrTweenNS(b) {
      return b == null ? attrNullNS : (b += "", function() {
        var a = this.getAttributeNS(name.space, name.local), i;
        return a !== b && (i = interpolate(a, b), function(t) {
          this.setAttributeNS(name.space, name.local, i(t));
        });
      });
    }
    return d3_transition_tween(this, "attr." + nameNS, value, name.local ? attrTweenNS : attrTween);
  };
  d3_transitionPrototype.attrTween = function(nameNS, tween) {
    var name = d3.ns.qualify(nameNS);
    function attrTween(d, i) {
      var f = tween.call(this, d, i, this.getAttribute(name));
      return f && function(t) {
        this.setAttribute(name, f(t));
      };
    }
    function attrTweenNS(d, i) {
      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));
      return f && function(t) {
        this.setAttributeNS(name.space, name.local, f(t));
      };
    }
    return this.tween("attr." + nameNS, name.local ? attrTweenNS : attrTween);
  };
  d3_transitionPrototype.style = function(name, value, priority) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof name !== "string") {
        if (n < 2) value = "";
        for (priority in name) this.style(priority, name[priority], value);
        return this;
      }
      priority = "";
    }
    function styleNull() {
      this.style.removeProperty(name);
    }
    function styleString(b) {
      return b == null ? styleNull : (b += "", function() {
        var a = d3_window.getComputedStyle(this, null).getPropertyValue(name), i;
        return a !== b && (i = d3_interpolate(a, b), function(t) {
          this.style.setProperty(name, i(t), priority);
        });
      });
    }
    return d3_transition_tween(this, "style." + name, value, styleString);
  };
  d3_transitionPrototype.styleTween = function(name, tween, priority) {
    if (arguments.length < 3) priority = "";
    function styleTween(d, i) {
      var f = tween.call(this, d, i, d3_window.getComputedStyle(this, null).getPropertyValue(name));
      return f && function(t) {
        this.style.setProperty(name, f(t), priority);
      };
    }
    return this.tween("style." + name, styleTween);
  };
  d3_transitionPrototype.text = function(value) {
    return d3_transition_tween(this, "text", value, d3_transition_text);
  };
  function d3_transition_text(b) {
    if (b == null) b = "";
    return function() {
      this.textContent = b;
    };
  }
  d3_transitionPrototype.remove = function() {
    return this.each("end.transition", function() {
      var p;
      if (this.__transition__.count < 2 && (p = this.parentNode)) p.removeChild(this);
    });
  };
  d3_transitionPrototype.ease = function(value) {
    var id = this.id;
    if (arguments.length < 1) return this.node().__transition__[id].ease;
    if (typeof value !== "function") value = d3.ease.apply(d3, arguments);
    return d3_selection_each(this, function(node) {
      node.__transition__[id].ease = value;
    });
  };
  d3_transitionPrototype.delay = function(value) {
    var id = this.id;
    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
      node.__transition__[id].delay = +value.call(node, node.__data__, i, j);
    } : (value = +value, function(node) {
      node.__transition__[id].delay = value;
    }));
  };
  d3_transitionPrototype.duration = function(value) {
    var id = this.id;
    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
      node.__transition__[id].duration = Math.max(1, value.call(node, node.__data__, i, j));
    } : (value = Math.max(1, value), function(node) {
      node.__transition__[id].duration = value;
    }));
  };
  d3_transitionPrototype.each = function(type, listener) {
    var id = this.id;
    if (arguments.length < 2) {
      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;
      d3_transitionInheritId = id;
      d3_selection_each(this, function(node, i, j) {
        d3_transitionInherit = node.__transition__[id];
        type.call(node, node.__data__, i, j);
      });
      d3_transitionInherit = inherit;
      d3_transitionInheritId = inheritId;
    } else {
      d3_selection_each(this, function(node) {
        var transition = node.__transition__[id];
        (transition.event || (transition.event = d3.dispatch("start", "end"))).on(type, listener);
      });
    }
    return this;
  };
  d3_transitionPrototype.transition = function() {
    var id0 = this.id, id1 = ++d3_transitionId, subgroups = [], subgroup, group, node, transition;
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        if (node = group[i]) {
          transition = Object.create(node.__transition__[id0]);
          transition.delay += transition.duration;
          d3_transitionNode(node, i, id1, transition);
        }
        subgroup.push(node);
      }
    }
    return d3_transition(subgroups, id1);
  };
  function d3_transitionNode(node, i, id, inherit) {
    var lock = node.__transition__ || (node.__transition__ = {
      active: 0,
      count: 0
    }), transition = lock[id];
    if (!transition) {
      var time = inherit.time;
      transition = lock[id] = {
        tween: new d3_Map(),
        time: time,
        ease: inherit.ease,
        delay: inherit.delay,
        duration: inherit.duration
      };
      ++lock.count;
      d3.timer(function(elapsed) {
        var d = node.__data__, ease = transition.ease, delay = transition.delay, duration = transition.duration, timer = d3_timer_active, tweened = [];
        timer.t = delay + time;
        if (delay <= elapsed) return start(elapsed - delay);
        timer.c = start;
        function start(elapsed) {
          if (lock.active > id) return stop();
          lock.active = id;
          transition.event && transition.event.start.call(node, d, i);
          transition.tween.forEach(function(key, value) {
            if (value = value.call(node, d, i)) {
              tweened.push(value);
            }
          });
          d3.timer(function() {
            timer.c = tick(elapsed || 1) ? d3_true : tick;
            return 1;
          }, 0, time);
        }
        function tick(elapsed) {
          if (lock.active !== id) return stop();
          var t = elapsed / duration, e = ease(t), n = tweened.length;
          while (n > 0) {
            tweened[--n].call(node, e);
          }
          if (t >= 1) {
            transition.event && transition.event.end.call(node, d, i);
            return stop();
          }
        }
        function stop() {
          if (--lock.count) delete lock[id]; else delete node.__transition__;
          return 1;
        }
      }, 0, time);
    }
  }
  d3.svg.axis = function() {
    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;
    function axis(g) {
      g.each(function() {
        var g = d3.select(this);
        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();
        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(".tick").data(ticks, scale1), tickEnter = tick.enter().insert("g", ".domain").attr("class", "tick").style("opacity", ε), tickExit = d3.transition(tick.exit()).style("opacity", ε).remove(), tickUpdate = d3.transition(tick).style("opacity", 1), tickTransform;
        var range = d3_scaleRange(scale1), path = g.selectAll(".domain").data([ 0 ]), pathUpdate = (path.enter().append("path").attr("class", "domain"),
        d3.transition(path));
        tickEnter.append("line");
        tickEnter.append("text");
        var lineEnter = tickEnter.select("line"), lineUpdate = tickUpdate.select("line"), text = tick.select("text").text(tickFormat), textEnter = tickEnter.select("text"), textUpdate = tickUpdate.select("text");
        switch (orient) {
         case "bottom":
          {
            tickTransform = d3_svg_axisX;
            lineEnter.attr("y2", innerTickSize);
            textEnter.attr("y", Math.max(innerTickSize, 0) + tickPadding);
            lineUpdate.attr("x2", 0).attr("y2", innerTickSize);
            textUpdate.attr("x", 0).attr("y", Math.max(innerTickSize, 0) + tickPadding);
            text.attr("dy", ".71em").style("text-anchor", "middle");
            pathUpdate.attr("d", "M" + range[0] + "," + outerTickSize + "V0H" + range[1] + "V" + outerTickSize);
            break;
          }

         case "top":
          {
            tickTransform = d3_svg_axisX;
            lineEnter.attr("y2", -innerTickSize);
            textEnter.attr("y", -(Math.max(innerTickSize, 0) + tickPadding));
            lineUpdate.attr("x2", 0).attr("y2", -innerTickSize);
            textUpdate.attr("x", 0).attr("y", -(Math.max(innerTickSize, 0) + tickPadding));
            text.attr("dy", "0em").style("text-anchor", "middle");
            pathUpdate.attr("d", "M" + range[0] + "," + -outerTickSize + "V0H" + range[1] + "V" + -outerTickSize);
            break;
          }

         case "left":
          {
            tickTransform = d3_svg_axisY;
            lineEnter.attr("x2", -innerTickSize);
            textEnter.attr("x", -(Math.max(innerTickSize, 0) + tickPadding));
            lineUpdate.attr("x2", -innerTickSize).attr("y2", 0);
            textUpdate.attr("x", -(Math.max(innerTickSize, 0) + tickPadding)).attr("y", 0);
            text.attr("dy", ".32em").style("text-anchor", "end");
            pathUpdate.attr("d", "M" + -outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + -outerTickSize);
            break;
          }

         case "right":
          {
            tickTransform = d3_svg_axisY;
            lineEnter.attr("x2", innerTickSize);
            textEnter.attr("x", Math.max(innerTickSize, 0) + tickPadding);
            lineUpdate.attr("x2", innerTickSize).attr("y2", 0);
            textUpdate.attr("x", Math.max(innerTickSize, 0) + tickPadding).attr("y", 0);
            text.attr("dy", ".32em").style("text-anchor", "start");
            pathUpdate.attr("d", "M" + outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + outerTickSize);
            break;
          }
        }
        if (scale1.rangeBand) {
          var x = scale1, dx = x.rangeBand() / 2;
          scale0 = scale1 = function(d) {
            return x(d) + dx;
          };
        } else if (scale0.rangeBand) {
          scale0 = scale1;
        } else {
          tickExit.call(tickTransform, scale1);
        }
        tickEnter.call(tickTransform, scale0);
        tickUpdate.call(tickTransform, scale1);
      });
    }
    axis.scale = function(x) {
      if (!arguments.length) return scale;
      scale = x;
      return axis;
    };
    axis.orient = function(x) {
      if (!arguments.length) return orient;
      orient = x in d3_svg_axisOrients ? x + "" : d3_svg_axisDefaultOrient;
      return axis;
    };
    axis.ticks = function() {
      if (!arguments.length) return tickArguments_;
      tickArguments_ = arguments;
      return axis;
    };
    axis.tickValues = function(x) {
      if (!arguments.length) return tickValues;
      tickValues = x;
      return axis;
    };
    axis.tickFormat = function(x) {
      if (!arguments.length) return tickFormat_;
      tickFormat_ = x;
      return axis;
    };
    axis.tickSize = function(x) {
      var n = arguments.length;
      if (!n) return innerTickSize;
      innerTickSize = +x;
      outerTickSize = +arguments[n - 1];
      return axis;
    };
    axis.innerTickSize = function(x) {
      if (!arguments.length) return innerTickSize;
      innerTickSize = +x;
      return axis;
    };
    axis.outerTickSize = function(x) {
      if (!arguments.length) return outerTickSize;
      outerTickSize = +x;
      return axis;
    };
    axis.tickPadding = function(x) {
      if (!arguments.length) return tickPadding;
      tickPadding = +x;
      return axis;
    };
    axis.tickSubdivide = function() {
      return arguments.length && axis;
    };
    return axis;
  };
  var d3_svg_axisDefaultOrient = "bottom", d3_svg_axisOrients = {
    top: 1,
    right: 1,
    bottom: 1,
    left: 1
  };
  function d3_svg_axisX(selection, x) {
    selection.attr("transform", function(d) {
      return "translate(" + x(d) + ",0)";
    });
  }
  function d3_svg_axisY(selection, y) {
    selection.attr("transform", function(d) {
      return "translate(0," + y(d) + ")";
    });
  }
  d3.svg.brush = function() {
    var event = d3_eventDispatch(brush, "brushstart", "brush", "brushend"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];
    function brush(g) {
      g.each(function() {
        var g = d3.select(this).style("pointer-events", "all").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)").on("mousedown.brush", brushstart).on("touchstart.brush", brushstart);
        var background = g.selectAll(".background").data([ 0 ]);
        background.enter().append("rect").attr("class", "background").style("visibility", "hidden").style("cursor", "crosshair");
        g.selectAll(".extent").data([ 0 ]).enter().append("rect").attr("class", "extent").style("cursor", "move");
        var resize = g.selectAll(".resize").data(resizes, d3_identity);
        resize.exit().remove();
        resize.enter().append("g").attr("class", function(d) {
          return "resize " + d;
        }).style("cursor", function(d) {
          return d3_svg_brushCursor[d];
        }).append("rect").attr("x", function(d) {
          return /[ew]$/.test(d) ? -3 : null;
        }).attr("y", function(d) {
          return /^[ns]/.test(d) ? -3 : null;
        }).attr("width", 6).attr("height", 6).style("visibility", "hidden");
        resize.style("display", brush.empty() ? "none" : null);
        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;
        if (x) {
          range = d3_scaleRange(x);
          backgroundUpdate.attr("x", range[0]).attr("width", range[1] - range[0]);
          redrawX(gUpdate);
        }
        if (y) {
          range = d3_scaleRange(y);
          backgroundUpdate.attr("y", range[0]).attr("height", range[1] - range[0]);
          redrawY(gUpdate);
        }
        redraw(gUpdate);
      });
    }
    brush.event = function(g) {
      g.each(function() {
        var event_ = event.of(this, arguments), extent1 = {
          x: xExtent,
          y: yExtent,
          i: xExtentDomain,
          j: yExtentDomain
        }, extent0 = this.__chart__ || extent1;
        this.__chart__ = extent1;
        if (d3_transitionInheritId) {
          d3.select(this).transition().each("start.brush", function() {
            xExtentDomain = extent0.i;
            yExtentDomain = extent0.j;
            xExtent = extent0.x;
            yExtent = extent0.y;
            event_({
              type: "brushstart"
            });
          }).tween("brush:brush", function() {
            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);
            xExtentDomain = yExtentDomain = null;
            return function(t) {
              xExtent = extent1.x = xi(t);
              yExtent = extent1.y = yi(t);
              event_({
                type: "brush",
                mode: "resize"
              });
            };
          }).each("end.brush", function() {
            xExtentDomain = extent1.i;
            yExtentDomain = extent1.j;
            event_({
              type: "brush",
              mode: "resize"
            });
            event_({
              type: "brushend"
            });
          });
        } else {
          event_({
            type: "brushstart"
          });
          event_({
            type: "brush",
            mode: "resize"
          });
          event_({
            type: "brushend"
          });
        }
      });
    };
    function redraw(g) {
      g.selectAll(".resize").attr("transform", function(d) {
        return "translate(" + xExtent[+/e$/.test(d)] + "," + yExtent[+/^s/.test(d)] + ")";
      });
    }
    function redrawX(g) {
      g.select(".extent").attr("x", xExtent[0]);
      g.selectAll(".extent,.n>rect,.s>rect").attr("width", xExtent[1] - xExtent[0]);
    }
    function redrawY(g) {
      g.select(".extent").attr("y", yExtent[0]);
      g.selectAll(".extent,.e>rect,.w>rect").attr("height", yExtent[1] - yExtent[0]);
    }
    function brushstart() {
      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed("extent"), dragRestore = d3_event_dragSuppress(), center, origin = d3.mouse(target), offset;
      var w = d3.select(d3_window).on("keydown.brush", keydown).on("keyup.brush", keyup);
      if (d3.event.changedTouches) {
        w.on("touchmove.brush", brushmove).on("touchend.brush", brushend);
      } else {
        w.on("mousemove.brush", brushmove).on("mouseup.brush", brushend);
      }
      g.interrupt().selectAll("*").interrupt();
      if (dragging) {
        origin[0] = xExtent[0] - origin[0];
        origin[1] = yExtent[0] - origin[1];
      } else if (resizing) {
        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);
        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];
        origin[0] = xExtent[ex];
        origin[1] = yExtent[ey];
      } else if (d3.event.altKey) center = origin.slice();
      g.style("pointer-events", "none").selectAll(".resize").style("display", null);
      d3.select("body").style("cursor", eventTarget.style("cursor"));
      event_({
        type: "brushstart"
      });
      brushmove();
      function keydown() {
        if (d3.event.keyCode == 32) {
          if (!dragging) {
            center = null;
            origin[0] -= xExtent[1];
            origin[1] -= yExtent[1];
            dragging = 2;
          }
          d3_eventPreventDefault();
        }
      }
      function keyup() {
        if (d3.event.keyCode == 32 && dragging == 2) {
          origin[0] += xExtent[1];
          origin[1] += yExtent[1];
          dragging = 0;
          d3_eventPreventDefault();
        }
      }
      function brushmove() {
        var point = d3.mouse(target), moved = false;
        if (offset) {
          point[0] += offset[0];
          point[1] += offset[1];
        }
        if (!dragging) {
          if (d3.event.altKey) {
            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];
            origin[0] = xExtent[+(point[0] < center[0])];
            origin[1] = yExtent[+(point[1] < center[1])];
          } else center = null;
        }
        if (resizingX && move1(point, x, 0)) {
          redrawX(g);
          moved = true;
        }
        if (resizingY && move1(point, y, 1)) {
          redrawY(g);
          moved = true;
        }
        if (moved) {
          redraw(g);
          event_({
            type: "brush",
            mode: dragging ? "move" : "resize"
          });
        }
      }
      function move1(point, scale, i) {
        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;
        if (dragging) {
          r0 -= position;
          r1 -= size + position;
        }
        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];
        if (dragging) {
          max = (min += position) + size;
        } else {
          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));
          if (position < min) {
            max = min;
            min = position;
          } else {
            max = position;
          }
        }
        if (extent[0] != min || extent[1] != max) {
          if (i) yExtentDomain = null; else xExtentDomain = null;
          extent[0] = min;
          extent[1] = max;
          return true;
        }
      }
      function brushend() {
        brushmove();
        g.style("pointer-events", "all").selectAll(".resize").style("display", brush.empty() ? "none" : null);
        d3.select("body").style("cursor", null);
        w.on("mousemove.brush", null).on("mouseup.brush", null).on("touchmove.brush", null).on("touchend.brush", null).on("keydown.brush", null).on("keyup.brush", null);
        dragRestore();
        event_({
          type: "brushend"
        });
      }
    }
    brush.x = function(z) {
      if (!arguments.length) return x;
      x = z;
      resizes = d3_svg_brushResizes[!x << 1 | !y];
      return brush;
    };
    brush.y = function(z) {
      if (!arguments.length) return y;
      y = z;
      resizes = d3_svg_brushResizes[!x << 1 | !y];
      return brush;
    };
    brush.clamp = function(z) {
      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;
      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;
      return brush;
    };
    brush.extent = function(z) {
      var x0, x1, y0, y1, t;
      if (!arguments.length) {
        if (x) {
          if (xExtentDomain) {
            x0 = xExtentDomain[0], x1 = xExtentDomain[1];
          } else {
            x0 = xExtent[0], x1 = xExtent[1];
            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);
            if (x1 < x0) t = x0, x0 = x1, x1 = t;
          }
        }
        if (y) {
          if (yExtentDomain) {
            y0 = yExtentDomain[0], y1 = yExtentDomain[1];
          } else {
            y0 = yExtent[0], y1 = yExtent[1];
            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);
            if (y1 < y0) t = y0, y0 = y1, y1 = t;
          }
        }
        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];
      }
      if (x) {
        x0 = z[0], x1 = z[1];
        if (y) x0 = x0[0], x1 = x1[0];
        xExtentDomain = [ x0, x1 ];
        if (x.invert) x0 = x(x0), x1 = x(x1);
        if (x1 < x0) t = x0, x0 = x1, x1 = t;
        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];
      }
      if (y) {
        y0 = z[0], y1 = z[1];
        if (x) y0 = y0[1], y1 = y1[1];
        yExtentDomain = [ y0, y1 ];
        if (y.invert) y0 = y(y0), y1 = y(y1);
        if (y1 < y0) t = y0, y0 = y1, y1 = t;
        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];
      }
      return brush;
    };
    brush.clear = function() {
      if (!brush.empty()) {
        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];
        xExtentDomain = yExtentDomain = null;
      }
      return brush;
    };
    brush.empty = function() {
      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];
    };
    return d3.rebind(brush, event, "on");
  };
  var d3_svg_brushCursor = {
    n: "ns-resize",
    e: "ew-resize",
    s: "ns-resize",
    w: "ew-resize",
    nw: "nwse-resize",
    ne: "nesw-resize",
    se: "nwse-resize",
    sw: "nesw-resize"
  };
  var d3_svg_brushResizes = [ [ "n", "e", "s", "w", "nw", "ne", "se", "sw" ], [ "e", "w" ], [ "n", "s" ], [] ];
  var d3_time = d3.time = {}, d3_date = Date, d3_time_daySymbols = [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ];
  function d3_date_utc() {
    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);
  }
  d3_date_utc.prototype = {
    getDate: function() {
      return this._.getUTCDate();
    },
    getDay: function() {
      return this._.getUTCDay();
    },
    getFullYear: function() {
      return this._.getUTCFullYear();
    },
    getHours: function() {
      return this._.getUTCHours();
    },
    getMilliseconds: function() {
      return this._.getUTCMilliseconds();
    },
    getMinutes: function() {
      return this._.getUTCMinutes();
    },
    getMonth: function() {
      return this._.getUTCMonth();
    },
    getSeconds: function() {
      return this._.getUTCSeconds();
    },
    getTime: function() {
      return this._.getTime();
    },
    getTimezoneOffset: function() {
      return 0;
    },
    valueOf: function() {
      return this._.valueOf();
    },
    setDate: function() {
      d3_time_prototype.setUTCDate.apply(this._, arguments);
    },
    setDay: function() {
      d3_time_prototype.setUTCDay.apply(this._, arguments);
    },
    setFullYear: function() {
      d3_time_prototype.setUTCFullYear.apply(this._, arguments);
    },
    setHours: function() {
      d3_time_prototype.setUTCHours.apply(this._, arguments);
    },
    setMilliseconds: function() {
      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);
    },
    setMinutes: function() {
      d3_time_prototype.setUTCMinutes.apply(this._, arguments);
    },
    setMonth: function() {
      d3_time_prototype.setUTCMonth.apply(this._, arguments);
    },
    setSeconds: function() {
      d3_time_prototype.setUTCSeconds.apply(this._, arguments);
    },
    setTime: function() {
      d3_time_prototype.setTime.apply(this._, arguments);
    }
  };
  var d3_time_prototype = Date.prototype;
  var d3_time_formatDateTime = "%a %b %e %X %Y", d3_time_formatDate = "%m/%d/%Y", d3_time_formatTime = "%H:%M:%S";
  var d3_time_days = [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ], d3_time_dayAbbreviations = [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ], d3_time_months = [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ], d3_time_monthAbbreviations = [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ];
  function d3_time_interval(local, step, number) {
    function round(date) {
      var d0 = local(date), d1 = offset(d0, 1);
      return date - d0 < d1 - date ? d0 : d1;
    }
    function ceil(date) {
      step(date = local(new d3_date(date - 1)), 1);
      return date;
    }
    function offset(date, k) {
      step(date = new d3_date(+date), k);
      return date;
    }
    function range(t0, t1, dt) {
      var time = ceil(t0), times = [];
      if (dt > 1) {
        while (time < t1) {
          if (!(number(time) % dt)) times.push(new Date(+time));
          step(time, 1);
        }
      } else {
        while (time < t1) times.push(new Date(+time)), step(time, 1);
      }
      return times;
    }
    function range_utc(t0, t1, dt) {
      try {
        d3_date = d3_date_utc;
        var utc = new d3_date_utc();
        utc._ = t0;
        return range(utc, t1, dt);
      } finally {
        d3_date = Date;
      }
    }
    local.floor = local;
    local.round = round;
    local.ceil = ceil;
    local.offset = offset;
    local.range = range;
    var utc = local.utc = d3_time_interval_utc(local);
    utc.floor = utc;
    utc.round = d3_time_interval_utc(round);
    utc.ceil = d3_time_interval_utc(ceil);
    utc.offset = d3_time_interval_utc(offset);
    utc.range = range_utc;
    return local;
  }
  function d3_time_interval_utc(method) {
    return function(date, k) {
      try {
        d3_date = d3_date_utc;
        var utc = new d3_date_utc();
        utc._ = date;
        return method(utc, k)._;
      } finally {
        d3_date = Date;
      }
    };
  }
  d3_time.year = d3_time_interval(function(date) {
    date = d3_time.day(date);
    date.setMonth(0, 1);
    return date;
  }, function(date, offset) {
    date.setFullYear(date.getFullYear() + offset);
  }, function(date) {
    return date.getFullYear();
  });
  d3_time.years = d3_time.year.range;
  d3_time.years.utc = d3_time.year.utc.range;
  d3_time.day = d3_time_interval(function(date) {
    var day = new d3_date(2e3, 0);
    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
    return day;
  }, function(date, offset) {
    date.setDate(date.getDate() + offset);
  }, function(date) {
    return date.getDate() - 1;
  });
  d3_time.days = d3_time.day.range;
  d3_time.days.utc = d3_time.day.utc.range;
  d3_time.dayOfYear = function(date) {
    var year = d3_time.year(date);
    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);
  };
  d3_time_daySymbols.forEach(function(day, i) {
    day = day.toLowerCase();
    i = 7 - i;
    var interval = d3_time[day] = d3_time_interval(function(date) {
      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);
      return date;
    }, function(date, offset) {
      date.setDate(date.getDate() + Math.floor(offset) * 7);
    }, function(date) {
      var day = d3_time.year(date).getDay();
      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);
    });
    d3_time[day + "s"] = interval.range;
    d3_time[day + "s"].utc = interval.utc.range;
    d3_time[day + "OfYear"] = function(date) {
      var day = d3_time.year(date).getDay();
      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);
    };
  });
  d3_time.week = d3_time.sunday;
  d3_time.weeks = d3_time.sunday.range;
  d3_time.weeks.utc = d3_time.sunday.utc.range;
  d3_time.weekOfYear = d3_time.sundayOfYear;
  d3_time.format = d3_time_format;
  function d3_time_format(template) {
    var n = template.length;
    function format(date) {
      var string = [], i = -1, j = 0, c, p, f;
      while (++i < n) {
        if (template.charCodeAt(i) === 37) {
          string.push(template.substring(j, i));
          if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);
          if (f = d3_time_formats[c]) c = f(date, p == null ? c === "e" ? " " : "0" : p);
          string.push(c);
          j = i + 1;
        }
      }
      string.push(template.substring(j, i));
      return string.join("");
    }
    format.parse = function(string) {
      var d = {
        y: 1900,
        m: 0,
        d: 1,
        H: 0,
        M: 0,
        S: 0,
        L: 0,
        Z: null
      }, i = d3_time_parse(d, template, string, 0);
      if (i != string.length) return null;
      if ("p" in d) d.H = d.H % 12 + d.p * 12;
      var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();
      if ("j" in d) date.setFullYear(d.y, 0, d.j); else if ("w" in d && ("W" in d || "U" in d)) {
        date.setFullYear(d.y, 0, 1);
        date.setFullYear(d.y, 0, "W" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);
      } else date.setFullYear(d.y, d.m, d.d);
      date.setHours(d.H + Math.floor(d.Z / 100), d.M + d.Z % 100, d.S, d.L);
      return localZ ? date._ : date;
    };
    format.toString = function() {
      return template;
    };
    return format;
  }
  function d3_time_parse(date, template, string, j) {
    var c, p, t, i = 0, n = template.length, m = string.length;
    while (i < n) {
      if (j >= m) return -1;
      c = template.charCodeAt(i++);
      if (c === 37) {
        t = template.charAt(i++);
        p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];
        if (!p || (j = p(date, string, j)) < 0) return -1;
      } else if (c != string.charCodeAt(j++)) {
        return -1;
      }
    }
    return j;
  }
  function d3_time_formatRe(names) {
    return new RegExp("^(?:" + names.map(d3.requote).join("|") + ")", "i");
  }
  function d3_time_formatLookup(names) {
    var map = new d3_Map(), i = -1, n = names.length;
    while (++i < n) map.set(names[i].toLowerCase(), i);
    return map;
  }
  function d3_time_formatPad(value, fill, width) {
    var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
  }
  var d3_time_dayRe = d3_time_formatRe(d3_time_days), d3_time_dayLookup = d3_time_formatLookup(d3_time_days), d3_time_dayAbbrevRe = d3_time_formatRe(d3_time_dayAbbreviations), d3_time_dayAbbrevLookup = d3_time_formatLookup(d3_time_dayAbbreviations), d3_time_monthRe = d3_time_formatRe(d3_time_months), d3_time_monthLookup = d3_time_formatLookup(d3_time_months), d3_time_monthAbbrevRe = d3_time_formatRe(d3_time_monthAbbreviations), d3_time_monthAbbrevLookup = d3_time_formatLookup(d3_time_monthAbbreviations), d3_time_percentRe = /^%/;
  var d3_time_formatPads = {
    "-": "",
    _: " ",
    "0": "0"
  };
  var d3_time_formats = {
    a: function(d) {
      return d3_time_dayAbbreviations[d.getDay()];
    },
    A: function(d) {
      return d3_time_days[d.getDay()];
    },
    b: function(d) {
      return d3_time_monthAbbreviations[d.getMonth()];
    },
    B: function(d) {
      return d3_time_months[d.getMonth()];
    },
    c: d3_time_format(d3_time_formatDateTime),
    d: function(d, p) {
      return d3_time_formatPad(d.getDate(), p, 2);
    },
    e: function(d, p) {
      return d3_time_formatPad(d.getDate(), p, 2);
    },
    H: function(d, p) {
      return d3_time_formatPad(d.getHours(), p, 2);
    },
    I: function(d, p) {
      return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);
    },
    j: function(d, p) {
      return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);
    },
    L: function(d, p) {
      return d3_time_formatPad(d.getMilliseconds(), p, 3);
    },
    m: function(d, p) {
      return d3_time_formatPad(d.getMonth() + 1, p, 2);
    },
    M: function(d, p) {
      return d3_time_formatPad(d.getMinutes(), p, 2);
    },
    p: function(d) {
      return d.getHours() >= 12 ? "PM" : "AM";
    },
    S: function(d, p) {
      return d3_time_formatPad(d.getSeconds(), p, 2);
    },
    U: function(d, p) {
      return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);
    },
    w: function(d) {
      return d.getDay();
    },
    W: function(d, p) {
      return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);
    },
    x: d3_time_format(d3_time_formatDate),
    X: d3_time_format(d3_time_formatTime),
    y: function(d, p) {
      return d3_time_formatPad(d.getFullYear() % 100, p, 2);
    },
    Y: function(d, p) {
      return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);
    },
    Z: d3_time_zone,
    "%": function() {
      return "%";
    }
  };
  var d3_time_parsers = {
    a: d3_time_parseWeekdayAbbrev,
    A: d3_time_parseWeekday,
    b: d3_time_parseMonthAbbrev,
    B: d3_time_parseMonth,
    c: d3_time_parseLocaleFull,
    d: d3_time_parseDay,
    e: d3_time_parseDay,
    H: d3_time_parseHour24,
    I: d3_time_parseHour24,
    j: d3_time_parseDayOfYear,
    L: d3_time_parseMilliseconds,
    m: d3_time_parseMonthNumber,
    M: d3_time_parseMinutes,
    p: d3_time_parseAmPm,
    S: d3_time_parseSeconds,
    U: d3_time_parseWeekNumberSunday,
    w: d3_time_parseWeekdayNumber,
    W: d3_time_parseWeekNumberMonday,
    x: d3_time_parseLocaleDate,
    X: d3_time_parseLocaleTime,
    y: d3_time_parseYear,
    Y: d3_time_parseFullYear,
    Z: d3_time_parseZone,
    "%": d3_time_parseLiteralPercent
  };
  function d3_time_parseWeekdayAbbrev(date, string, i) {
    d3_time_dayAbbrevRe.lastIndex = 0;
    var n = d3_time_dayAbbrevRe.exec(string.substring(i));
    return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function d3_time_parseWeekday(date, string, i) {
    d3_time_dayRe.lastIndex = 0;
    var n = d3_time_dayRe.exec(string.substring(i));
    return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function d3_time_parseWeekdayNumber(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 1));
    return n ? (date.w = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseWeekNumberSunday(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i));
    return n ? (date.U = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseWeekNumberMonday(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i));
    return n ? (date.W = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseMonthAbbrev(date, string, i) {
    d3_time_monthAbbrevRe.lastIndex = 0;
    var n = d3_time_monthAbbrevRe.exec(string.substring(i));
    return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function d3_time_parseMonth(date, string, i) {
    d3_time_monthRe.lastIndex = 0;
    var n = d3_time_monthRe.exec(string.substring(i));
    return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function d3_time_parseLocaleFull(date, string, i) {
    return d3_time_parse(date, d3_time_formats.c.toString(), string, i);
  }
  function d3_time_parseLocaleDate(date, string, i) {
    return d3_time_parse(date, d3_time_formats.x.toString(), string, i);
  }
  function d3_time_parseLocaleTime(date, string, i) {
    return d3_time_parse(date, d3_time_formats.X.toString(), string, i);
  }
  function d3_time_parseFullYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 4));
    return n ? (date.y = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 2));
    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;
  }
  function d3_time_parseZone(date, string, i) {
    return /^[+-]\d{4}$/.test(string = string.substring(i, i + 5)) ? (date.Z = +string,
    i + 5) : -1;
  }
  function d3_time_expandYear(d) {
    return d + (d > 68 ? 1900 : 2e3);
  }
  function d3_time_parseMonthNumber(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 2));
    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;
  }
  function d3_time_parseDay(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 2));
    return n ? (date.d = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseDayOfYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 3));
    return n ? (date.j = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseHour24(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 2));
    return n ? (date.H = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseMinutes(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 2));
    return n ? (date.M = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseSeconds(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 2));
    return n ? (date.S = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseMilliseconds(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 3));
    return n ? (date.L = +n[0], i + n[0].length) : -1;
  }
  var d3_time_numberRe = /^\s*\d+/;
  function d3_time_parseAmPm(date, string, i) {
    var n = d3_time_amPmLookup.get(string.substring(i, i += 2).toLowerCase());
    return n == null ? -1 : (date.p = n, i);
  }
  var d3_time_amPmLookup = d3.map({
    am: 0,
    pm: 1
  });
  function d3_time_zone(d) {
    var z = d.getTimezoneOffset(), zs = z > 0 ? "-" : "+", zh = ~~(abs(z) / 60), zm = abs(z) % 60;
    return zs + d3_time_formatPad(zh, "0", 2) + d3_time_formatPad(zm, "0", 2);
  }
  function d3_time_parseLiteralPercent(date, string, i) {
    d3_time_percentRe.lastIndex = 0;
    var n = d3_time_percentRe.exec(string.substring(i, i + 1));
    return n ? i + n[0].length : -1;
  }
  d3_time_format.utc = d3_time_formatUtc;
  function d3_time_formatUtc(template) {
    var local = d3_time_format(template);
    function format(date) {
      try {
        d3_date = d3_date_utc;
        var utc = new d3_date();
        utc._ = date;
        return local(utc);
      } finally {
        d3_date = Date;
      }
    }
    format.parse = function(string) {
      try {
        d3_date = d3_date_utc;
        var date = local.parse(string);
        return date && date._;
      } finally {
        d3_date = Date;
      }
    };
    format.toString = local.toString;
    return format;
  }
  var d3_time_formatIso = d3_time_formatUtc("%Y-%m-%dT%H:%M:%S.%LZ");
  d3_time_format.iso = Date.prototype.toISOString && +new Date("2000-01-01T00:00:00.000Z") ? d3_time_formatIsoNative : d3_time_formatIso;
  function d3_time_formatIsoNative(date) {
    return date.toISOString();
  }
  d3_time_formatIsoNative.parse = function(string) {
    var date = new Date(string);
    return isNaN(date) ? null : date;
  };
  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;
  d3_time.second = d3_time_interval(function(date) {
    return new d3_date(Math.floor(date / 1e3) * 1e3);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 1e3);
  }, function(date) {
    return date.getSeconds();
  });
  d3_time.seconds = d3_time.second.range;
  d3_time.seconds.utc = d3_time.second.utc.range;
  d3_time.minute = d3_time_interval(function(date) {
    return new d3_date(Math.floor(date / 6e4) * 6e4);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 6e4);
  }, function(date) {
    return date.getMinutes();
  });
  d3_time.minutes = d3_time.minute.range;
  d3_time.minutes.utc = d3_time.minute.utc.range;
  d3_time.hour = d3_time_interval(function(date) {
    var timezone = date.getTimezoneOffset() / 60;
    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 36e5);
  }, function(date) {
    return date.getHours();
  });
  d3_time.hours = d3_time.hour.range;
  d3_time.hours.utc = d3_time.hour.utc.range;
  d3_time.month = d3_time_interval(function(date) {
    date = d3_time.day(date);
    date.setDate(1);
    return date;
  }, function(date, offset) {
    date.setMonth(date.getMonth() + offset);
  }, function(date) {
    return date.getMonth();
  });
  d3_time.months = d3_time.month.range;
  d3_time.months.utc = d3_time.month.utc.range;
  function d3_time_scale(linear, methods, format) {
    function scale(x) {
      return linear(x);
    }
    scale.invert = function(x) {
      return d3_time_scaleDate(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);
      linear.domain(x);
      return scale;
    };
    function tickMethod(extent, count) {
      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);
      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {
        return d / 31536e6;
      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];
    }
    scale.nice = function(interval, skip) {
      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" && tickMethod(extent, interval);
      if (method) interval = method[0], skip = method[1];
      function skipped(date) {
        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;
      }
      return scale.domain(d3_scale_nice(domain, skip > 1 ? {
        floor: function(date) {
          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);
          return date;
        },
        ceil: function(date) {
          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);
          return date;
        }
      } : interval));
    };
    scale.ticks = function(interval, skip) {
      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" ? tickMethod(extent, interval) : !interval.range && [ {
        range: interval
      }, skip ];
      if (method) interval = method[0], skip = method[1];
      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);
    };
    scale.tickFormat = function() {
      return format;
    };
    scale.copy = function() {
      return d3_time_scale(linear.copy(), methods, format);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  function d3_time_scaleDate(t) {
    return new Date(t);
  }
  function d3_time_scaleFormat(formats) {
    return function(date) {
      var i = formats.length - 1, f = formats[i];
      while (!f[1](date)) f = formats[--i];
      return f[0](date);
    };
  }
  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];
  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];
  var d3_time_scaleLocalFormats = [ [ d3_time_format("%Y"), d3_true ], [ d3_time_format("%B"), function(d) {
    return d.getMonth();
  } ], [ d3_time_format("%b %d"), function(d) {
    return d.getDate() != 1;
  } ], [ d3_time_format("%a %d"), function(d) {
    return d.getDay() && d.getDate() != 1;
  } ], [ d3_time_format("%I %p"), function(d) {
    return d.getHours();
  } ], [ d3_time_format("%I:%M"), function(d) {
    return d.getMinutes();
  } ], [ d3_time_format(":%S"), function(d) {
    return d.getSeconds();
  } ], [ d3_time_format(".%L"), function(d) {
    return d.getMilliseconds();
  } ] ];
  var d3_time_scaleLocalFormat = d3_time_scaleFormat(d3_time_scaleLocalFormats);
  d3_time_scaleLocalMethods.year = d3_time.year;
  d3_time.scale = function() {
    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);
  };
  var d3_time_scaleMilliseconds = {
    range: function(start, stop, step) {
      return d3.range(+start, +stop, step).map(d3_time_scaleDate);
    }
  };
  var d3_time_scaleUTCMethods = d3_time_scaleLocalMethods.map(function(m) {
    return [ m[0].utc, m[1] ];
  });
  var d3_time_scaleUTCFormats = [ [ d3_time_formatUtc("%Y"), d3_true ], [ d3_time_formatUtc("%B"), function(d) {
    return d.getUTCMonth();
  } ], [ d3_time_formatUtc("%b %d"), function(d) {
    return d.getUTCDate() != 1;
  } ], [ d3_time_formatUtc("%a %d"), function(d) {
    return d.getUTCDay() && d.getUTCDate() != 1;
  } ], [ d3_time_formatUtc("%I %p"), function(d) {
    return d.getUTCHours();
  } ], [ d3_time_formatUtc("%I:%M"), function(d) {
    return d.getUTCMinutes();
  } ], [ d3_time_formatUtc(":%S"), function(d) {
    return d.getUTCSeconds();
  } ], [ d3_time_formatUtc(".%L"), function(d) {
    return d.getUTCMilliseconds();
  } ] ];
  var d3_time_scaleUTCFormat = d3_time_scaleFormat(d3_time_scaleUTCFormats);
  d3_time_scaleUTCMethods.year = d3_time.year.utc;
  d3_time.scale.utc = function() {
    return d3_time_scale(d3.scale.linear(), d3_time_scaleUTCMethods, d3_time_scaleUTCFormat);
  };
  d3.text = d3_xhrType(function(request) {
    return request.responseText;
  });
  d3.json = function(url, callback) {
    return d3_xhr(url, "application/json", d3_json, callback);
  };
  function d3_json(request) {
    return JSON.parse(request.responseText);
  }
  d3.html = function(url, callback) {
    return d3_xhr(url, "text/html", d3_html, callback);
  };
  function d3_html(request) {
    var range = d3_document.createRange();
    range.selectNode(d3_document.body);
    return range.createContextualFragment(request.responseText);
  }
  d3.xml = d3_xhrType(function(request) {
    return request.responseXML;
  });



  d3.ribbon= function() {
  /*var source = defaultSource,
      target = defaultTarget,
      radius = defaultRadius,
      startAngle = defaultStartAngle,
      endAngle = defaultEndAngle,
      context = null;*/

  function ribbon() {


    var slice$2 = Array.prototype.slice;
    var buffer,
        argv = slice$2.call(arguments),
        source = argv[0].source,
        target = argv[0].target,
        sr = source.radius,
        sa0 = source.startAngle-Math.PI/2,
        sa1 = source.endAngle-Math.PI/2,
        sx0 = sr * Math.cos(sa0),
        sy0 = sr * Math.sin(sa0),
        tr = target.radius,
        ta0 = target.startAngle-Math.PI/2,
        ta1 = target.endAngle-Math.PI/2
        context=argv[0].context;


        /*var s = source.apply(this, argv),
        t = target.apply(this, argv),
        sr = +radius.apply(this, (argv[0] = s, argv)),
        sa0 = startAngle.apply(this, argv) - halfPi$1,
        sa1 = endAngle.apply(this, argv) - halfPi$1,
        sx0 = sr * cos(sa0),
        sy0 = sr * sin(sa0),
        tr = +radius.apply(this, (argv[0] = t, argv)),
        ta0 = startAngle.apply(this, argv) - halfPi$1,
        ta1 = endAngle.apply(this, argv) - halfPi$1;*/
        //context = path();
    //if (!context) context = buffer = path();
    console.log("context", context)

    context.moveTo(sx0, sy0);
    context.arc(0, 0, sr, sa0, sa1);
    if (sa0 !== ta0 || sa1 !== ta1) { // TODO sr !== tr?
      context.quadraticCurveTo(0, 0, tr * Math.cos(ta0), tr * Math.sin(ta0));
      context.arc(0, 0, tr, ta0, ta1);
    }
    context.quadraticCurveTo(0, 0, sx0, sy0);
    context.closePath();

    if (buffer) return context = null, buffer + "" || null;
  }

  ribbon.radius = function(_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : constant$5(+_), ribbon) : radius;
  };

  ribbon.startAngle = function(_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$5(+_), ribbon) : startAngle;
  };

  ribbon.endAngle = function(_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$5(+_), ribbon) : endAngle;
  };

  ribbon.source = function(_) {
    return arguments.length ? (source = _, ribbon) : source;
  };

  ribbon.target = function(_) {
    return arguments.length ? (target = _, ribbon) : target;
  };

  ribbon.context = function(_) {
    return arguments.length ? (context = _ == null ? null : _, ribbon) : context;
  };

  return ribbon;

}


function Path() {
  this._x0 = this._y0 = // start of current subpath
  this._x1 = this._y1 = null; // end of current subpath
  this._ = "";
}

function path() {
  return new Path;
}

Path.prototype = path.prototype = {
  constructor: Path,
  moveTo: function(x, y) {
    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
  },
  closePath: function() {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._ += "Z";
    }
  },
  lineTo: function(x, y) {
    this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  quadraticCurveTo: function(x1, y1, x, y) {
    this._ += "Q" + (+x1) + "," + (+y1) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  bezierCurveTo: function(x1, y1, x2, y2, x, y) {
    this._ += "C" + (+x1) + "," + (+y1) + "," + (+x2) + "," + (+y2) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  arcTo: function(x1, y1, x2, y2, r) {
    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
    var x0 = this._x1,
        y0 = this._y1,
        x21 = x2 - x1,
        y21 = y2 - y1,
        x01 = x0 - x1,
        y01 = y0 - y1,
        l01_2 = x01 * x01 + y01 * y01;

    // Is the radius negative? Error.
    if (r < 0) throw new Error("negative radius: " + r);

    // Is this path empty? Move to (x1,y1).
    if (this._x1 === null) {
      this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
    }

    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
    else if (!(l01_2 > epsilon$1)) {}

    // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
    // Equivalently, is (x1,y1) coincident with (x2,y2)?
    // Or, is the radius zero? Line to (x1,y1).
    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon$1) || !r) {
      this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
    }

    // Otherwise, draw an arc!
    else {
      var x20 = x2 - x0,
          y20 = y2 - y0,
          l21_2 = x21 * x21 + y21 * y21,
          l20_2 = x20 * x20 + y20 * y20,
          l21 = Math.sqrt(l21_2),
          l01 = Math.sqrt(l01_2),
          l = r * Math.tan((pi$2 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
          t01 = l / l01,
          t21 = l / l21;

      // If the start tangent is not coincident with (x0,y0), line to.
      if (Math.abs(t01 - 1) > epsilon$1) {
        this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
      }

      this._ += "A" + r + "," + r + ",0,0," + (+(y01 * x20 > x01 * y20)) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
    }
  },
  arc: function(x, y, r, a0, a1, ccw) {
    x = +x, y = +y, r = +r;
    var dx = r * Math.cos(a0),
        dy = r * Math.sin(a0),
        x0 = x + dx,
        y0 = y + dy,
        cw = 1 ^ ccw,
        da = ccw ? a0 - a1 : a1 - a0;

    // Is the radius negative? Error.
    if (r < 0) throw new Error("negative radius: " + r);

    // Is this path empty? Move to (x0,y0).
    if (this._x1 === null) {
      this._ += "M" + x0 + "," + y0;
    }

    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
    else if (Math.abs(this._x1 - x0) > epsilon$1 || Math.abs(this._y1 - y0) > epsilon$1) {
      this._ += "L" + x0 + "," + y0;
    }

    // Is this arc empty? We’re done.
    if (!r) return;

    // Does the angle go the wrong way? Flip the direction.
    if (da < 0) da = da % tau$2 + tau$2;

    // Is this a complete circle? Draw two arcs to complete the circle.
    if (da > tauEpsilon) {
      this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
    }

    // Is this arc non-empty? Draw an arc!
    else if (da > epsilon$1) {
      this._ += "A" + r + "," + r + ",0," + (+(da >= pi$2)) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
    }
  },
  rect: function(x, y, w, h) {
    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + (+w) + "v" + (+h) + "h" + (-w) + "Z";
  },
  toString: function() {
    return this._;
  }
};





  return d3;
}();


/***/ }),

/***/ "./public/css/animate.css":
/*!********************************!*\
  !*** ./public/css/animate.css ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "@charset \"UTF-8\";\n\n/*!\nAnimate.css - http://daneden.me/animate\nLicensed under the MIT license - http://opensource.org/licenses/MIT\n\nCopyright (c) 2014 Daniel Eden\n*/\n\n.animated {\n  -webkit-animation-duration: 1s;\n  animation-duration: 1s;\n  -webkit-animation-fill-mode: both;\n  animation-fill-mode: both;\n}\n\n.animated.infinite {\n  -webkit-animation-iteration-count: infinite;\n  animation-iteration-count: infinite;\n}\n\n.animated.hinge {\n  -webkit-animation-duration: 2s;\n  animation-duration: 2s;\n}\n\n@-webkit-keyframes bounce {\n  0%, 20%, 53%, 80%, 100% {\n    transition-timing-function: cubic-bezier(0.215, 0.610, 0.355, 1.000);\n    -webkit-transform: translate3d(0,0,0);\n    transform: translate3d(0,0,0);\n  }\n\n  40%, 43% {\n    transition-timing-function: cubic-bezier(0.755, 0.050, 0.855, 0.060);\n    -webkit-transform: translate3d(0, -30px, 0);\n    transform: translate3d(0, -30px, 0);\n  }\n\n  70% {\n    transition-timing-function: cubic-bezier(0.755, 0.050, 0.855, 0.060);\n    -webkit-transform: translate3d(0, -15px, 0);\n    transform: translate3d(0, -15px, 0);\n  }\n\n  90% {\n    -webkit-transform: translate3d(0,-4px,0);\n    transform: translate3d(0,-4px,0);\n  }\n}\n\n@keyframes bounce {\n  0%, 20%, 53%, 80%, 100% {\n    transition-timing-function: cubic-bezier(0.215, 0.610, 0.355, 1.000);\n    -webkit-transform: translate3d(0,0,0);\n    transform: translate3d(0,0,0);\n  }\n\n  40%, 43% {\n    transition-timing-function: cubic-bezier(0.755, 0.050, 0.855, 0.060);\n    -webkit-transform: translate3d(0, -30px, 0);\n    transform: translate3d(0, -30px, 0);\n  }\n\n  70% {\n    transition-timing-function: cubic-bezier(0.755, 0.050, 0.855, 0.060);\n    -webkit-transform: translate3d(0, -15px, 0);\n    transform: translate3d(0, -15px, 0);\n  }\n\n  90% {\n    -webkit-transform: translate3d(0,-4px,0);\n    transform: translate3d(0,-4px,0);\n  }\n}\n\n.bounce {\n  -webkit-animation-name: bounce;\n  animation-name: bounce;\n  -webkit-transform-origin: center bottom;\n  transform-origin: center bottom;\n}\n\n@-webkit-keyframes flash {\n  0%, 50%, 100% {\n    opacity: 1;\n  }\n\n  25%, 75% {\n    opacity: 0;\n  }\n}\n\n@keyframes flash {\n  0%, 50%, 100% {\n    opacity: 1;\n  }\n\n  25%, 75% {\n    opacity: 0;\n  }\n}\n\n.flash {\n  -webkit-animation-name: flash;\n  animation-name: flash;\n}\n\n/* originally authored by Nick Pettit - https://github.com/nickpettit/glide */\n\n@-webkit-keyframes pulse {\n  0% {\n    -webkit-transform: scale3d(1, 1, 1);\n    transform: scale3d(1, 1, 1);\n  }\n\n  50% {\n    -webkit-transform: scale3d(1.05, 1.05, 1.05);\n    transform: scale3d(1.05, 1.05, 1.05);\n  }\n\n  100% {\n    -webkit-transform: scale3d(1, 1, 1);\n    transform: scale3d(1, 1, 1);\n  }\n}\n\n@keyframes pulse {\n  0% {\n    -webkit-transform: scale3d(1, 1, 1);\n    transform: scale3d(1, 1, 1);\n  }\n\n  50% {\n    -webkit-transform: scale3d(1.05, 1.05, 1.05);\n    transform: scale3d(1.05, 1.05, 1.05);\n  }\n\n  100% {\n    -webkit-transform: scale3d(1, 1, 1);\n    transform: scale3d(1, 1, 1);\n  }\n}\n\n.pulse {\n  -webkit-animation-name: pulse;\n  animation-name: pulse;\n}\n\n@-webkit-keyframes rubberBand {\n  0% {\n    -webkit-transform: scale3d(1, 1, 1);\n    transform: scale3d(1, 1, 1);\n  }\n\n  30% {\n    -webkit-transform: scale3d(1.25, 0.75, 1);\n    transform: scale3d(1.25, 0.75, 1);\n  }\n\n  40% {\n    -webkit-transform: scale3d(0.75, 1.25, 1);\n    transform: scale3d(0.75, 1.25, 1);\n  }\n\n  50% {\n    -webkit-transform: scale3d(1.15, 0.85, 1);\n    transform: scale3d(1.15, 0.85, 1);\n  }\n\n  65% {\n    -webkit-transform: scale3d(.95, 1.05, 1);\n    transform: scale3d(.95, 1.05, 1);\n  }\n\n  75% {\n    -webkit-transform: scale3d(1.05, .95, 1);\n    transform: scale3d(1.05, .95, 1);\n  }\n\n  100% {\n    -webkit-transform: scale3d(1, 1, 1);\n    transform: scale3d(1, 1, 1);\n  }\n}\n\n@keyframes rubberBand {\n  0% {\n    -webkit-transform: scale3d(1, 1, 1);\n    transform: scale3d(1, 1, 1);\n  }\n\n  30% {\n    -webkit-transform: scale3d(1.25, 0.75, 1);\n    transform: scale3d(1.25, 0.75, 1);\n  }\n\n  40% {\n    -webkit-transform: scale3d(0.75, 1.25, 1);\n    transform: scale3d(0.75, 1.25, 1);\n  }\n\n  50% {\n    -webkit-transform: scale3d(1.15, 0.85, 1);\n    transform: scale3d(1.15, 0.85, 1);\n  }\n\n  65% {\n    -webkit-transform: scale3d(.95, 1.05, 1);\n    transform: scale3d(.95, 1.05, 1);\n  }\n\n  75% {\n    -webkit-transform: scale3d(1.05, .95, 1);\n    transform: scale3d(1.05, .95, 1);\n  }\n\n  100% {\n    -webkit-transform: scale3d(1, 1, 1);\n    transform: scale3d(1, 1, 1);\n  }\n}\n\n.rubberBand {\n  -webkit-animation-name: rubberBand;\n  animation-name: rubberBand;\n}\n\n@-webkit-keyframes shake {\n  0%, 100% {\n    -webkit-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n  }\n\n  10%, 30%, 50%, 70%, 90% {\n    -webkit-transform: translate3d(-10px, 0, 0);\n    transform: translate3d(-10px, 0, 0);\n  }\n\n  20%, 40%, 60%, 80% {\n    -webkit-transform: translate3d(10px, 0, 0);\n    transform: translate3d(10px, 0, 0);\n  }\n}\n\n@keyframes shake {\n  0%, 100% {\n    -webkit-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n  }\n\n  10%, 30%, 50%, 70%, 90% {\n    -webkit-transform: translate3d(-10px, 0, 0);\n    transform: translate3d(-10px, 0, 0);\n  }\n\n  20%, 40%, 60%, 80% {\n    -webkit-transform: translate3d(10px, 0, 0);\n    transform: translate3d(10px, 0, 0);\n  }\n}\n\n.shake {\n  -webkit-animation-name: shake;\n  animation-name: shake;\n}\n\n@-webkit-keyframes swing {\n  20% {\n    -webkit-transform: rotate3d(0, 0, 1, 15deg);\n    transform: rotate3d(0, 0, 1, 15deg);\n  }\n\n  40% {\n    -webkit-transform: rotate3d(0, 0, 1, -10deg);\n    transform: rotate3d(0, 0, 1, -10deg);\n  }\n\n  60% {\n    -webkit-transform: rotate3d(0, 0, 1, 5deg);\n    transform: rotate3d(0, 0, 1, 5deg);\n  }\n\n  80% {\n    -webkit-transform: rotate3d(0, 0, 1, -5deg);\n    transform: rotate3d(0, 0, 1, -5deg);\n  }\n\n  100% {\n    -webkit-transform: rotate3d(0, 0, 1, 0deg);\n    transform: rotate3d(0, 0, 1, 0deg);\n  }\n}\n\n@keyframes swing {\n  20% {\n    -webkit-transform: rotate3d(0, 0, 1, 15deg);\n    transform: rotate3d(0, 0, 1, 15deg);\n  }\n\n  40% {\n    -webkit-transform: rotate3d(0, 0, 1, -10deg);\n    transform: rotate3d(0, 0, 1, -10deg);\n  }\n\n  60% {\n    -webkit-transform: rotate3d(0, 0, 1, 5deg);\n    transform: rotate3d(0, 0, 1, 5deg);\n  }\n\n  80% {\n    -webkit-transform: rotate3d(0, 0, 1, -5deg);\n    transform: rotate3d(0, 0, 1, -5deg);\n  }\n\n  100% {\n    -webkit-transform: rotate3d(0, 0, 1, 0deg);\n    transform: rotate3d(0, 0, 1, 0deg);\n  }\n}\n\n.swing {\n  -webkit-transform-origin: top center;\n  transform-origin: top center;\n  -webkit-animation-name: swing;\n  animation-name: swing;\n}\n\n@-webkit-keyframes tada {\n  0% {\n    -webkit-transform: scale3d(1, 1, 1);\n    transform: scale3d(1, 1, 1);\n  }\n\n  10%, 20% {\n    -webkit-transform: scale3d(.9, .9, .9) rotate3d(0, 0, 1, -3deg);\n    transform: scale3d(.9, .9, .9) rotate3d(0, 0, 1, -3deg);\n  }\n\n  30%, 50%, 70%, 90% {\n    -webkit-transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg);\n    transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg);\n  }\n\n  40%, 60%, 80% {\n    -webkit-transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, -3deg);\n    transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, -3deg);\n  }\n\n  100% {\n    -webkit-transform: scale3d(1, 1, 1);\n    transform: scale3d(1, 1, 1);\n  }\n}\n\n@keyframes tada {\n  0% {\n    -webkit-transform: scale3d(1, 1, 1);\n    transform: scale3d(1, 1, 1);\n  }\n\n  10%, 20% {\n    -webkit-transform: scale3d(.9, .9, .9) rotate3d(0, 0, 1, -3deg);\n    transform: scale3d(.9, .9, .9) rotate3d(0, 0, 1, -3deg);\n  }\n\n  30%, 50%, 70%, 90% {\n    -webkit-transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg);\n    transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg);\n  }\n\n  40%, 60%, 80% {\n    -webkit-transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, -3deg);\n    transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, -3deg);\n  }\n\n  100% {\n    -webkit-transform: scale3d(1, 1, 1);\n    transform: scale3d(1, 1, 1);\n  }\n}\n\n.tada {\n  -webkit-animation-name: tada;\n  animation-name: tada;\n}\n\n/* originally authored by Nick Pettit - https://github.com/nickpettit/glide */\n\n@-webkit-keyframes wobble {\n  0% {\n    -webkit-transform: none;\n    transform: none;\n  }\n\n  15% {\n    -webkit-transform: translate3d(-25%, 0, 0) rotate3d(0, 0, 1, -5deg);\n    transform: translate3d(-25%, 0, 0) rotate3d(0, 0, 1, -5deg);\n  }\n\n  30% {\n    -webkit-transform: translate3d(20%, 0, 0) rotate3d(0, 0, 1, 3deg);\n    transform: translate3d(20%, 0, 0) rotate3d(0, 0, 1, 3deg);\n  }\n\n  45% {\n    -webkit-transform: translate3d(-15%, 0, 0) rotate3d(0, 0, 1, -3deg);\n    transform: translate3d(-15%, 0, 0) rotate3d(0, 0, 1, -3deg);\n  }\n\n  60% {\n    -webkit-transform: translate3d(10%, 0, 0) rotate3d(0, 0, 1, 2deg);\n    transform: translate3d(10%, 0, 0) rotate3d(0, 0, 1, 2deg);\n  }\n\n  75% {\n    -webkit-transform: translate3d(-5%, 0, 0) rotate3d(0, 0, 1, -1deg);\n    transform: translate3d(-5%, 0, 0) rotate3d(0, 0, 1, -1deg);\n  }\n\n  100% {\n    -webkit-transform: none;\n    transform: none;\n  }\n}\n\n@keyframes wobble {\n  0% {\n    -webkit-transform: none;\n    transform: none;\n  }\n\n  15% {\n    -webkit-transform: translate3d(-25%, 0, 0) rotate3d(0, 0, 1, -5deg);\n    transform: translate3d(-25%, 0, 0) rotate3d(0, 0, 1, -5deg);\n  }\n\n  30% {\n    -webkit-transform: translate3d(20%, 0, 0) rotate3d(0, 0, 1, 3deg);\n    transform: translate3d(20%, 0, 0) rotate3d(0, 0, 1, 3deg);\n  }\n\n  45% {\n    -webkit-transform: translate3d(-15%, 0, 0) rotate3d(0, 0, 1, -3deg);\n    transform: translate3d(-15%, 0, 0) rotate3d(0, 0, 1, -3deg);\n  }\n\n  60% {\n    -webkit-transform: translate3d(10%, 0, 0) rotate3d(0, 0, 1, 2deg);\n    transform: translate3d(10%, 0, 0) rotate3d(0, 0, 1, 2deg);\n  }\n\n  75% {\n    -webkit-transform: translate3d(-5%, 0, 0) rotate3d(0, 0, 1, -1deg);\n    transform: translate3d(-5%, 0, 0) rotate3d(0, 0, 1, -1deg);\n  }\n\n  100% {\n    -webkit-transform: none;\n    transform: none;\n  }\n}\n\n.wobble {\n  -webkit-animation-name: wobble;\n  animation-name: wobble;\n}\n\n@-webkit-keyframes bounceIn {\n  0%, 20%, 40%, 60%, 80%, 100% {\n    transition-timing-function: cubic-bezier(0.215, 0.610, 0.355, 1.000);\n  }\n\n  0% {\n    opacity: 0;\n    -webkit-transform: scale3d(.3, .3, .3);\n    transform: scale3d(.3, .3, .3);\n  }\n\n  20% {\n    -webkit-transform: scale3d(1.1, 1.1, 1.1);\n    transform: scale3d(1.1, 1.1, 1.1);\n  }\n\n  40% {\n    -webkit-transform: scale3d(.9, .9, .9);\n    transform: scale3d(.9, .9, .9);\n  }\n\n  60% {\n    opacity: 1;\n    -webkit-transform: scale3d(1.03, 1.03, 1.03);\n    transform: scale3d(1.03, 1.03, 1.03);\n  }\n\n  80% {\n    -webkit-transform: scale3d(.97, .97, .97);\n    transform: scale3d(.97, .97, .97);\n  }\n\n  100% {\n    opacity: 1;\n    -webkit-transform: scale3d(1, 1, 1);\n    transform: scale3d(1, 1, 1);\n  }\n}\n\n@keyframes bounceIn {\n  0%, 20%, 40%, 60%, 80%, 100% {\n    transition-timing-function: cubic-bezier(0.215, 0.610, 0.355, 1.000);\n  }\n\n  0% {\n    opacity: 0;\n    -webkit-transform: scale3d(.3, .3, .3);\n    transform: scale3d(.3, .3, .3);\n  }\n\n  20% {\n    -webkit-transform: scale3d(1.1, 1.1, 1.1);\n    transform: scale3d(1.1, 1.1, 1.1);\n  }\n\n  40% {\n    -webkit-transform: scale3d(.9, .9, .9);\n    transform: scale3d(.9, .9, .9);\n  }\n\n  60% {\n    opacity: 1;\n    -webkit-transform: scale3d(1.03, 1.03, 1.03);\n    transform: scale3d(1.03, 1.03, 1.03);\n  }\n\n  80% {\n    -webkit-transform: scale3d(.97, .97, .97);\n    transform: scale3d(.97, .97, .97);\n  }\n\n  100% {\n    opacity: 1;\n    -webkit-transform: scale3d(1, 1, 1);\n    transform: scale3d(1, 1, 1);\n  }\n}\n\n.bounceIn {\n  -webkit-animation-name: bounceIn;\n  animation-name: bounceIn;\n  -webkit-animation-duration: .75s;\n  animation-duration: .75s;\n}\n\n@-webkit-keyframes bounceInDown {\n  0%, 60%, 75%, 90%, 100% {\n    transition-timing-function: cubic-bezier(0.215, 0.610, 0.355, 1.000);\n  }\n\n  0% {\n    opacity: 0;\n    -webkit-transform: translate3d(0, -3000px, 0);\n    transform: translate3d(0, -3000px, 0);\n  }\n\n  60% {\n    opacity: 1;\n    -webkit-transform: translate3d(0, 25px, 0);\n    transform: translate3d(0, 25px, 0);\n  }\n\n  75% {\n    -webkit-transform: translate3d(0, -10px, 0);\n    transform: translate3d(0, -10px, 0);\n  }\n\n  90% {\n    -webkit-transform: translate3d(0, 5px, 0);\n    transform: translate3d(0, 5px, 0);\n  }\n\n  100% {\n    -webkit-transform: none;\n    transform: none;\n  }\n}\n\n@keyframes bounceInDown {\n  0%, 60%, 75%, 90%, 100% {\n    transition-timing-function: cubic-bezier(0.215, 0.610, 0.355, 1.000);\n  }\n\n  0% {\n    opacity: 0;\n    -webkit-transform: translate3d(0, -3000px, 0);\n    transform: translate3d(0, -3000px, 0);\n  }\n\n  60% {\n    opacity: 1;\n    -webkit-transform: translate3d(0, 25px, 0);\n    transform: translate3d(0, 25px, 0);\n  }\n\n  75% {\n    -webkit-transform: translate3d(0, -10px, 0);\n    transform: translate3d(0, -10px, 0);\n  }\n\n  90% {\n    -webkit-transform: translate3d(0, 5px, 0);\n    transform: translate3d(0, 5px, 0);\n  }\n\n  100% {\n    -webkit-transform: none;\n    transform: none;\n  }\n}\n\n.bounceInDown {\n  -webkit-animation-name: bounceInDown;\n  animation-name: bounceInDown;\n}\n\n@-webkit-keyframes bounceInLeft {\n  0%, 60%, 75%, 90%, 100% {\n    transition-timing-function: cubic-bezier(0.215, 0.610, 0.355, 1.000);\n  }\n\n  0% {\n    opacity: 0;\n    -webkit-transform: translate3d(-3000px, 0, 0);\n    transform: translate3d(-3000px, 0, 0);\n  }\n\n  60% {\n    opacity: 1;\n    -webkit-transform: translate3d(25px, 0, 0);\n    transform: translate3d(25px, 0, 0);\n  }\n\n  75% {\n    -webkit-transform: translate3d(-10px, 0, 0);\n    transform: translate3d(-10px, 0, 0);\n  }\n\n  90% {\n    -webkit-transform: translate3d(5px, 0, 0);\n    transform: translate3d(5px, 0, 0);\n  }\n\n  100% {\n    -webkit-transform: none;\n    transform: none;\n  }\n}\n\n@keyframes bounceInLeft {\n  0%, 60%, 75%, 90%, 100% {\n    transition-timing-function: cubic-bezier(0.215, 0.610, 0.355, 1.000);\n  }\n\n  0% {\n    opacity: 0;\n    -webkit-transform: translate3d(-3000px, 0, 0);\n    transform: translate3d(-3000px, 0, 0);\n  }\n\n  60% {\n    opacity: 1;\n    -webkit-transform: translate3d(25px, 0, 0);\n    transform: translate3d(25px, 0, 0);\n  }\n\n  75% {\n    -webkit-transform: translate3d(-10px, 0, 0);\n    transform: translate3d(-10px, 0, 0);\n  }\n\n  90% {\n    -webkit-transform: translate3d(5px, 0, 0);\n    transform: translate3d(5px, 0, 0);\n  }\n\n  100% {\n    -webkit-transform: none;\n    transform: none;\n  }\n}\n\n.bounceInLeft {\n  -webkit-animation-name: bounceInLeft;\n  animation-name: bounceInLeft;\n}\n\n@-webkit-keyframes bounceInRight {\n  0%, 60%, 75%, 90%, 100% {\n    transition-timing-function: cubic-bezier(0.215, 0.610, 0.355, 1.000);\n  }\n\n  0% {\n    opacity: 0;\n    -webkit-transform: translate3d(3000px, 0, 0);\n    transform: translate3d(3000px, 0, 0);\n  }\n\n  60% {\n    opacity: 1;\n    -webkit-transform: translate3d(-25px, 0, 0);\n    transform: translate3d(-25px, 0, 0);\n  }\n\n  75% {\n    -webkit-transform: translate3d(10px, 0, 0);\n    transform: translate3d(10px, 0, 0);\n  }\n\n  90% {\n    -webkit-transform: translate3d(-5px, 0, 0);\n    transform: translate3d(-5px, 0, 0);\n  }\n\n  100% {\n    -webkit-transform: none;\n    transform: none;\n  }\n}\n\n@keyframes bounceInRight {\n  0%, 60%, 75%, 90%, 100% {\n    transition-timing-function: cubic-bezier(0.215, 0.610, 0.355, 1.000);\n  }\n\n  0% {\n    opacity: 0;\n    -webkit-transform: translate3d(3000px, 0, 0);\n    transform: translate3d(3000px, 0, 0);\n  }\n\n  60% {\n    opacity: 1;\n    -webkit-transform: translate3d(-25px, 0, 0);\n    transform: translate3d(-25px, 0, 0);\n  }\n\n  75% {\n    -webkit-transform: translate3d(10px, 0, 0);\n    transform: translate3d(10px, 0, 0);\n  }\n\n  90% {\n    -webkit-transform: translate3d(-5px, 0, 0);\n    transform: translate3d(-5px, 0, 0);\n  }\n\n  100% {\n    -webkit-transform: none;\n    transform: none;\n  }\n}\n\n.bounceInRight {\n  -webkit-animation-name: bounceInRight;\n  animation-name: bounceInRight;\n}\n\n@-webkit-keyframes bounceInUp {\n  0%, 60%, 75%, 90%, 100% {\n    transition-timing-function: cubic-bezier(0.215, 0.610, 0.355, 1.000);\n  }\n\n  0% {\n    opacity: 0;\n    -webkit-transform: translate3d(0, 3000px, 0);\n    transform: translate3d(0, 3000px, 0);\n  }\n\n  60% {\n    opacity: 1;\n    -webkit-transform: translate3d(0, -20px, 0);\n    transform: translate3d(0, -20px, 0);\n  }\n\n  75% {\n    -webkit-transform: translate3d(0, 10px, 0);\n    transform: translate3d(0, 10px, 0);\n  }\n\n  90% {\n    -webkit-transform: translate3d(0, -5px, 0);\n    transform: translate3d(0, -5px, 0);\n  }\n\n  100% {\n    -webkit-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n  }\n}\n\n@keyframes bounceInUp {\n  0%, 60%, 75%, 90%, 100% {\n    transition-timing-function: cubic-bezier(0.215, 0.610, 0.355, 1.000);\n  }\n\n  0% {\n    opacity: 0;\n    -webkit-transform: translate3d(0, 3000px, 0);\n    transform: translate3d(0, 3000px, 0);\n  }\n\n  60% {\n    opacity: 1;\n    -webkit-transform: translate3d(0, -20px, 0);\n    transform: translate3d(0, -20px, 0);\n  }\n\n  75% {\n    -webkit-transform: translate3d(0, 10px, 0);\n    transform: translate3d(0, 10px, 0);\n  }\n\n  90% {\n    -webkit-transform: translate3d(0, -5px, 0);\n    transform: translate3d(0, -5px, 0);\n  }\n\n  100% {\n    -webkit-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n  }\n}\n\n.bounceInUp {\n  -webkit-animation-name: bounceInUp;\n  animation-name: bounceInUp;\n}\n\n@-webkit-keyframes bounceOut {\n  20% {\n    -webkit-transform: scale3d(.9, .9, .9);\n    transform: scale3d(.9, .9, .9);\n  }\n\n  50%, 55% {\n    opacity: 1;\n    -webkit-transform: scale3d(1.1, 1.1, 1.1);\n    transform: scale3d(1.1, 1.1, 1.1);\n  }\n\n  100% {\n    opacity: 0;\n    -webkit-transform: scale3d(.3, .3, .3);\n    transform: scale3d(.3, .3, .3);\n  }\n}\n\n@keyframes bounceOut {\n  20% {\n    -webkit-transform: scale3d(.9, .9, .9);\n    transform: scale3d(.9, .9, .9);\n  }\n\n  50%, 55% {\n    opacity: 1;\n    -webkit-transform: scale3d(1.1, 1.1, 1.1);\n    transform: scale3d(1.1, 1.1, 1.1);\n  }\n\n  100% {\n    opacity: 0;\n    -webkit-transform: scale3d(.3, .3, .3);\n    transform: scale3d(.3, .3, .3);\n  }\n}\n\n.bounceOut {\n  -webkit-animation-name: bounceOut;\n  animation-name: bounceOut;\n  -webkit-animation-duration: .75s;\n  animation-duration: .75s;\n}\n\n@-webkit-keyframes bounceOutDown {\n  20% {\n    -webkit-transform: translate3d(0, 10px, 0);\n    transform: translate3d(0, 10px, 0);\n  }\n\n  40%, 45% {\n    opacity: 1;\n    -webkit-transform: translate3d(0, -20px, 0);\n    transform: translate3d(0, -20px, 0);\n  }\n\n  100% {\n    opacity: 0;\n    -webkit-transform: translate3d(0, 2000px, 0);\n    transform: translate3d(0, 2000px, 0);\n  }\n}\n\n@keyframes bounceOutDown {\n  20% {\n    -webkit-transform: translate3d(0, 10px, 0);\n    transform: translate3d(0, 10px, 0);\n  }\n\n  40%, 45% {\n    opacity: 1;\n    -webkit-transform: translate3d(0, -20px, 0);\n    transform: translate3d(0, -20px, 0);\n  }\n\n  100% {\n    opacity: 0;\n    -webkit-transform: translate3d(0, 2000px, 0);\n    transform: translate3d(0, 2000px, 0);\n  }\n}\n\n.bounceOutDown {\n  -webkit-animation-name: bounceOutDown;\n  animation-name: bounceOutDown;\n}\n\n@-webkit-keyframes bounceOutLeft {\n  20% {\n    opacity: 1;\n    -webkit-transform: translate3d(20px, 0, 0);\n    transform: translate3d(20px, 0, 0);\n  }\n\n  100% {\n    opacity: 0;\n    -webkit-transform: translate3d(-2000px, 0, 0);\n    transform: translate3d(-2000px, 0, 0);\n  }\n}\n\n@keyframes bounceOutLeft {\n  20% {\n    opacity: 1;\n    -webkit-transform: translate3d(20px, 0, 0);\n    transform: translate3d(20px, 0, 0);\n  }\n\n  100% {\n    opacity: 0;\n    -webkit-transform: translate3d(-2000px, 0, 0);\n    transform: translate3d(-2000px, 0, 0);\n  }\n}\n\n.bounceOutLeft {\n  -webkit-animation-name: bounceOutLeft;\n  animation-name: bounceOutLeft;\n}\n\n@-webkit-keyframes bounceOutRight {\n  20% {\n    opacity: 1;\n    -webkit-transform: translate3d(-20px, 0, 0);\n    transform: translate3d(-20px, 0, 0);\n  }\n\n  100% {\n    opacity: 0;\n    -webkit-transform: translate3d(2000px, 0, 0);\n    transform: translate3d(2000px, 0, 0);\n  }\n}\n\n@keyframes bounceOutRight {\n  20% {\n    opacity: 1;\n    -webkit-transform: translate3d(-20px, 0, 0);\n    transform: translate3d(-20px, 0, 0);\n  }\n\n  100% {\n    opacity: 0;\n    -webkit-transform: translate3d(2000px, 0, 0);\n    transform: translate3d(2000px, 0, 0);\n  }\n}\n\n.bounceOutRight {\n  -webkit-animation-name: bounceOutRight;\n  animation-name: bounceOutRight;\n}\n\n@-webkit-keyframes bounceOutUp {\n  20% {\n    -webkit-transform: translate3d(0, -10px, 0);\n    transform: translate3d(0, -10px, 0);\n  }\n\n  40%, 45% {\n    opacity: 1;\n    -webkit-transform: translate3d(0, 20px, 0);\n    transform: translate3d(0, 20px, 0);\n  }\n\n  100% {\n    opacity: 0;\n    -webkit-transform: translate3d(0, -2000px, 0);\n    transform: translate3d(0, -2000px, 0);\n  }\n}\n\n@keyframes bounceOutUp {\n  20% {\n    -webkit-transform: translate3d(0, -10px, 0);\n    transform: translate3d(0, -10px, 0);\n  }\n\n  40%, 45% {\n    opacity: 1;\n    -webkit-transform: translate3d(0, 20px, 0);\n    transform: translate3d(0, 20px, 0);\n  }\n\n  100% {\n    opacity: 0;\n    -webkit-transform: translate3d(0, -2000px, 0);\n    transform: translate3d(0, -2000px, 0);\n  }\n}\n\n.bounceOutUp {\n  -webkit-animation-name: bounceOutUp;\n  animation-name: bounceOutUp;\n}\n\n@-webkit-keyframes fadeIn {\n  0% {\n    opacity: 0;\n  }\n\n  100% {\n    opacity: 1;\n  }\n}\n\n@keyframes fadeIn {\n  0% {\n    opacity: 0;\n  }\n\n  100% {\n    opacity: 1;\n  }\n}\n\n.fadeIn {\n  -webkit-animation-name: fadeIn;\n  animation-name: fadeIn;\n}\n\n@-webkit-keyframes fadeInDown {\n  0% {\n    opacity: 0;\n    -webkit-transform: translate3d(0, -100%, 0);\n    transform: translate3d(0, -100%, 0);\n  }\n\n  100% {\n    opacity: 1;\n    -webkit-transform: none;\n    transform: none;\n  }\n}\n\n@keyframes fadeInDown {\n  0% {\n    opacity: 0;\n    -webkit-transform: translate3d(0, -100%, 0);\n    transform: translate3d(0, -100%, 0);\n  }\n\n  100% {\n    opacity: 1;\n    -webkit-transform: none;\n    transform: none;\n  }\n}\n\n.fadeInDown {\n  -webkit-animation-name: fadeInDown;\n  animation-name: fadeInDown;\n}\n\n@-webkit-keyframes fadeInDownBig {\n  0% {\n    opacity: 0;\n    -webkit-transform: translate3d(0, -2000px, 0);\n    transform: translate3d(0, -2000px, 0);\n  }\n\n  100% {\n    opacity: 1;\n    -webkit-transform: none;\n    transform: none;\n  }\n}\n\n@keyframes fadeInDownBig {\n  0% {\n    opacity: 0;\n    -webkit-transform: translate3d(0, -2000px, 0);\n    transform: translate3d(0, -2000px, 0);\n  }\n\n  100% {\n    opacity: 1;\n    -webkit-transform: none;\n    transform: none;\n  }\n}\n\n.fadeInDownBig {\n  -webkit-animation-name: fadeInDownBig;\n  animation-name: fadeInDownBig;\n}\n\n@-webkit-keyframes fadeInLeft {\n  0% {\n    opacity: 0;\n    -webkit-transform: translate3d(-100%, 0, 0);\n    transform: translate3d(-100%, 0, 0);\n  }\n\n  100% {\n    opacity: 1;\n    -webkit-transform: none;\n    transform: none;\n  }\n}\n\n@keyframes fadeInLeft {\n  0% {\n    opacity: 0;\n    -webkit-transform: translate3d(-100%, 0, 0);\n    transform: translate3d(-100%, 0, 0);\n  }\n\n  100% {\n    opacity: 1;\n    -webkit-transform: none;\n    transform: none;\n  }\n}\n\n.fadeInLeft {\n  -webkit-animation-name: fadeInLeft;\n  animation-name: fadeInLeft;\n}\n\n@-webkit-keyframes fadeInLeftBig {\n  0% {\n    opacity: 0;\n    -webkit-transform: translate3d(-2000px, 0, 0);\n    transform: translate3d(-2000px, 0, 0);\n  }\n\n  100% {\n    opacity: 1;\n    -webkit-transform: none;\n    transform: none;\n  }\n}\n\n@keyframes fadeInLeftBig {\n  0% {\n    opacity: 0;\n    -webkit-transform: translate3d(-2000px, 0, 0);\n    transform: translate3d(-2000px, 0, 0);\n  }\n\n  100% {\n    opacity: 1;\n    -webkit-transform: none;\n    transform: none;\n  }\n}\n\n.fadeInLeftBig {\n  -webkit-animation-name: fadeInLeftBig;\n  animation-name: fadeInLeftBig;\n}\n\n@-webkit-keyframes fadeInRight {\n  0% {\n    opacity: 0;\n    -webkit-transform: translate3d(100%, 0, 0);\n    transform: translate3d(100%, 0, 0);\n  }\n\n  100% {\n    opacity: 1;\n    -webkit-transform: none;\n    transform: none;\n  }\n}\n\n@keyframes fadeInRight {\n  0% {\n    opacity: 0;\n    -webkit-transform: translate3d(100%, 0, 0);\n    transform: translate3d(100%, 0, 0);\n  }\n\n  100% {\n    opacity: 1;\n    -webkit-transform: none;\n    transform: none;\n  }\n}\n\n.fadeInRight {\n  -webkit-animation-name: fadeInRight;\n  animation-name: fadeInRight;\n}\n\n@-webkit-keyframes fadeInRightBig {\n  0% {\n    opacity: 0;\n    -webkit-transform: translate3d(2000px, 0, 0);\n    transform: translate3d(2000px, 0, 0);\n  }\n\n  100% {\n    opacity: 1;\n    -webkit-transform: none;\n    transform: none;\n  }\n}\n\n@keyframes fadeInRightBig {\n  0% {\n    opacity: 0;\n    -webkit-transform: translate3d(2000px, 0, 0);\n    transform: translate3d(2000px, 0, 0);\n  }\n\n  100% {\n    opacity: 1;\n    -webkit-transform: none;\n    transform: none;\n  }\n}\n\n.fadeInRightBig {\n  -webkit-animation-name: fadeInRightBig;\n  animation-name: fadeInRightBig;\n}\n\n@-webkit-keyframes fadeInUp {\n  0% {\n    opacity: 0;\n    -webkit-transform: translate3d(0, 100%, 0);\n    transform: translate3d(0, 100%, 0);\n  }\n\n  100% {\n    opacity: 1;\n    -webkit-transform: none;\n    transform: none;\n  }\n}\n\n@keyframes fadeInUp {\n  0% {\n    opacity: 0;\n    -webkit-transform: translate3d(0, 100%, 0);\n    transform: translate3d(0, 100%, 0);\n  }\n\n  100% {\n    opacity: 1;\n    -webkit-transform: none;\n    transform: none;\n  }\n}\n\n.fadeInUp {\n  -webkit-animation-name: fadeInUp;\n  animation-name: fadeInUp;\n}\n\n@-webkit-keyframes fadeInUpBig {\n  0% {\n    opacity: 0;\n    -webkit-transform: translate3d(0, 2000px, 0);\n    transform: translate3d(0, 2000px, 0);\n  }\n\n  100% {\n    opacity: 1;\n    -webkit-transform: none;\n    transform: none;\n  }\n}\n\n@keyframes fadeInUpBig {\n  0% {\n    opacity: 0;\n    -webkit-transform: translate3d(0, 2000px, 0);\n    transform: translate3d(0, 2000px, 0);\n  }\n\n  100% {\n    opacity: 1;\n    -webkit-transform: none;\n    transform: none;\n  }\n}\n\n.fadeInUpBig {\n  -webkit-animation-name: fadeInUpBig;\n  animation-name: fadeInUpBig;\n}\n\n@-webkit-keyframes fadeOut {\n  0% {\n    opacity: 1;\n  }\n\n  100% {\n    opacity: 0;\n  }\n}\n\n@keyframes fadeOut {\n  0% {\n    opacity: 1;\n  }\n\n  100% {\n    opacity: 0;\n  }\n}\n\n.fadeOut {\n  -webkit-animation-name: fadeOut;\n  animation-name: fadeOut;\n}\n\n@-webkit-keyframes fadeOutDown {\n  0% {\n    opacity: 1;\n  }\n\n  100% {\n    opacity: 0;\n    -webkit-transform: translate3d(0, 100%, 0);\n    transform: translate3d(0, 100%, 0);\n  }\n}\n\n@keyframes fadeOutDown {\n  0% {\n    opacity: 1;\n  }\n\n  100% {\n    opacity: 0;\n    -webkit-transform: translate3d(0, 100%, 0);\n    transform: translate3d(0, 100%, 0);\n  }\n}\n\n.fadeOutDown {\n  -webkit-animation-name: fadeOutDown;\n  animation-name: fadeOutDown;\n}\n\n@-webkit-keyframes fadeOutDownBig {\n  0% {\n    opacity: 1;\n  }\n\n  100% {\n    opacity: 0;\n    -webkit-transform: translate3d(0, 2000px, 0);\n    transform: translate3d(0, 2000px, 0);\n  }\n}\n\n@keyframes fadeOutDownBig {\n  0% {\n    opacity: 1;\n  }\n\n  100% {\n    opacity: 0;\n    -webkit-transform: translate3d(0, 2000px, 0);\n    transform: translate3d(0, 2000px, 0);\n  }\n}\n\n.fadeOutDownBig {\n  -webkit-animation-name: fadeOutDownBig;\n  animation-name: fadeOutDownBig;\n}\n\n@-webkit-keyframes fadeOutLeft {\n  0% {\n    opacity: 1;\n  }\n\n  100% {\n    opacity: 0;\n    -webkit-transform: translate3d(-100%, 0, 0);\n    transform: translate3d(-100%, 0, 0);\n  }\n}\n\n@keyframes fadeOutLeft {\n  0% {\n    opacity: 1;\n  }\n\n  100% {\n    opacity: 0;\n    -webkit-transform: translate3d(-100%, 0, 0);\n    transform: translate3d(-100%, 0, 0);\n  }\n}\n\n.fadeOutLeft {\n  -webkit-animation-name: fadeOutLeft;\n  animation-name: fadeOutLeft;\n}\n\n@-webkit-keyframes fadeOutLeftBig {\n  0% {\n    opacity: 1;\n  }\n\n  100% {\n    opacity: 0;\n    -webkit-transform: translate3d(-2000px, 0, 0);\n    transform: translate3d(-2000px, 0, 0);\n  }\n}\n\n@keyframes fadeOutLeftBig {\n  0% {\n    opacity: 1;\n  }\n\n  100% {\n    opacity: 0;\n    -webkit-transform: translate3d(-2000px, 0, 0);\n    transform: translate3d(-2000px, 0, 0);\n  }\n}\n\n.fadeOutLeftBig {\n  -webkit-animation-name: fadeOutLeftBig;\n  animation-name: fadeOutLeftBig;\n}\n\n@-webkit-keyframes fadeOutRight {\n  0% {\n    opacity: 1;\n  }\n\n  100% {\n    opacity: 0;\n    -webkit-transform: translate3d(100%, 0, 0);\n    transform: translate3d(100%, 0, 0);\n  }\n}\n\n@keyframes fadeOutRight {\n  0% {\n    opacity: 1;\n  }\n\n  100% {\n    opacity: 0;\n    -webkit-transform: translate3d(100%, 0, 0);\n    transform: translate3d(100%, 0, 0);\n  }\n}\n\n.fadeOutRight {\n  -webkit-animation-name: fadeOutRight;\n  animation-name: fadeOutRight;\n}\n\n@-webkit-keyframes fadeOutRightBig {\n  0% {\n    opacity: 1;\n  }\n\n  100% {\n    opacity: 0;\n    -webkit-transform: translate3d(2000px, 0, 0);\n    transform: translate3d(2000px, 0, 0);\n  }\n}\n\n@keyframes fadeOutRightBig {\n  0% {\n    opacity: 1;\n  }\n\n  100% {\n    opacity: 0;\n    -webkit-transform: translate3d(2000px, 0, 0);\n    transform: translate3d(2000px, 0, 0);\n  }\n}\n\n.fadeOutRightBig {\n  -webkit-animation-name: fadeOutRightBig;\n  animation-name: fadeOutRightBig;\n}\n\n@-webkit-keyframes fadeOutUp {\n  0% {\n    opacity: 1;\n  }\n\n  100% {\n    opacity: 0;\n    -webkit-transform: translate3d(0, -100%, 0);\n    transform: translate3d(0, -100%, 0);\n  }\n}\n\n@keyframes fadeOutUp {\n  0% {\n    opacity: 1;\n  }\n\n  100% {\n    opacity: 0;\n    -webkit-transform: translate3d(0, -100%, 0);\n    transform: translate3d(0, -100%, 0);\n  }\n}\n\n.fadeOutUp {\n  -webkit-animation-name: fadeOutUp;\n  animation-name: fadeOutUp;\n}\n\n@-webkit-keyframes fadeOutUpBig {\n  0% {\n    opacity: 1;\n  }\n\n  100% {\n    opacity: 0;\n    -webkit-transform: translate3d(0, -2000px, 0);\n    transform: translate3d(0, -2000px, 0);\n  }\n}\n\n@keyframes fadeOutUpBig {\n  0% {\n    opacity: 1;\n  }\n\n  100% {\n    opacity: 0;\n    -webkit-transform: translate3d(0, -2000px, 0);\n    transform: translate3d(0, -2000px, 0);\n  }\n}\n\n.fadeOutUpBig {\n  -webkit-animation-name: fadeOutUpBig;\n  animation-name: fadeOutUpBig;\n}\n\n@-webkit-keyframes flip {\n  0% {\n    -webkit-transform: perspective(400px) rotate3d(0, 1, 0, -360deg);\n    transform: perspective(400px) rotate3d(0, 1, 0, -360deg);\n    -webkit-animation-timing-function: ease-out;\n    animation-timing-function: ease-out;\n  }\n\n  40% {\n    -webkit-transform: perspective(400px) translate3d(0, 0, 150px) rotate3d(0, 1, 0, -190deg);\n    transform: perspective(400px) translate3d(0, 0, 150px) rotate3d(0, 1, 0, -190deg);\n    -webkit-animation-timing-function: ease-out;\n    animation-timing-function: ease-out;\n  }\n\n  50% {\n    -webkit-transform: perspective(400px) translate3d(0, 0, 150px) rotate3d(0, 1, 0, -170deg);\n    transform: perspective(400px) translate3d(0, 0, 150px) rotate3d(0, 1, 0, -170deg);\n    -webkit-animation-timing-function: ease-in;\n    animation-timing-function: ease-in;\n  }\n\n  80% {\n    -webkit-transform: perspective(400px) scale3d(.95, .95, .95);\n    transform: perspective(400px) scale3d(.95, .95, .95);\n    -webkit-animation-timing-function: ease-in;\n    animation-timing-function: ease-in;\n  }\n\n  100% {\n    -webkit-transform: perspective(400px);\n    transform: perspective(400px);\n    -webkit-animation-timing-function: ease-in;\n    animation-timing-function: ease-in;\n  }\n}\n\n@keyframes flip {\n  0% {\n    -webkit-transform: perspective(400px) rotate3d(0, 1, 0, -360deg);\n    transform: perspective(400px) rotate3d(0, 1, 0, -360deg);\n    -webkit-animation-timing-function: ease-out;\n    animation-timing-function: ease-out;\n  }\n\n  40% {\n    -webkit-transform: perspective(400px) translate3d(0, 0, 150px) rotate3d(0, 1, 0, -190deg);\n    transform: perspective(400px) translate3d(0, 0, 150px) rotate3d(0, 1, 0, -190deg);\n    -webkit-animation-timing-function: ease-out;\n    animation-timing-function: ease-out;\n  }\n\n  50% {\n    -webkit-transform: perspective(400px) translate3d(0, 0, 150px) rotate3d(0, 1, 0, -170deg);\n    transform: perspective(400px) translate3d(0, 0, 150px) rotate3d(0, 1, 0, -170deg);\n    -webkit-animation-timing-function: ease-in;\n    animation-timing-function: ease-in;\n  }\n\n  80% {\n    -webkit-transform: perspective(400px) scale3d(.95, .95, .95);\n    transform: perspective(400px) scale3d(.95, .95, .95);\n    -webkit-animation-timing-function: ease-in;\n    animation-timing-function: ease-in;\n  }\n\n  100% {\n    -webkit-transform: perspective(400px);\n    transform: perspective(400px);\n    -webkit-animation-timing-function: ease-in;\n    animation-timing-function: ease-in;\n  }\n}\n\n.animated.flip {\n  -webkit-backface-visibility: visible;\n  backface-visibility: visible;\n  -webkit-animation-name: flip;\n  animation-name: flip;\n}\n\n@-webkit-keyframes flipInX {\n  0% {\n    -webkit-transform: perspective(400px) rotate3d(1, 0, 0, 90deg);\n    transform: perspective(400px) rotate3d(1, 0, 0, 90deg);\n    transition-timing-function: ease-in;\n    opacity: 0;\n  }\n\n  40% {\n    -webkit-transform: perspective(400px) rotate3d(1, 0, 0, -20deg);\n    transform: perspective(400px) rotate3d(1, 0, 0, -20deg);\n    transition-timing-function: ease-in;\n  }\n\n  60% {\n    -webkit-transform: perspective(400px) rotate3d(1, 0, 0, 10deg);\n    transform: perspective(400px) rotate3d(1, 0, 0, 10deg);\n    opacity: 1;\n  }\n\n  80% {\n    -webkit-transform: perspective(400px) rotate3d(1, 0, 0, -5deg);\n    transform: perspective(400px) rotate3d(1, 0, 0, -5deg);\n  }\n\n  100% {\n    -webkit-transform: perspective(400px);\n    transform: perspective(400px);\n  }\n}\n\n@keyframes flipInX {\n  0% {\n    -webkit-transform: perspective(400px) rotate3d(1, 0, 0, 90deg);\n    transform: perspective(400px) rotate3d(1, 0, 0, 90deg);\n    transition-timing-function: ease-in;\n    opacity: 0;\n  }\n\n  40% {\n    -webkit-transform: perspective(400px) rotate3d(1, 0, 0, -20deg);\n    transform: perspective(400px) rotate3d(1, 0, 0, -20deg);\n    transition-timing-function: ease-in;\n  }\n\n  60% {\n    -webkit-transform: perspective(400px) rotate3d(1, 0, 0, 10deg);\n    transform: perspective(400px) rotate3d(1, 0, 0, 10deg);\n    opacity: 1;\n  }\n\n  80% {\n    -webkit-transform: perspective(400px) rotate3d(1, 0, 0, -5deg);\n    transform: perspective(400px) rotate3d(1, 0, 0, -5deg);\n  }\n\n  100% {\n    -webkit-transform: perspective(400px);\n    transform: perspective(400px);\n  }\n}\n\n.flipInX {\n  -webkit-backface-visibility: visible !important;\n  backface-visibility: visible !important;\n  -webkit-animation-name: flipInX;\n  animation-name: flipInX;\n}\n\n@-webkit-keyframes flipInY {\n  0% {\n    -webkit-transform: perspective(400px) rotate3d(0, 1, 0, 90deg);\n    transform: perspective(400px) rotate3d(0, 1, 0, 90deg);\n    transition-timing-function: ease-in;\n    opacity: 0;\n  }\n\n  40% {\n    -webkit-transform: perspective(400px) rotate3d(0, 1, 0, -20deg);\n    transform: perspective(400px) rotate3d(0, 1, 0, -20deg);\n    transition-timing-function: ease-in;\n  }\n\n  60% {\n    -webkit-transform: perspective(400px) rotate3d(0, 1, 0, 10deg);\n    transform: perspective(400px) rotate3d(0, 1, 0, 10deg);\n    opacity: 1;\n  }\n\n  80% {\n    -webkit-transform: perspective(400px) rotate3d(0, 1, 0, -5deg);\n    transform: perspective(400px) rotate3d(0, 1, 0, -5deg);\n  }\n\n  100% {\n    -webkit-transform: perspective(400px);\n    transform: perspective(400px);\n  }\n}\n\n@keyframes flipInY {\n  0% {\n    -webkit-transform: perspective(400px) rotate3d(0, 1, 0, 90deg);\n    transform: perspective(400px) rotate3d(0, 1, 0, 90deg);\n    transition-timing-function: ease-in;\n    opacity: 0;\n  }\n\n  40% {\n    -webkit-transform: perspective(400px) rotate3d(0, 1, 0, -20deg);\n    transform: perspective(400px) rotate3d(0, 1, 0, -20deg);\n    transition-timing-function: ease-in;\n  }\n\n  60% {\n    -webkit-transform: perspective(400px) rotate3d(0, 1, 0, 10deg);\n    transform: perspective(400px) rotate3d(0, 1, 0, 10deg);\n    opacity: 1;\n  }\n\n  80% {\n    -webkit-transform: perspective(400px) rotate3d(0, 1, 0, -5deg);\n    transform: perspective(400px) rotate3d(0, 1, 0, -5deg);\n  }\n\n  100% {\n    -webkit-transform: perspective(400px);\n    transform: perspective(400px);\n  }\n}\n\n.flipInY {\n  -webkit-backface-visibility: visible !important;\n  backface-visibility: visible !important;\n  -webkit-animation-name: flipInY;\n  animation-name: flipInY;\n}\n\n@-webkit-keyframes flipOutX {\n  0% {\n    -webkit-transform: perspective(400px);\n    transform: perspective(400px);\n  }\n\n  30% {\n    -webkit-transform: perspective(400px) rotate3d(1, 0, 0, -20deg);\n    transform: perspective(400px) rotate3d(1, 0, 0, -20deg);\n    opacity: 1;\n  }\n\n  100% {\n    -webkit-transform: perspective(400px) rotate3d(1, 0, 0, 90deg);\n    transform: perspective(400px) rotate3d(1, 0, 0, 90deg);\n    opacity: 0;\n  }\n}\n\n@keyframes flipOutX {\n  0% {\n    -webkit-transform: perspective(400px);\n    transform: perspective(400px);\n  }\n\n  30% {\n    -webkit-transform: perspective(400px) rotate3d(1, 0, 0, -20deg);\n    transform: perspective(400px) rotate3d(1, 0, 0, -20deg);\n    opacity: 1;\n  }\n\n  100% {\n    -webkit-transform: perspective(400px) rotate3d(1, 0, 0, 90deg);\n    transform: perspective(400px) rotate3d(1, 0, 0, 90deg);\n    opacity: 0;\n  }\n}\n\n.flipOutX {\n  -webkit-animation-name: flipOutX;\n  animation-name: flipOutX;\n  -webkit-animation-duration: .75s;\n  animation-duration: .75s;\n  -webkit-backface-visibility: visible !important;\n  backface-visibility: visible !important;\n}\n\n@-webkit-keyframes flipOutY {\n  0% {\n    -webkit-transform: perspective(400px);\n    transform: perspective(400px);\n  }\n\n  30% {\n    -webkit-transform: perspective(400px) rotate3d(0, 1, 0, -15deg);\n    transform: perspective(400px) rotate3d(0, 1, 0, -15deg);\n    opacity: 1;\n  }\n\n  100% {\n    -webkit-transform: perspective(400px) rotate3d(0, 1, 0, 90deg);\n    transform: perspective(400px) rotate3d(0, 1, 0, 90deg);\n    opacity: 0;\n  }\n}\n\n@keyframes flipOutY {\n  0% {\n    -webkit-transform: perspective(400px);\n    transform: perspective(400px);\n  }\n\n  30% {\n    -webkit-transform: perspective(400px) rotate3d(0, 1, 0, -15deg);\n    transform: perspective(400px) rotate3d(0, 1, 0, -15deg);\n    opacity: 1;\n  }\n\n  100% {\n    -webkit-transform: perspective(400px) rotate3d(0, 1, 0, 90deg);\n    transform: perspective(400px) rotate3d(0, 1, 0, 90deg);\n    opacity: 0;\n  }\n}\n\n.flipOutY {\n  -webkit-backface-visibility: visible !important;\n  backface-visibility: visible !important;\n  -webkit-animation-name: flipOutY;\n  animation-name: flipOutY;\n  -webkit-animation-duration: .75s;\n  animation-duration: .75s;\n}\n\n@-webkit-keyframes lightSpeedIn {\n  0% {\n    -webkit-transform: translate3d(100%, 0, 0) skewX(-30deg);\n    transform: translate3d(100%, 0, 0) skewX(-30deg);\n    opacity: 0;\n  }\n\n  60% {\n    -webkit-transform: skewX(20deg);\n    transform: skewX(20deg);\n    opacity: 1;\n  }\n\n  80% {\n    -webkit-transform: skewX(-5deg);\n    transform: skewX(-5deg);\n    opacity: 1;\n  }\n\n  100% {\n    -webkit-transform: none;\n    transform: none;\n    opacity: 1;\n  }\n}\n\n@keyframes lightSpeedIn {\n  0% {\n    -webkit-transform: translate3d(100%, 0, 0) skewX(-30deg);\n    transform: translate3d(100%, 0, 0) skewX(-30deg);\n    opacity: 0;\n  }\n\n  60% {\n    -webkit-transform: skewX(20deg);\n    transform: skewX(20deg);\n    opacity: 1;\n  }\n\n  80% {\n    -webkit-transform: skewX(-5deg);\n    transform: skewX(-5deg);\n    opacity: 1;\n  }\n\n  100% {\n    -webkit-transform: none;\n    transform: none;\n    opacity: 1;\n  }\n}\n\n.lightSpeedIn {\n  -webkit-animation-name: lightSpeedIn;\n  animation-name: lightSpeedIn;\n  -webkit-animation-timing-function: ease-out;\n  animation-timing-function: ease-out;\n}\n\n@-webkit-keyframes lightSpeedOut {\n  0% {\n    opacity: 1;\n  }\n\n  100% {\n    -webkit-transform: translate3d(100%, 0, 0) skewX(30deg);\n    transform: translate3d(100%, 0, 0) skewX(30deg);\n    opacity: 0;\n  }\n}\n\n@keyframes lightSpeedOut {\n  0% {\n    opacity: 1;\n  }\n\n  100% {\n    -webkit-transform: translate3d(100%, 0, 0) skewX(30deg);\n    transform: translate3d(100%, 0, 0) skewX(30deg);\n    opacity: 0;\n  }\n}\n\n.lightSpeedOut {\n  -webkit-animation-name: lightSpeedOut;\n  animation-name: lightSpeedOut;\n  -webkit-animation-timing-function: ease-in;\n  animation-timing-function: ease-in;\n}\n\n@-webkit-keyframes rotateIn {\n  0% {\n    -webkit-transform-origin: center;\n    transform-origin: center;\n    -webkit-transform: rotate3d(0, 0, 1, -200deg);\n    transform: rotate3d(0, 0, 1, -200deg);\n    opacity: 0;\n  }\n\n  100% {\n    -webkit-transform-origin: center;\n    transform-origin: center;\n    -webkit-transform: none;\n    transform: none;\n    opacity: 1;\n  }\n}\n\n@keyframes rotateIn {\n  0% {\n    -webkit-transform-origin: center;\n    transform-origin: center;\n    -webkit-transform: rotate3d(0, 0, 1, -200deg);\n    transform: rotate3d(0, 0, 1, -200deg);\n    opacity: 0;\n  }\n\n  100% {\n    -webkit-transform-origin: center;\n    transform-origin: center;\n    -webkit-transform: none;\n    transform: none;\n    opacity: 1;\n  }\n}\n\n.rotateIn {\n  -webkit-animation-name: rotateIn;\n  animation-name: rotateIn;\n}\n\n@-webkit-keyframes rotateInDownLeft {\n  0% {\n    -webkit-transform-origin: left bottom;\n    transform-origin: left bottom;\n    -webkit-transform: rotate3d(0, 0, 1, -45deg);\n    transform: rotate3d(0, 0, 1, -45deg);\n    opacity: 0;\n  }\n\n  100% {\n    -webkit-transform-origin: left bottom;\n    transform-origin: left bottom;\n    -webkit-transform: none;\n    transform: none;\n    opacity: 1;\n  }\n}\n\n@keyframes rotateInDownLeft {\n  0% {\n    -webkit-transform-origin: left bottom;\n    transform-origin: left bottom;\n    -webkit-transform: rotate3d(0, 0, 1, -45deg);\n    transform: rotate3d(0, 0, 1, -45deg);\n    opacity: 0;\n  }\n\n  100% {\n    -webkit-transform-origin: left bottom;\n    transform-origin: left bottom;\n    -webkit-transform: none;\n    transform: none;\n    opacity: 1;\n  }\n}\n\n.rotateInDownLeft {\n  -webkit-animation-name: rotateInDownLeft;\n  animation-name: rotateInDownLeft;\n}\n\n@-webkit-keyframes rotateInDownRight {\n  0% {\n    -webkit-transform-origin: right bottom;\n    transform-origin: right bottom;\n    -webkit-transform: rotate3d(0, 0, 1, 45deg);\n    transform: rotate3d(0, 0, 1, 45deg);\n    opacity: 0;\n  }\n\n  100% {\n    -webkit-transform-origin: right bottom;\n    transform-origin: right bottom;\n    -webkit-transform: none;\n    transform: none;\n    opacity: 1;\n  }\n}\n\n@keyframes rotateInDownRight {\n  0% {\n    -webkit-transform-origin: right bottom;\n    transform-origin: right bottom;\n    -webkit-transform: rotate3d(0, 0, 1, 45deg);\n    transform: rotate3d(0, 0, 1, 45deg);\n    opacity: 0;\n  }\n\n  100% {\n    -webkit-transform-origin: right bottom;\n    transform-origin: right bottom;\n    -webkit-transform: none;\n    transform: none;\n    opacity: 1;\n  }\n}\n\n.rotateInDownRight {\n  -webkit-animation-name: rotateInDownRight;\n  animation-name: rotateInDownRight;\n}\n\n@-webkit-keyframes rotateInUpLeft {\n  0% {\n    -webkit-transform-origin: left bottom;\n    transform-origin: left bottom;\n    -webkit-transform: rotate3d(0, 0, 1, 45deg);\n    transform: rotate3d(0, 0, 1, 45deg);\n    opacity: 0;\n  }\n\n  100% {\n    -webkit-transform-origin: left bottom;\n    transform-origin: left bottom;\n    -webkit-transform: none;\n    transform: none;\n    opacity: 1;\n  }\n}\n\n@keyframes rotateInUpLeft {\n  0% {\n    -webkit-transform-origin: left bottom;\n    transform-origin: left bottom;\n    -webkit-transform: rotate3d(0, 0, 1, 45deg);\n    transform: rotate3d(0, 0, 1, 45deg);\n    opacity: 0;\n  }\n\n  100% {\n    -webkit-transform-origin: left bottom;\n    transform-origin: left bottom;\n    -webkit-transform: none;\n    transform: none;\n    opacity: 1;\n  }\n}\n\n.rotateInUpLeft {\n  -webkit-animation-name: rotateInUpLeft;\n  animation-name: rotateInUpLeft;\n}\n\n@-webkit-keyframes rotateInUpRight {\n  0% {\n    -webkit-transform-origin: right bottom;\n    transform-origin: right bottom;\n    -webkit-transform: rotate3d(0, 0, 1, -90deg);\n    transform: rotate3d(0, 0, 1, -90deg);\n    opacity: 0;\n  }\n\n  100% {\n    -webkit-transform-origin: right bottom;\n    transform-origin: right bottom;\n    -webkit-transform: none;\n    transform: none;\n    opacity: 1;\n  }\n}\n\n@keyframes rotateInUpRight {\n  0% {\n    -webkit-transform-origin: right bottom;\n    transform-origin: right bottom;\n    -webkit-transform: rotate3d(0, 0, 1, -90deg);\n    transform: rotate3d(0, 0, 1, -90deg);\n    opacity: 0;\n  }\n\n  100% {\n    -webkit-transform-origin: right bottom;\n    transform-origin: right bottom;\n    -webkit-transform: none;\n    transform: none;\n    opacity: 1;\n  }\n}\n\n.rotateInUpRight {\n  -webkit-animation-name: rotateInUpRight;\n  animation-name: rotateInUpRight;\n}\n\n@-webkit-keyframes rotateOut {\n  0% {\n    -webkit-transform-origin: center;\n    transform-origin: center;\n    opacity: 1;\n  }\n\n  100% {\n    -webkit-transform-origin: center;\n    transform-origin: center;\n    -webkit-transform: rotate3d(0, 0, 1, 200deg);\n    transform: rotate3d(0, 0, 1, 200deg);\n    opacity: 0;\n  }\n}\n\n@keyframes rotateOut {\n  0% {\n    -webkit-transform-origin: center;\n    transform-origin: center;\n    opacity: 1;\n  }\n\n  100% {\n    -webkit-transform-origin: center;\n    transform-origin: center;\n    -webkit-transform: rotate3d(0, 0, 1, 200deg);\n    transform: rotate3d(0, 0, 1, 200deg);\n    opacity: 0;\n  }\n}\n\n.rotateOut {\n  -webkit-animation-name: rotateOut;\n  animation-name: rotateOut;\n}\n\n@-webkit-keyframes rotateOutDownLeft {\n  0% {\n    -webkit-transform-origin: left bottom;\n    transform-origin: left bottom;\n    opacity: 1;\n  }\n\n  100% {\n    -webkit-transform-origin: left bottom;\n    transform-origin: left bottom;\n    -webkit-transform: rotate3d(0, 0, 1, 45deg);\n    transform: rotate3d(0, 0, 1, 45deg);\n    opacity: 0;\n  }\n}\n\n@keyframes rotateOutDownLeft {\n  0% {\n    -webkit-transform-origin: left bottom;\n    transform-origin: left bottom;\n    opacity: 1;\n  }\n\n  100% {\n    -webkit-transform-origin: left bottom;\n    transform-origin: left bottom;\n    -webkit-transform: rotate3d(0, 0, 1, 45deg);\n    transform: rotate3d(0, 0, 1, 45deg);\n    opacity: 0;\n  }\n}\n\n.rotateOutDownLeft {\n  -webkit-animation-name: rotateOutDownLeft;\n  animation-name: rotateOutDownLeft;\n}\n\n@-webkit-keyframes rotateOutDownRight {\n  0% {\n    -webkit-transform-origin: right bottom;\n    transform-origin: right bottom;\n    opacity: 1;\n  }\n\n  100% {\n    -webkit-transform-origin: right bottom;\n    transform-origin: right bottom;\n    -webkit-transform: rotate3d(0, 0, 1, -45deg);\n    transform: rotate3d(0, 0, 1, -45deg);\n    opacity: 0;\n  }\n}\n\n@keyframes rotateOutDownRight {\n  0% {\n    -webkit-transform-origin: right bottom;\n    transform-origin: right bottom;\n    opacity: 1;\n  }\n\n  100% {\n    -webkit-transform-origin: right bottom;\n    transform-origin: right bottom;\n    -webkit-transform: rotate3d(0, 0, 1, -45deg);\n    transform: rotate3d(0, 0, 1, -45deg);\n    opacity: 0;\n  }\n}\n\n.rotateOutDownRight {\n  -webkit-animation-name: rotateOutDownRight;\n  animation-name: rotateOutDownRight;\n}\n\n@-webkit-keyframes rotateOutUpLeft {\n  0% {\n    -webkit-transform-origin: left bottom;\n    transform-origin: left bottom;\n    opacity: 1;\n  }\n\n  100% {\n    -webkit-transform-origin: left bottom;\n    transform-origin: left bottom;\n    -webkit-transform: rotate3d(0, 0, 1, -45deg);\n    transform: rotate3d(0, 0, 1, -45deg);\n    opacity: 0;\n  }\n}\n\n@keyframes rotateOutUpLeft {\n  0% {\n    -webkit-transform-origin: left bottom;\n    transform-origin: left bottom;\n    opacity: 1;\n  }\n\n  100% {\n    -webkit-transform-origin: left bottom;\n    transform-origin: left bottom;\n    -webkit-transform: rotate3d(0, 0, 1, -45deg);\n    transform: rotate3d(0, 0, 1, -45deg);\n    opacity: 0;\n  }\n}\n\n.rotateOutUpLeft {\n  -webkit-animation-name: rotateOutUpLeft;\n  animation-name: rotateOutUpLeft;\n}\n\n@-webkit-keyframes rotateOutUpRight {\n  0% {\n    -webkit-transform-origin: right bottom;\n    transform-origin: right bottom;\n    opacity: 1;\n  }\n\n  100% {\n    -webkit-transform-origin: right bottom;\n    transform-origin: right bottom;\n    -webkit-transform: rotate3d(0, 0, 1, 90deg);\n    transform: rotate3d(0, 0, 1, 90deg);\n    opacity: 0;\n  }\n}\n\n@keyframes rotateOutUpRight {\n  0% {\n    -webkit-transform-origin: right bottom;\n    transform-origin: right bottom;\n    opacity: 1;\n  }\n\n  100% {\n    -webkit-transform-origin: right bottom;\n    transform-origin: right bottom;\n    -webkit-transform: rotate3d(0, 0, 1, 90deg);\n    transform: rotate3d(0, 0, 1, 90deg);\n    opacity: 0;\n  }\n}\n\n.rotateOutUpRight {\n  -webkit-animation-name: rotateOutUpRight;\n  animation-name: rotateOutUpRight;\n}\n\n@-webkit-keyframes hinge {\n  0% {\n    -webkit-transform-origin: top left;\n    transform-origin: top left;\n    -webkit-animation-timing-function: ease-in-out;\n    animation-timing-function: ease-in-out;\n  }\n\n  20%, 60% {\n    -webkit-transform: rotate3d(0, 0, 1, 80deg);\n    transform: rotate3d(0, 0, 1, 80deg);\n    -webkit-transform-origin: top left;\n    transform-origin: top left;\n    -webkit-animation-timing-function: ease-in-out;\n    animation-timing-function: ease-in-out;\n  }\n\n  40%, 80% {\n    -webkit-transform: rotate3d(0, 0, 1, 60deg);\n    transform: rotate3d(0, 0, 1, 60deg);\n    -webkit-transform-origin: top left;\n    transform-origin: top left;\n    -webkit-animation-timing-function: ease-in-out;\n    animation-timing-function: ease-in-out;\n    opacity: 1;\n  }\n\n  100% {\n    -webkit-transform: translate3d(0, 700px, 0);\n    transform: translate3d(0, 700px, 0);\n    opacity: 0;\n  }\n}\n\n@keyframes hinge {\n  0% {\n    -webkit-transform-origin: top left;\n    transform-origin: top left;\n    -webkit-animation-timing-function: ease-in-out;\n    animation-timing-function: ease-in-out;\n  }\n\n  20%, 60% {\n    -webkit-transform: rotate3d(0, 0, 1, 80deg);\n    transform: rotate3d(0, 0, 1, 80deg);\n    -webkit-transform-origin: top left;\n    transform-origin: top left;\n    -webkit-animation-timing-function: ease-in-out;\n    animation-timing-function: ease-in-out;\n  }\n\n  40%, 80% {\n    -webkit-transform: rotate3d(0, 0, 1, 60deg);\n    transform: rotate3d(0, 0, 1, 60deg);\n    -webkit-transform-origin: top left;\n    transform-origin: top left;\n    -webkit-animation-timing-function: ease-in-out;\n    animation-timing-function: ease-in-out;\n    opacity: 1;\n  }\n\n  100% {\n    -webkit-transform: translate3d(0, 700px, 0);\n    transform: translate3d(0, 700px, 0);\n    opacity: 0;\n  }\n}\n\n.hinge {\n  -webkit-animation-name: hinge;\n  animation-name: hinge;\n}\n\n/* originally authored by Nick Pettit - https://github.com/nickpettit/glide */\n\n@-webkit-keyframes rollIn {\n  0% {\n    opacity: 0;\n    -webkit-transform: translate3d(-100%, 0, 0) rotate3d(0, 0, 1, -120deg);\n    transform: translate3d(-100%, 0, 0) rotate3d(0, 0, 1, -120deg);\n  }\n\n  100% {\n    opacity: 1;\n    -webkit-transform: none;\n    transform: none;\n  }\n}\n\n@keyframes rollIn {\n  0% {\n    opacity: 0;\n    -webkit-transform: translate3d(-100%, 0, 0) rotate3d(0, 0, 1, -120deg);\n    transform: translate3d(-100%, 0, 0) rotate3d(0, 0, 1, -120deg);\n  }\n\n  100% {\n    opacity: 1;\n    -webkit-transform: none;\n    transform: none;\n  }\n}\n\n.rollIn {\n  -webkit-animation-name: rollIn;\n  animation-name: rollIn;\n}\n\n/* originally authored by Nick Pettit - https://github.com/nickpettit/glide */\n\n@-webkit-keyframes rollOut {\n  0% {\n    opacity: 1;\n  }\n\n  100% {\n    opacity: 0;\n    -webkit-transform: translate3d(100%, 0, 0) rotate3d(0, 0, 1, 120deg);\n    transform: translate3d(100%, 0, 0) rotate3d(0, 0, 1, 120deg);\n  }\n}\n\n@keyframes rollOut {\n  0% {\n    opacity: 1;\n  }\n\n  100% {\n    opacity: 0;\n    -webkit-transform: translate3d(100%, 0, 0) rotate3d(0, 0, 1, 120deg);\n    transform: translate3d(100%, 0, 0) rotate3d(0, 0, 1, 120deg);\n  }\n}\n\n.rollOut {\n  -webkit-animation-name: rollOut;\n  animation-name: rollOut;\n}\n\n@-webkit-keyframes zoomIn {\n  0% {\n    opacity: 0;\n    -webkit-transform: scale3d(.3, .3, .3);\n    transform: scale3d(.3, .3, .3);\n  }\n\n  50% {\n    opacity: 1;\n  }\n}\n\n@keyframes zoomIn {\n  0% {\n    opacity: 0;\n    -webkit-transform: scale3d(.3, .3, .3);\n    transform: scale3d(.3, .3, .3);\n  }\n\n  50% {\n    opacity: 1;\n  }\n}\n\n.zoomIn {\n  -webkit-animation-name: zoomIn;\n  animation-name: zoomIn;\n}\n\n@-webkit-keyframes zoomInDown {\n  0% {\n    opacity: 0;\n    -webkit-transform: scale3d(.1, .1, .1) translate3d(0, -1000px, 0);\n    transform: scale3d(.1, .1, .1) translate3d(0, -1000px, 0);\n    -webkit-animation-timing-function: cubic-bezier(0.550, 0.055, 0.675, 0.190);\n    animation-timing-function: cubic-bezier(0.550, 0.055, 0.675, 0.190);\n  }\n\n  60% {\n    opacity: 1;\n    -webkit-transform: scale3d(.475, .475, .475) translate3d(0, 60px, 0);\n    transform: scale3d(.475, .475, .475) translate3d(0, 60px, 0);\n    -webkit-animation-timing-function: cubic-bezier(0.175, 0.885, 0.320, 1);\n    animation-timing-function: cubic-bezier(0.175, 0.885, 0.320, 1);\n  }\n}\n\n@keyframes zoomInDown {\n  0% {\n    opacity: 0;\n    -webkit-transform: scale3d(.1, .1, .1) translate3d(0, -1000px, 0);\n    transform: scale3d(.1, .1, .1) translate3d(0, -1000px, 0);\n    -webkit-animation-timing-function: cubic-bezier(0.550, 0.055, 0.675, 0.190);\n    animation-timing-function: cubic-bezier(0.550, 0.055, 0.675, 0.190);\n  }\n\n  60% {\n    opacity: 1;\n    -webkit-transform: scale3d(.475, .475, .475) translate3d(0, 60px, 0);\n    transform: scale3d(.475, .475, .475) translate3d(0, 60px, 0);\n    -webkit-animation-timing-function: cubic-bezier(0.175, 0.885, 0.320, 1);\n    animation-timing-function: cubic-bezier(0.175, 0.885, 0.320, 1);\n  }\n}\n\n.zoomInDown {\n  -webkit-animation-name: zoomInDown;\n  animation-name: zoomInDown;\n}\n\n@-webkit-keyframes zoomInLeft {\n  0% {\n    opacity: 0;\n    -webkit-transform: scale3d(.1, .1, .1) translate3d(-1000px, 0, 0);\n    transform: scale3d(.1, .1, .1) translate3d(-1000px, 0, 0);\n    -webkit-animation-timing-function: cubic-bezier(0.550, 0.055, 0.675, 0.190);\n    animation-timing-function: cubic-bezier(0.550, 0.055, 0.675, 0.190);\n  }\n\n  60% {\n    opacity: 1;\n    -webkit-transform: scale3d(.475, .475, .475) translate3d(10px, 0, 0);\n    transform: scale3d(.475, .475, .475) translate3d(10px, 0, 0);\n    -webkit-animation-timing-function: cubic-bezier(0.175, 0.885, 0.320, 1);\n    animation-timing-function: cubic-bezier(0.175, 0.885, 0.320, 1);\n  }\n}\n\n@keyframes zoomInLeft {\n  0% {\n    opacity: 0;\n    -webkit-transform: scale3d(.1, .1, .1) translate3d(-1000px, 0, 0);\n    transform: scale3d(.1, .1, .1) translate3d(-1000px, 0, 0);\n    -webkit-animation-timing-function: cubic-bezier(0.550, 0.055, 0.675, 0.190);\n    animation-timing-function: cubic-bezier(0.550, 0.055, 0.675, 0.190);\n  }\n\n  60% {\n    opacity: 1;\n    -webkit-transform: scale3d(.475, .475, .475) translate3d(10px, 0, 0);\n    transform: scale3d(.475, .475, .475) translate3d(10px, 0, 0);\n    -webkit-animation-timing-function: cubic-bezier(0.175, 0.885, 0.320, 1);\n    animation-timing-function: cubic-bezier(0.175, 0.885, 0.320, 1);\n  }\n}\n\n.zoomInLeft {\n  -webkit-animation-name: zoomInLeft;\n  animation-name: zoomInLeft;\n}\n\n@-webkit-keyframes zoomInRight {\n  0% {\n    opacity: 0;\n    -webkit-transform: scale3d(.1, .1, .1) translate3d(1000px, 0, 0);\n    transform: scale3d(.1, .1, .1) translate3d(1000px, 0, 0);\n    -webkit-animation-timing-function: cubic-bezier(0.550, 0.055, 0.675, 0.190);\n    animation-timing-function: cubic-bezier(0.550, 0.055, 0.675, 0.190);\n  }\n\n  60% {\n    opacity: 1;\n    -webkit-transform: scale3d(.475, .475, .475) translate3d(-10px, 0, 0);\n    transform: scale3d(.475, .475, .475) translate3d(-10px, 0, 0);\n    -webkit-animation-timing-function: cubic-bezier(0.175, 0.885, 0.320, 1);\n    animation-timing-function: cubic-bezier(0.175, 0.885, 0.320, 1);\n  }\n}\n\n@keyframes zoomInRight {\n  0% {\n    opacity: 0;\n    -webkit-transform: scale3d(.1, .1, .1) translate3d(1000px, 0, 0);\n    transform: scale3d(.1, .1, .1) translate3d(1000px, 0, 0);\n    -webkit-animation-timing-function: cubic-bezier(0.550, 0.055, 0.675, 0.190);\n    animation-timing-function: cubic-bezier(0.550, 0.055, 0.675, 0.190);\n  }\n\n  60% {\n    opacity: 1;\n    -webkit-transform: scale3d(.475, .475, .475) translate3d(-10px, 0, 0);\n    transform: scale3d(.475, .475, .475) translate3d(-10px, 0, 0);\n    -webkit-animation-timing-function: cubic-bezier(0.175, 0.885, 0.320, 1);\n    animation-timing-function: cubic-bezier(0.175, 0.885, 0.320, 1);\n  }\n}\n\n.zoomInRight {\n  -webkit-animation-name: zoomInRight;\n  animation-name: zoomInRight;\n}\n\n@-webkit-keyframes zoomInUp {\n  0% {\n    opacity: 0;\n    -webkit-transform: scale3d(.1, .1, .1) translate3d(0, 1000px, 0);\n    transform: scale3d(.1, .1, .1) translate3d(0, 1000px, 0);\n    -webkit-animation-timing-function: cubic-bezier(0.550, 0.055, 0.675, 0.190);\n    animation-timing-function: cubic-bezier(0.550, 0.055, 0.675, 0.190);\n  }\n\n  60% {\n    opacity: 1;\n    -webkit-transform: scale3d(.475, .475, .475) translate3d(0, -60px, 0);\n    transform: scale3d(.475, .475, .475) translate3d(0, -60px, 0);\n    -webkit-animation-timing-function: cubic-bezier(0.175, 0.885, 0.320, 1);\n    animation-timing-function: cubic-bezier(0.175, 0.885, 0.320, 1);\n  }\n}\n\n@keyframes zoomInUp {\n  0% {\n    opacity: 0;\n    -webkit-transform: scale3d(.1, .1, .1) translate3d(0, 1000px, 0);\n    transform: scale3d(.1, .1, .1) translate3d(0, 1000px, 0);\n    -webkit-animation-timing-function: cubic-bezier(0.550, 0.055, 0.675, 0.190);\n    animation-timing-function: cubic-bezier(0.550, 0.055, 0.675, 0.190);\n  }\n\n  60% {\n    opacity: 1;\n    -webkit-transform: scale3d(.475, .475, .475) translate3d(0, -60px, 0);\n    transform: scale3d(.475, .475, .475) translate3d(0, -60px, 0);\n    -webkit-animation-timing-function: cubic-bezier(0.175, 0.885, 0.320, 1);\n    animation-timing-function: cubic-bezier(0.175, 0.885, 0.320, 1);\n  }\n}\n\n.zoomInUp {\n  -webkit-animation-name: zoomInUp;\n  animation-name: zoomInUp;\n}\n\n@-webkit-keyframes zoomOut {\n  0% {\n    opacity: 1;\n  }\n\n  50% {\n    opacity: 0;\n    -webkit-transform: scale3d(.3, .3, .3);\n    transform: scale3d(.3, .3, .3);\n  }\n\n  100% {\n    opacity: 0;\n  }\n}\n\n@keyframes zoomOut {\n  0% {\n    opacity: 1;\n  }\n\n  50% {\n    opacity: 0;\n    -webkit-transform: scale3d(.3, .3, .3);\n    transform: scale3d(.3, .3, .3);\n  }\n\n  100% {\n    opacity: 0;\n  }\n}\n\n.zoomOut {\n  -webkit-animation-name: zoomOut;\n  animation-name: zoomOut;\n}\n\n@-webkit-keyframes zoomOutDown {\n  40% {\n    opacity: 1;\n    -webkit-transform: scale3d(.475, .475, .475) translate3d(0, -60px, 0);\n    transform: scale3d(.475, .475, .475) translate3d(0, -60px, 0);\n    -webkit-animation-timing-function: cubic-bezier(0.550, 0.055, 0.675, 0.190);\n    animation-timing-function: cubic-bezier(0.550, 0.055, 0.675, 0.190);\n  }\n\n  100% {\n    opacity: 0;\n    -webkit-transform: scale3d(.1, .1, .1) translate3d(0, 2000px, 0);\n    transform: scale3d(.1, .1, .1) translate3d(0, 2000px, 0);\n    -webkit-transform-origin: center bottom;\n    transform-origin: center bottom;\n    -webkit-animation-timing-function: cubic-bezier(0.175, 0.885, 0.320, 1);\n    animation-timing-function: cubic-bezier(0.175, 0.885, 0.320, 1);\n  }\n}\n\n@keyframes zoomOutDown {\n  40% {\n    opacity: 1;\n    -webkit-transform: scale3d(.475, .475, .475) translate3d(0, -60px, 0);\n    transform: scale3d(.475, .475, .475) translate3d(0, -60px, 0);\n    -webkit-animation-timing-function: cubic-bezier(0.550, 0.055, 0.675, 0.190);\n    animation-timing-function: cubic-bezier(0.550, 0.055, 0.675, 0.190);\n  }\n\n  100% {\n    opacity: 0;\n    -webkit-transform: scale3d(.1, .1, .1) translate3d(0, 2000px, 0);\n    transform: scale3d(.1, .1, .1) translate3d(0, 2000px, 0);\n    -webkit-transform-origin: center bottom;\n    transform-origin: center bottom;\n    -webkit-animation-timing-function: cubic-bezier(0.175, 0.885, 0.320, 1);\n    animation-timing-function: cubic-bezier(0.175, 0.885, 0.320, 1);\n  }\n}\n\n.zoomOutDown {\n  -webkit-animation-name: zoomOutDown;\n  animation-name: zoomOutDown;\n}\n\n@-webkit-keyframes zoomOutLeft {\n  40% {\n    opacity: 1;\n    -webkit-transform: scale3d(.475, .475, .475) translate3d(42px, 0, 0);\n    transform: scale3d(.475, .475, .475) translate3d(42px, 0, 0);\n  }\n\n  100% {\n    opacity: 0;\n    -webkit-transform: scale(.1) translate3d(-2000px, 0, 0);\n    transform: scale(.1) translate3d(-2000px, 0, 0);\n    -webkit-transform-origin: left center;\n    transform-origin: left center;\n  }\n}\n\n@keyframes zoomOutLeft {\n  40% {\n    opacity: 1;\n    -webkit-transform: scale3d(.475, .475, .475) translate3d(42px, 0, 0);\n    transform: scale3d(.475, .475, .475) translate3d(42px, 0, 0);\n  }\n\n  100% {\n    opacity: 0;\n    -webkit-transform: scale(.1) translate3d(-2000px, 0, 0);\n    transform: scale(.1) translate3d(-2000px, 0, 0);\n    -webkit-transform-origin: left center;\n    transform-origin: left center;\n  }\n}\n\n.zoomOutLeft {\n  -webkit-animation-name: zoomOutLeft;\n  animation-name: zoomOutLeft;\n}\n\n@-webkit-keyframes zoomOutRight {\n  40% {\n    opacity: 1;\n    -webkit-transform: scale3d(.475, .475, .475) translate3d(-42px, 0, 0);\n    transform: scale3d(.475, .475, .475) translate3d(-42px, 0, 0);\n  }\n\n  100% {\n    opacity: 0;\n    -webkit-transform: scale(.1) translate3d(2000px, 0, 0);\n    transform: scale(.1) translate3d(2000px, 0, 0);\n    -webkit-transform-origin: right center;\n    transform-origin: right center;\n  }\n}\n\n@keyframes zoomOutRight {\n  40% {\n    opacity: 1;\n    -webkit-transform: scale3d(.475, .475, .475) translate3d(-42px, 0, 0);\n    transform: scale3d(.475, .475, .475) translate3d(-42px, 0, 0);\n  }\n\n  100% {\n    opacity: 0;\n    -webkit-transform: scale(.1) translate3d(2000px, 0, 0);\n    transform: scale(.1) translate3d(2000px, 0, 0);\n    -webkit-transform-origin: right center;\n    transform-origin: right center;\n  }\n}\n\n.zoomOutRight {\n  -webkit-animation-name: zoomOutRight;\n  animation-name: zoomOutRight;\n}\n\n@-webkit-keyframes zoomOutUp {\n  40% {\n    opacity: 1;\n    -webkit-transform: scale3d(.475, .475, .475) translate3d(0, 60px, 0);\n    transform: scale3d(.475, .475, .475) translate3d(0, 60px, 0);\n    -webkit-animation-timing-function: cubic-bezier(0.550, 0.055, 0.675, 0.190);\n    animation-timing-function: cubic-bezier(0.550, 0.055, 0.675, 0.190);\n  }\n\n  100% {\n    opacity: 0;\n    -webkit-transform: scale3d(.1, .1, .1) translate3d(0, -2000px, 0);\n    transform: scale3d(.1, .1, .1) translate3d(0, -2000px, 0);\n    -webkit-transform-origin: center bottom;\n    transform-origin: center bottom;\n    -webkit-animation-timing-function: cubic-bezier(0.175, 0.885, 0.320, 1);\n    animation-timing-function: cubic-bezier(0.175, 0.885, 0.320, 1);\n  }\n}\n\n@keyframes zoomOutUp {\n  40% {\n    opacity: 1;\n    -webkit-transform: scale3d(.475, .475, .475) translate3d(0, 60px, 0);\n    transform: scale3d(.475, .475, .475) translate3d(0, 60px, 0);\n    -webkit-animation-timing-function: cubic-bezier(0.550, 0.055, 0.675, 0.190);\n    animation-timing-function: cubic-bezier(0.550, 0.055, 0.675, 0.190);\n  }\n\n  100% {\n    opacity: 0;\n    -webkit-transform: scale3d(.1, .1, .1) translate3d(0, -2000px, 0);\n    transform: scale3d(.1, .1, .1) translate3d(0, -2000px, 0);\n    -webkit-transform-origin: center bottom;\n    transform-origin: center bottom;\n    -webkit-animation-timing-function: cubic-bezier(0.175, 0.885, 0.320, 1);\n    animation-timing-function: cubic-bezier(0.175, 0.885, 0.320, 1);\n  }\n}\n\n.zoomOutUp {\n  -webkit-animation-name: zoomOutUp;\n  animation-name: zoomOutUp;\n}"

/***/ }),

/***/ "./public/css/custom.css":
/*!*******************************!*\
  !*** ./public/css/custom.css ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\n@import url(\n  http://fonts.googleapis.com/css?family=Open+Sans:400,\n  300,\n  700,\n  800\n);\n/*@import url(omnes-pro.css);*/\n/*======================================================================================================\n                            Global\n=======================================================================================================*/\n:root{\n  --header-footer: #24292e;\n  --accent: #a2e785;\n  --background: #eae7ed;\n  --homelogo: #ffffff;\n  --genomeGitWeb: #80c962;\n  --menuItems: #ffffff;\n  --signIn: #ffffff;\n  --foreground: #f6f8fa;\n  --textLight: #ffffff;\n  --textDark: #24292e;\n  --textDarkUnfocused: #889aad;\n  --button-hover: #596470;\n  --shadow: 0 1px 5px rgba(100, 100, 100, 0.5);\n  --searchbarShadow: 0 1px 5px rgba(0, 255, 0, 1);\n  --searchbarShadowHover: 0 1px 15px rgba(0, 255, 0, 1);\n  --searchbarShadowHoverInside: inset 1px 15px rgba(0, 255, 0, 1);\n  --logos: #5f5f5f;\n  --footerText: #80c962;\n  }\n* {\n  outline: none !important;\n  box-shadow: none;\n}\nbody {\n  font-family: \"Open Sans\";\n  overflow-x: hidden;\n}\n/* ///////////////////////////////////////////////////////////////////// \n// 03 - Preloader\n/////////////////////////////////////////////////////////////////////*/\n#preloader {\n  position: fixed;\n  left: 0;\n  top: 0;\n  z-index: 99999999999;\n  width: 100%;\n  height: 100%;\n  overflow: visible;\n  background: #fff url('preloader.gif') no-repeat center center;\n}\na:hover {\n  color: var(--accent);\n}\n.btn {\n  border-radius: 0;\n  transition: background 0.5s;\n}\n.navbar-white {\n  background-color: #fff !important;\n  transition: background 0.5s ease-out;\n  box-shadow: 0px 0px 10px #39c;\n}\n.navbar-white li a {\n  color: #39c !important;\n}\n.navbar-white .navbar-brand {\n  color: #39c !important;\n}\n.navbar-white button.navbar-toggle {\n  margin-top: 2px;\n  margin-right: 10px;\n}\n.navbar-white button.navbar-toggle .ion-navicon {\n  color: #000;\n}\n.form-control:focus {\n  border-color: #39c;\n  box-shadow: none;\n}\n.navbar-default .navbar-toggle:hover,\n.navbar-default .navbar-toggle:focus {\n  background-color: rgba(255, 255, 255, 0);\n}\n.navbar-default .navbar-toggle {\n  border-color: rgba(221, 221, 221, 0);\n  margin: 0;\n  line-height: 100%;\n}\n.navbar-toggle {\n  padding: 0;\n  border-radius: 0;\n}\n.navbar {\n  margin-bottom: 0px;\n  padding: 10px 5px;\n  min-height: 0;\n  /* z-index:1; */\n}\nbutton.navbar-toggle .ion-navicon {\n  font-size: 2em;\n  color: #fff;\n}\np {\n  font-size: 17px;\n  letter-spacing: 1px;\n  line-height: 31px;\n}\nul li {\n  list-style: none;\n  display: inline-block;\n}\nli a {\n  text-decoration: none;\n}\n.heading-text {\n  padding-top: 10px;\n}\n.heading-text h3 {\n  font-size: 40px;\n  padding-top: 0;\n  margin-top: 0;\n  font-weight: lighter;\n}\n.heading-text p {\n  font-size: 18px;\n  padding: 5px 0px;\n}\n.main_content {\n  padding: 50px 0px;\n}\niframe {\n  width: 100%;\n}\n.form-control {\n  border-radius: 0px;\n}\n/*-----------------------------------------------------------------------------------------------------\n                                navbar\n-------------------------------------------------------------------------------------------------------*/\n#overlay-1 {\n  background-color: rgba(29, 71, 102, 0.6);\n  height: 100vh;\n}\n#navigation,\n.navbar-default {\n  border-radius: 0px;\n  border: 0;\n  background-color: var(--header-footer);\n}\n.navbar-default .navbar-nav > li > a {\n  font-size: 14px;\n  transition: all 0.5s cubic-bezier(0.17, 0.67, 0.83, 0.67);\n  color: var(--accent);\n  /* margin: 10px 15px; */\n  padding: 0;\n  line-height: 28px;\n  font-weight: lighter;\n  padding: 10px 0px;\n\n  padding: 10px 15px;\n}\n.navbar {\n  margin-bottom: 0px;\n  padding: 5px;\n}\n.navbar-default .navbar-nav > li > a:hover,\n.navbar-default .navbar-nav > li > a:focus {\n  color: #fff;\n}\n.navbar-default .navbar-brand {\n  font-family: \"Trebuchet MS\", \"Lucida Sans Unicode\", \"Lucida Grande\",\n    \"Lucida Sans\", Arial, sans-serif;\n  color: var(--accent);\n  /* padding: 0px 15px; */\n  /* font-size: 49px; */\n  line-height: 100%;\n  height: auto;\n  /* font-weight: lighter; */\n  /* letter-spacing: 3px; */\n  font-size: 2.5rem;\n  padding: 1rem 1rem;\n}\n.navbar-default .navbar-brand:hover{\n  color: white;\n  cursor: pointer;\n}\n.container:hover{\ncolor: white;\ncursor: pointer;\n}\nspan {\n  font-size: 2rem;\n}\n.nav-wrap {\n  position: fixed;\n  top: 0;\n  width: 100%;\n  z-index: 9999;\n}\n#wrapper {\n  background: url('Webcircos_Background.jpg');\n  background-attachment: fixed;\n  background-position: center;\n  background-size: cover;\n  height: 100vh;\n}\n.starting-text {\n  font-weight: bold;\n  letter-spacing: 2px;\n}\n.rene,\n.starting-text h2 {\n  color: white;\n  font-weight: bold;\n  line-height: 70px;\n  letter-spacing: -1px;\n}\n.rene {\n  font-size: 80px;\n  text-transform: uppercase;\n  margin-top: 0px;\n  margin-bottom: 85px;\n}\n.starting-text h2 {\n  font-size: 40px;\n  margin-top: 40px;\n}\n.bottom {\n  width: 100%;\n  position: absolute;\n  bottom: 2%;\n}\n.bottom a {\n  color: rgba(192, 192, 192, 0.5);\n}\nh5 {\n  padding-top: 22px;\n  font-size: 18px;\n}\n/*-----------------------------------------------------------------------------------------------------\n                            about us\n------------------------------------------------------------------------------------------------------*/\n.exp {\n  padding-top: 76px;\n}\n.progress {\n  background-color: #d4e3e4;\n  border-radius: 0px;\n  border-color: lightseagreen;\n}\n.progress-bar {\n  background-color: cadetblue;\n}\n.pro {\n  padding-top: 10px;\n}\n/*----------------------------------------------------------------------------------------------------\nFunctionalities\n-----------------------------------------------------------------------------------------------------*/\n#functionalities {\n  background: url('service-bn.png');\n  /*background-attachment: fixed;*/\n  background-position: center;\n  background-size: cover;\n  padding: 60px 0;\n}\n#functionalities h3 {\n  color: white;\n}\n#functionalities h4 {\n  color: white;\n  font-size: 17px;\n  font-weight: 200;\n  font-stretch: expanded;\n  line-height: 2;\n}\n#functionalities hr {\n  border-color: white;\n}\n.about-us-text {\n  padding: 0px 100px;\n  font-size: 15px;\n  font-weight: 400;\n}\n.img-architecture {\n  padding: 0px 0px;\n  max-width: 100%;\n  text-align: center;\n}\n.services {\n  width: 100%;\n  overflow: hidden;\n  position: relative;\n}\n.service {\n  background-color: white;\n}\n.service img {\n  width: 75%;\n}\nh4 {\n  font-size: 20px;\n  font-weight: bold;\n  padding: 55px 0px 15px;\n}\n.service p {\n  font-size: 15px;\n  font-weight: 400;\n  padding: 0px 10px 35px 10px;\n  line-height: 22px;\n}\n.about-service {\n  font-size: 16px;\n  padding: 5px 10px 0px 10px;\n}\n.service-icon i {\n  padding: 20px 0px;\n  font-size: 5em;\n  transition: font-size 0.5s;\n  display: table-cell;\n  vertical-align: middle;\n}\n.service-icon {\n  display: table;\n  min-height: 140px;\n  text-align: center;\n  width: 100%;\n}\nhr {\n  border-color: rgb(101, 85, 124);\n}\n.full {\n  width: 10%;\n}\n.fa-code {\n  color: cadetblue;\n}\n.fa-desktop {\n  color: lightslategray;\n}\n.fa-th {\n  color: rgb(114, 184, 211);\n}\n.fa-gamepad {\n  color: rgba(0, 0, 128, 0.58);\n}\n.fa-lightbulb-o {\n  color: grey;\n}\n.fa-stack-overflow {\n  color: #c09553;\n}\n.service:hover .service-icon i {\n  font-size: 7em;\n}\n.service:hover .about-service h3 {\n  color: rgb(175, 104, 77);\n}\n.service {\n  text-align: center;\n}\n/*===============================================================================\n                        Meet With Us\n}\n/*/\n/////////////////////////////////////////////////////////////////////////////\n//                              Screen Shot\n////////////////////////////////////////////////////////////////////////////////*/\n#ScreenShot {\n  background-color: #39c;\n  text-align: center;\n  padding: 60px 0;\n}\n#ScreenShot h3 {\n  color: white;\n}\n#ScreenShot hr {\n  border-color: white;\n}\n\n#ScreenShot .item img {\n  padding: 20px;\n  width: 100%;\n}\n\n/*------------------------------------------------------------------------------------------------------\n                                Subscribe\n--------------------------------------------------------------------------------------------------------*/\n#subscribe {\n  text-align: center;\n  margin: 40px 0px 5px;\n}\n#subscribe h4 {\n  font-weight: normal;\n  font-size: 20px;\n}\n#subscribe input[type=\"email\"] {\n  text-align: center;\n  font-style: italic;\n  width: 50%;\n  height: 35px;\n  font-size: 15px;\n  min-width: 300px;\n  border: 1px solid lightgray;\n  font-style: italic;\n  margin-bottom: 43px;\n}\ninput[type=\"email\"]:focus {\n  border-color: #39c;\n}\ninput[type=\"submit\"] {\n  padding: 0px;\n}\n.btn-sub {\n  width: 170px;\n  height: 50px;\n  border-radius: 30px;\n  color: white;\n  background-color: #39c;\n  padding-top: 15px;\n  margin-top: -15px;\n  border-color: #39c;\n  margin-bottom: 45px;\n  text-transform: uppercase;\n}\n/*------------------------------------------------------------------------------------------------------\n                                Testimonial\n--------------------------------------------------------------------------------------------------------*/\n#testimonial {\n  background: url('test-bn.png');\n  background-attachment: fixed;\n  background-position: center;\n  background-size: cover;\n  color: white;\n  padding: 60px 0;\n}\n#testimonial h3 {\n  color: white;\n}\n#testimonial hr {\n  border-color: white;\n}\n.item img {\n  width: 100px;\n}\n/*------------------------------------------------------------------------------------------------------\n                                Download\n--------------------------------------------------------------------------------------------------------*/\n.download-subtitle {\n  margin-bottom: -60px;\n}\n/*------------------------------------------------------------------------------------------------------\n                                price-table\n--------------------------------------------------------------------------------------------------------*/\n#price_table ul {\n  display: table;\n  margin: 0 auto;\n  width: 100%;\n  max-width: 1100px;\n\n  padding: 0;\n}\n#price_table li {\n  display: table-cell;\n  width: 33.333%;\n  padding: 43px 0 0;\n  transition: all 0.25s, color 0s !important;\n  position: relative;\n  z-index: 0;\n  border: 1px solid #bbb;\n\n  background-color: #fff;\n}\n#price_table li:first-child {\n  position: relative;\n  right: -1px;\n}\n#price_table li:last-child {\n  position: relative;\n  left: -1px;\n}\n#price_table li:hover {\n  box-shadow: 0 13px 48px rgba(0, 0, 0, 0.2);\n  z-index: 1;\n  color: #fff;\n  background: #333;\n  border-color: #333;\n  -webkit-transform: scale(1.05);\n  transform: scale(1.05);\n}\n#price_table li * {\n  transition: none !important;\n  text-decoration: none;\n}\n#price_table li:hover * {\n  color: #fff !important;\n  border-color: rgba(255, 255, 255, 0.27) !important;\n}\n#price_table li strong {\n  font-size: 19px;\n  text-transform: uppercase;\n  color: #2f3740;\n  letter-spacing: 2.4px;\n  line-height: 45px;\n  font-weight: 600;\n  margin-bottom: 5px;\n  display: block;\n  text-align: center;\n}\n#price_table ul .price_table-description {\n  display: block;\n  font-size: 16px;\n  line-height: 35px;\n  text-align: center;\n  color: #6c6c6c;\n}\n#price_table ul .price_table-pay {\n  display: block;\n  font-size: 14px;\n  padding-bottom: 35px;\n  text-align: center;\n  margin-top: -22px;\n  color: #6c6c6c;\n}\n#price_table .big {\n  font-size: 84px;\n  letter-spacing: 2px;\n  display: block;\n  font-weight: 400;\n  text-align: center;\n  color: #6c6c6c;\n}\n#price_table .price_table-button {\n  font-size: 19px;\n  text-transform: uppercase;\n  color: #2f3740;\n  text-decoration: none;\n  line-height: 1;\n  padding: 28px 0 24px;\n  border-top: 1px solid #bbb;\n  width: 100%;\n  margin-top: 6px;\n  display: block;\n  text-align: center;\n}\n#price_table li:hover .price_table-button {\n  transition: none;\n}\n#price_table ul a:hover {\n  color: #e85700;\n}\n#price_table ul a.btn {\n  margin-top: 12px;\n}\n#price_table hr.full {\n  margin-top: 0px;\n  width: 80%;\n}\nul.price-table-chart li:nth-child(1) i {\n  color: rgb(187, 84, 102);\n}\nul.price-table-chart li:nth-child(3) i {\n  color: #39c;\n}\nul.price-table-chart li:nth-child(2) {\n  box-shadow: 0 13px 48px rgba(0, 0, 0, 0.2) !important;\n  z-index: 2 !important;\n  color: #fff !important;\n  background: #333 !important;\n  border-color: #333 !important;\n  -webkit-transform: scale(1.05);\n  transform: scale(1.05);\n}\nul.price-table-chart li:nth-child(2) * {\n  color: #fff !important;\n}\nul.price-table-chart li:nth-child(2) .price_table-button {\n  border-color: rgba(255, 255, 255, 0.27) !important;\n}\n.main_content figure {\n  padding: 0px 105px;\n}\n.post-shadow {\n  width: 100%;\n}\n.input-group-addon {\n  background-color: rgba(238, 238, 238, 0);\n}\n#price-table {\n  text-align: center;\n}\n.price-column {\n  position: relative;\n  z-index: 999;\n  margin-bottom: 15px;\n}\n.price-column .price-heading {\n  background-color: cadetblue;\n  position: relative;\n  padding: 17px 15px 15px;\n  box-shadow: 0 2px 2px #494946;\n}\n.price-column .price-heading h4 {\n  font-size: 18px;\n  font-weight: bold;\n  color: #ffffff;\n  text-shadow: 0 1px 1px #41413e;\n  margin-bottom: 0;\n  margin-top: 0;\n}\n.price-column .price-heading .subtitle {\n  color: #ffffff;\n  font-weight: bold;\n  font-style: italic;\n  text-shadow: 0 1px 1px #41413e;\n}\n.price-column .price-heading .price {\n  position: absolute;\n  top: 12px;\n  right: 10px;\n}\n.price-column .price-heading .price .currency {\n  color: white;\n  font: bold 16px Roboto Condensed, Helvetica, Geneva, sans-serif;\n  font-size: 22px;\n}\n.price-column .price-heading .price .amount {\n  color: white;\n  /* text-shadow: 0 1px 1px #b8b8b7; */\n  margin-right: 18px;\n  font-size: 35px;\n}\n.price-column .price-heading .price .cents {\n  color: white;\n  font: bold 16px Roboto Condensed, Helvetica, Geneva, sans-serif;\n  /* text-shadow: 0 1px 1px #b8b8b7; */\n  position: absolute;\n  top: 27px;\n  right: 0;\n}\n.price-content {\n  background-color: rgba(47, 79, 79, 0.71);\n}\n.price-content ul {\n  margin: 0px 0px;\n  padding: 0px 0px;\n}\n.price-content ul li:first-child {\n  border-top-width: initial;\n  border-top-style: none;\n  border-top-color: initial;\n}\n.price-content ul li {\n  display: block;\n  text-align: center;\n  color: #f7f7f7;\n  list-style: none;\n  border-top: 1px solid #8dbdbd;\n  border-bottom: 1px solid #2f4240;\n  padding: 7px 15px;\n  line-height: 35px;\n  transition: all 0.5s;\n}\n.price-column.highlight {\n  margin-top: 0;\n  box-shadow: 0 1px 8px #4d4d4d;\n  position: relative;\n  z-index: 999;\n}\n.price-column.hightligh .price-heading {\n  background: #f85140;\n}\n.price-column.hightligh .price-heading h4,\n.price-column.hightligh .price-heading .subtitle {\n  color: #ffffff;\n  text-shadow: 0 1px 1px #d61b08;\n}\n.price-column .price-heading .price {\n  position: absolute;\n  top: 12px;\n  right: 10px;\n}\n.price-column.hightligh .price-heading .price .currency,\n.price-column.hightligh .price-heading .price .amount,\n.price-column.hightligh .price-heading .price .cents {\n  color: #c63f33;\n  text-shadow: 0 1px 1px #f3a39b;\n}\n/* ---------------------------------------------------------------------------------------------------\n                            contact\n ---------------------------------------------------------------------------------------------------*/\n.input-group {\n  padding: 18px 0px;\n}\n.map {\n  padding: 18px 0px;\n}\n#contact {\n  padding: 60px 15px;\n}\n#contact p {\n  font-size: 24px;\n}\nform {\n  width: 100%;\n}\n.message {\n  height: 174px;\n}\n/*----------------------------------------------------------------------------------------------------\n                                    FOOTER\n-----------------------------------------------------------------------------------------------------*/\n#footer {\n  border-top: 1px solid lightgray;\n  padding: 20px 0px 0px;\n  text-align: center;\n}\n.up {\n  background-color: #39c;\n  color: white;\n  display: inline-block;\n  width: 40px;\n  height: 40px;\n  font-size: 28px;\n  border: 1px solid transparent;\n  transition: all 0.4s;\n}\n.up:hover,\n.up:focus,\n.up:visited,\n.up:active {\n  background-color: transparent;\n  /* font-size: 37px; */\n  border-color: rgb(51, 153, 204);\n}\n/*------------------------------------------------------------------------------------------------------\n                                Button\n--------------------------------------------------------------------------------------------------------*/\n#download .bttn {\n  background-color: #333;\n}\n.bttn {\n  font-family: Montserrat;\n  width: 265px;\n  margin: 40px 3px;\n  padding: 0px;\n  border: 0px;\n  background-color: #fff;\n}\n.btn img {\n  display: inline-block;\n  float: left;\n  padding: 0px;\n  margin: 0px;\n}\n.btn > p {\n  font-size: 11px;\n  font-weight: 400;\n  margin: 0px;\n  padding: 0px;\n  margin-bottom: -10px;\n  margin-top: 10px;\n}\n.btn > h6 {\n  font-size: 20px;\n  font-weight: 700;\n  margin: 0px;\n  padding: 0px;\n}\n.apple-store {\n  color: #39c;\n}\n.apple-store:hover,\n#download .apple-store:hover {\n  color: #fff;\n  background-color: #39c;\n}\n.google-play {\n  color: #c9c;\n}\n.google-play:hover,\n#download .google-play:hover {\n  color: #fff;\n  background-color: #c9c;\n}\n/* ================================================================================================================\n                        Price Table\n================================================================================================================== */\n/* ================================================================================================================\n                        Media Query\n}\n\n/* fixes */\n.navbar-toggle i {\n  color: white;\n  font-size: 32px;\n  margin-right: 25px;\n  margin-top: 7px;\n}\n.navbar-white .navbar-toggle i {\n  color: #39c;\n}\nsection#about {\n  padding: 60px 0;\n}\nsection#Meet {\n  padding: 60px 0 30px 0;\n}\n.meet-item {\n  margin-bottom: 30px;\n  margin-top: 20px;\n}\nsection#download {\n  padding: 60px 15px;\n}\n"

/***/ }),

/***/ "./public/css/font-awesome.min.css":
/*!*****************************************!*\
  !*** ./public/css/font-awesome.min.css ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "/*!\n *  Font Awesome 4.3.0 by @davegandy - http://fontawesome.io - @fontawesome\n *  License - http://fontawesome.io/license (Font: SIL OFL 1.1, CSS: MIT License)\n */@font-face{font-family:'FontAwesome';src:url('fontawesome-webfont.eot?v=4.3.0');src:url('fontawesome-webfont.eot?#iefix&v=4.3.0') format('embedded-opentype'),url('fontawesome-webfont.woff2?v=4.3.0') format('woff2'),url('fontawesome-webfont.woff?v=4.3.0') format('woff'),url('fontawesome-webfont.ttf?v=4.3.0') format('truetype'),url('fontawesome-webfont.svg?v=4.3.0#fontawesomeregular') format('svg');font-weight:normal;font-style:normal}.fa{display:inline-block;font:normal normal normal 14px/1 FontAwesome;font-size:inherit;text-rendering:auto;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;-webkit-transform:translate(0, 0);transform:translate(0, 0)}.fa-lg{font-size:1.33333333em;line-height:.75em;vertical-align:-15%}.fa-2x{font-size:2em}.fa-3x{font-size:3em}.fa-4x{font-size:4em}.fa-5x{font-size:5em}.fa-fw{width:1.28571429em;text-align:center}.fa-ul{padding-left:0;margin-left:2.14285714em;list-style-type:none}.fa-ul>li{position:relative}.fa-li{position:absolute;left:-2.14285714em;width:2.14285714em;top:.14285714em;text-align:center}.fa-li.fa-lg{left:-1.85714286em}.fa-border{padding:.2em .25em .15em;border:solid .08em #eee;border-radius:.1em}.pull-right{float:right}.pull-left{float:left}.fa.pull-left{margin-right:.3em}.fa.pull-right{margin-left:.3em}.fa-spin{-webkit-animation:fa-spin 2s infinite linear;animation:fa-spin 2s infinite linear}.fa-pulse{-webkit-animation:fa-spin 1s infinite steps(8);animation:fa-spin 1s infinite steps(8)}@-webkit-keyframes fa-spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}100%{-webkit-transform:rotate(359deg);transform:rotate(359deg)}}@keyframes fa-spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}100%{-webkit-transform:rotate(359deg);transform:rotate(359deg)}}.fa-rotate-90{filter:progid:DXImageTransform.Microsoft.BasicImage(rotation=1);-webkit-transform:rotate(90deg);transform:rotate(90deg)}.fa-rotate-180{filter:progid:DXImageTransform.Microsoft.BasicImage(rotation=2);-webkit-transform:rotate(180deg);transform:rotate(180deg)}.fa-rotate-270{filter:progid:DXImageTransform.Microsoft.BasicImage(rotation=3);-webkit-transform:rotate(270deg);transform:rotate(270deg)}.fa-flip-horizontal{filter:progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1);-webkit-transform:scale(-1, 1);transform:scale(-1, 1)}.fa-flip-vertical{filter:progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1);-webkit-transform:scale(1, -1);transform:scale(1, -1)}:root .fa-rotate-90,:root .fa-rotate-180,:root .fa-rotate-270,:root .fa-flip-horizontal,:root .fa-flip-vertical{-webkit-filter:none;filter:none}.fa-stack{position:relative;display:inline-block;width:2em;height:2em;line-height:2em;vertical-align:middle}.fa-stack-1x,.fa-stack-2x{position:absolute;left:0;width:100%;text-align:center}.fa-stack-1x{line-height:inherit}.fa-stack-2x{font-size:2em}.fa-inverse{color:#fff}.fa-glass:before{content:\"\\f000\"}.fa-music:before{content:\"\\f001\"}.fa-search:before{content:\"\\f002\"}.fa-envelope-o:before{content:\"\\f003\"}.fa-heart:before{content:\"\\f004\"}.fa-star:before{content:\"\\f005\"}.fa-star-o:before{content:\"\\f006\"}.fa-user:before{content:\"\\f007\"}.fa-film:before{content:\"\\f008\"}.fa-th-large:before{content:\"\\f009\"}.fa-th:before{content:\"\\f00a\"}.fa-th-list:before{content:\"\\f00b\"}.fa-check:before{content:\"\\f00c\"}.fa-remove:before,.fa-close:before,.fa-times:before{content:\"\\f00d\"}.fa-search-plus:before{content:\"\\f00e\"}.fa-search-minus:before{content:\"\\f010\"}.fa-power-off:before{content:\"\\f011\"}.fa-signal:before{content:\"\\f012\"}.fa-gear:before,.fa-cog:before{content:\"\\f013\"}.fa-trash-o:before{content:\"\\f014\"}.fa-home:before{content:\"\\f015\"}.fa-file-o:before{content:\"\\f016\"}.fa-clock-o:before{content:\"\\f017\"}.fa-road:before{content:\"\\f018\"}.fa-download:before{content:\"\\f019\"}.fa-arrow-circle-o-down:before{content:\"\\f01a\"}.fa-arrow-circle-o-up:before{content:\"\\f01b\"}.fa-inbox:before{content:\"\\f01c\"}.fa-play-circle-o:before{content:\"\\f01d\"}.fa-rotate-right:before,.fa-repeat:before{content:\"\\f01e\"}.fa-refresh:before{content:\"\\f021\"}.fa-list-alt:before{content:\"\\f022\"}.fa-lock:before{content:\"\\f023\"}.fa-flag:before{content:\"\\f024\"}.fa-headphones:before{content:\"\\f025\"}.fa-volume-off:before{content:\"\\f026\"}.fa-volume-down:before{content:\"\\f027\"}.fa-volume-up:before{content:\"\\f028\"}.fa-qrcode:before{content:\"\\f029\"}.fa-barcode:before{content:\"\\f02a\"}.fa-tag:before{content:\"\\f02b\"}.fa-tags:before{content:\"\\f02c\"}.fa-book:before{content:\"\\f02d\"}.fa-bookmark:before{content:\"\\f02e\"}.fa-print:before{content:\"\\f02f\"}.fa-camera:before{content:\"\\f030\"}.fa-font:before{content:\"\\f031\"}.fa-bold:before{content:\"\\f032\"}.fa-italic:before{content:\"\\f033\"}.fa-text-height:before{content:\"\\f034\"}.fa-text-width:before{content:\"\\f035\"}.fa-align-left:before{content:\"\\f036\"}.fa-align-center:before{content:\"\\f037\"}.fa-align-right:before{content:\"\\f038\"}.fa-align-justify:before{content:\"\\f039\"}.fa-list:before{content:\"\\f03a\"}.fa-dedent:before,.fa-outdent:before{content:\"\\f03b\"}.fa-indent:before{content:\"\\f03c\"}.fa-video-camera:before{content:\"\\f03d\"}.fa-photo:before,.fa-image:before,.fa-picture-o:before{content:\"\\f03e\"}.fa-pencil:before{content:\"\\f040\"}.fa-map-marker:before{content:\"\\f041\"}.fa-adjust:before{content:\"\\f042\"}.fa-tint:before{content:\"\\f043\"}.fa-edit:before,.fa-pencil-square-o:before{content:\"\\f044\"}.fa-share-square-o:before{content:\"\\f045\"}.fa-check-square-o:before{content:\"\\f046\"}.fa-arrows:before{content:\"\\f047\"}.fa-step-backward:before{content:\"\\f048\"}.fa-fast-backward:before{content:\"\\f049\"}.fa-backward:before{content:\"\\f04a\"}.fa-play:before{content:\"\\f04b\"}.fa-pause:before{content:\"\\f04c\"}.fa-stop:before{content:\"\\f04d\"}.fa-forward:before{content:\"\\f04e\"}.fa-fast-forward:before{content:\"\\f050\"}.fa-step-forward:before{content:\"\\f051\"}.fa-eject:before{content:\"\\f052\"}.fa-chevron-left:before{content:\"\\f053\"}.fa-chevron-right:before{content:\"\\f054\"}.fa-plus-circle:before{content:\"\\f055\"}.fa-minus-circle:before{content:\"\\f056\"}.fa-times-circle:before{content:\"\\f057\"}.fa-check-circle:before{content:\"\\f058\"}.fa-question-circle:before{content:\"\\f059\"}.fa-info-circle:before{content:\"\\f05a\"}.fa-crosshairs:before{content:\"\\f05b\"}.fa-times-circle-o:before{content:\"\\f05c\"}.fa-check-circle-o:before{content:\"\\f05d\"}.fa-ban:before{content:\"\\f05e\"}.fa-arrow-left:before{content:\"\\f060\"}.fa-arrow-right:before{content:\"\\f061\"}.fa-arrow-up:before{content:\"\\f062\"}.fa-arrow-down:before{content:\"\\f063\"}.fa-mail-forward:before,.fa-share:before{content:\"\\f064\"}.fa-expand:before{content:\"\\f065\"}.fa-compress:before{content:\"\\f066\"}.fa-plus:before{content:\"\\f067\"}.fa-minus:before{content:\"\\f068\"}.fa-asterisk:before{content:\"\\f069\"}.fa-exclamation-circle:before{content:\"\\f06a\"}.fa-gift:before{content:\"\\f06b\"}.fa-leaf:before{content:\"\\f06c\"}.fa-fire:before{content:\"\\f06d\"}.fa-eye:before{content:\"\\f06e\"}.fa-eye-slash:before{content:\"\\f070\"}.fa-warning:before,.fa-exclamation-triangle:before{content:\"\\f071\"}.fa-plane:before{content:\"\\f072\"}.fa-calendar:before{content:\"\\f073\"}.fa-random:before{content:\"\\f074\"}.fa-comment:before{content:\"\\f075\"}.fa-magnet:before{content:\"\\f076\"}.fa-chevron-up:before{content:\"\\f077\"}.fa-chevron-down:before{content:\"\\f078\"}.fa-retweet:before{content:\"\\f079\"}.fa-shopping-cart:before{content:\"\\f07a\"}.fa-folder:before{content:\"\\f07b\"}.fa-folder-open:before{content:\"\\f07c\"}.fa-arrows-v:before{content:\"\\f07d\"}.fa-arrows-h:before{content:\"\\f07e\"}.fa-bar-chart-o:before,.fa-bar-chart:before{content:\"\\f080\"}.fa-twitter-square:before{content:\"\\f081\"}.fa-facebook-square:before{content:\"\\f082\"}.fa-camera-retro:before{content:\"\\f083\"}.fa-key:before{content:\"\\f084\"}.fa-gears:before,.fa-cogs:before{content:\"\\f085\"}.fa-comments:before{content:\"\\f086\"}.fa-thumbs-o-up:before{content:\"\\f087\"}.fa-thumbs-o-down:before{content:\"\\f088\"}.fa-star-half:before{content:\"\\f089\"}.fa-heart-o:before{content:\"\\f08a\"}.fa-sign-out:before{content:\"\\f08b\"}.fa-linkedin-square:before{content:\"\\f08c\"}.fa-thumb-tack:before{content:\"\\f08d\"}.fa-external-link:before{content:\"\\f08e\"}.fa-sign-in:before{content:\"\\f090\"}.fa-trophy:before{content:\"\\f091\"}.fa-github-square:before{content:\"\\f092\"}.fa-upload:before{content:\"\\f093\"}.fa-lemon-o:before{content:\"\\f094\"}.fa-phone:before{content:\"\\f095\"}.fa-square-o:before{content:\"\\f096\"}.fa-bookmark-o:before{content:\"\\f097\"}.fa-phone-square:before{content:\"\\f098\"}.fa-twitter:before{content:\"\\f099\"}.fa-facebook-f:before,.fa-facebook:before{content:\"\\f09a\"}.fa-github:before{content:\"\\f09b\"}.fa-unlock:before{content:\"\\f09c\"}.fa-credit-card:before{content:\"\\f09d\"}.fa-rss:before{content:\"\\f09e\"}.fa-hdd-o:before{content:\"\\f0a0\"}.fa-bullhorn:before{content:\"\\f0a1\"}.fa-bell:before{content:\"\\f0f3\"}.fa-certificate:before{content:\"\\f0a3\"}.fa-hand-o-right:before{content:\"\\f0a4\"}.fa-hand-o-left:before{content:\"\\f0a5\"}.fa-hand-o-up:before{content:\"\\f0a6\"}.fa-hand-o-down:before{content:\"\\f0a7\"}.fa-arrow-circle-left:before{content:\"\\f0a8\"}.fa-arrow-circle-right:before{content:\"\\f0a9\"}.fa-arrow-circle-up:before{content:\"\\f0aa\"}.fa-arrow-circle-down:before{content:\"\\f0ab\"}.fa-globe:before{content:\"\\f0ac\"}.fa-wrench:before{content:\"\\f0ad\"}.fa-tasks:before{content:\"\\f0ae\"}.fa-filter:before{content:\"\\f0b0\"}.fa-briefcase:before{content:\"\\f0b1\"}.fa-arrows-alt:before{content:\"\\f0b2\"}.fa-group:before,.fa-users:before{content:\"\\f0c0\"}.fa-chain:before,.fa-link:before{content:\"\\f0c1\"}.fa-cloud:before{content:\"\\f0c2\"}.fa-flask:before{content:\"\\f0c3\"}.fa-cut:before,.fa-scissors:before{content:\"\\f0c4\"}.fa-copy:before,.fa-files-o:before{content:\"\\f0c5\"}.fa-paperclip:before{content:\"\\f0c6\"}.fa-save:before,.fa-floppy-o:before{content:\"\\f0c7\"}.fa-square:before{content:\"\\f0c8\"}.fa-navicon:before,.fa-reorder:before,.fa-bars:before{content:\"\\f0c9\"}.fa-list-ul:before{content:\"\\f0ca\"}.fa-list-ol:before{content:\"\\f0cb\"}.fa-strikethrough:before{content:\"\\f0cc\"}.fa-underline:before{content:\"\\f0cd\"}.fa-table:before{content:\"\\f0ce\"}.fa-magic:before{content:\"\\f0d0\"}.fa-truck:before{content:\"\\f0d1\"}.fa-pinterest:before{content:\"\\f0d2\"}.fa-pinterest-square:before{content:\"\\f0d3\"}.fa-google-plus-square:before{content:\"\\f0d4\"}.fa-google-plus:before{content:\"\\f0d5\"}.fa-money:before{content:\"\\f0d6\"}.fa-caret-down:before{content:\"\\f0d7\"}.fa-caret-up:before{content:\"\\f0d8\"}.fa-caret-left:before{content:\"\\f0d9\"}.fa-caret-right:before{content:\"\\f0da\"}.fa-columns:before{content:\"\\f0db\"}.fa-unsorted:before,.fa-sort:before{content:\"\\f0dc\"}.fa-sort-down:before,.fa-sort-desc:before{content:\"\\f0dd\"}.fa-sort-up:before,.fa-sort-asc:before{content:\"\\f0de\"}.fa-envelope:before{content:\"\\f0e0\"}.fa-linkedin:before{content:\"\\f0e1\"}.fa-rotate-left:before,.fa-undo:before{content:\"\\f0e2\"}.fa-legal:before,.fa-gavel:before{content:\"\\f0e3\"}.fa-dashboard:before,.fa-tachometer:before{content:\"\\f0e4\"}.fa-comment-o:before{content:\"\\f0e5\"}.fa-comments-o:before{content:\"\\f0e6\"}.fa-flash:before,.fa-bolt:before{content:\"\\f0e7\"}.fa-sitemap:before{content:\"\\f0e8\"}.fa-umbrella:before{content:\"\\f0e9\"}.fa-paste:before,.fa-clipboard:before{content:\"\\f0ea\"}.fa-lightbulb-o:before{content:\"\\f0eb\"}.fa-exchange:before{content:\"\\f0ec\"}.fa-cloud-download:before{content:\"\\f0ed\"}.fa-cloud-upload:before{content:\"\\f0ee\"}.fa-user-md:before{content:\"\\f0f0\"}.fa-stethoscope:before{content:\"\\f0f1\"}.fa-suitcase:before{content:\"\\f0f2\"}.fa-bell-o:before{content:\"\\f0a2\"}.fa-coffee:before{content:\"\\f0f4\"}.fa-cutlery:before{content:\"\\f0f5\"}.fa-file-text-o:before{content:\"\\f0f6\"}.fa-building-o:before{content:\"\\f0f7\"}.fa-hospital-o:before{content:\"\\f0f8\"}.fa-ambulance:before{content:\"\\f0f9\"}.fa-medkit:before{content:\"\\f0fa\"}.fa-fighter-jet:before{content:\"\\f0fb\"}.fa-beer:before{content:\"\\f0fc\"}.fa-h-square:before{content:\"\\f0fd\"}.fa-plus-square:before{content:\"\\f0fe\"}.fa-angle-double-left:before{content:\"\\f100\"}.fa-angle-double-right:before{content:\"\\f101\"}.fa-angle-double-up:before{content:\"\\f102\"}.fa-angle-double-down:before{content:\"\\f103\"}.fa-angle-left:before{content:\"\\f104\"}.fa-angle-right:before{content:\"\\f105\"}.fa-angle-up:before{content:\"\\f106\"}.fa-angle-down:before{content:\"\\f107\"}.fa-desktop:before{content:\"\\f108\"}.fa-laptop:before{content:\"\\f109\"}.fa-tablet:before{content:\"\\f10a\"}.fa-mobile-phone:before,.fa-mobile:before{content:\"\\f10b\"}.fa-circle-o:before{content:\"\\f10c\"}.fa-quote-left:before{content:\"\\f10d\"}.fa-quote-right:before{content:\"\\f10e\"}.fa-spinner:before{content:\"\\f110\"}.fa-circle:before{content:\"\\f111\"}.fa-mail-reply:before,.fa-reply:before{content:\"\\f112\"}.fa-github-alt:before{content:\"\\f113\"}.fa-folder-o:before{content:\"\\f114\"}.fa-folder-open-o:before{content:\"\\f115\"}.fa-smile-o:before{content:\"\\f118\"}.fa-frown-o:before{content:\"\\f119\"}.fa-meh-o:before{content:\"\\f11a\"}.fa-gamepad:before{content:\"\\f11b\"}.fa-keyboard-o:before{content:\"\\f11c\"}.fa-flag-o:before{content:\"\\f11d\"}.fa-flag-checkered:before{content:\"\\f11e\"}.fa-terminal:before{content:\"\\f120\"}.fa-code:before{content:\"\\f121\"}.fa-mail-reply-all:before,.fa-reply-all:before{content:\"\\f122\"}.fa-star-half-empty:before,.fa-star-half-full:before,.fa-star-half-o:before{content:\"\\f123\"}.fa-location-arrow:before{content:\"\\f124\"}.fa-crop:before{content:\"\\f125\"}.fa-code-fork:before{content:\"\\f126\"}.fa-unlink:before,.fa-chain-broken:before{content:\"\\f127\"}.fa-question:before{content:\"\\f128\"}.fa-info:before{content:\"\\f129\"}.fa-exclamation:before{content:\"\\f12a\"}.fa-superscript:before{content:\"\\f12b\"}.fa-subscript:before{content:\"\\f12c\"}.fa-eraser:before{content:\"\\f12d\"}.fa-puzzle-piece:before{content:\"\\f12e\"}.fa-microphone:before{content:\"\\f130\"}.fa-microphone-slash:before{content:\"\\f131\"}.fa-shield:before{content:\"\\f132\"}.fa-calendar-o:before{content:\"\\f133\"}.fa-fire-extinguisher:before{content:\"\\f134\"}.fa-rocket:before{content:\"\\f135\"}.fa-maxcdn:before{content:\"\\f136\"}.fa-chevron-circle-left:before{content:\"\\f137\"}.fa-chevron-circle-right:before{content:\"\\f138\"}.fa-chevron-circle-up:before{content:\"\\f139\"}.fa-chevron-circle-down:before{content:\"\\f13a\"}.fa-html5:before{content:\"\\f13b\"}.fa-css3:before{content:\"\\f13c\"}.fa-anchor:before{content:\"\\f13d\"}.fa-unlock-alt:before{content:\"\\f13e\"}.fa-bullseye:before{content:\"\\f140\"}.fa-ellipsis-h:before{content:\"\\f141\"}.fa-ellipsis-v:before{content:\"\\f142\"}.fa-rss-square:before{content:\"\\f143\"}.fa-play-circle:before{content:\"\\f144\"}.fa-ticket:before{content:\"\\f145\"}.fa-minus-square:before{content:\"\\f146\"}.fa-minus-square-o:before{content:\"\\f147\"}.fa-level-up:before{content:\"\\f148\"}.fa-level-down:before{content:\"\\f149\"}.fa-check-square:before{content:\"\\f14a\"}.fa-pencil-square:before{content:\"\\f14b\"}.fa-external-link-square:before{content:\"\\f14c\"}.fa-share-square:before{content:\"\\f14d\"}.fa-compass:before{content:\"\\f14e\"}.fa-toggle-down:before,.fa-caret-square-o-down:before{content:\"\\f150\"}.fa-toggle-up:before,.fa-caret-square-o-up:before{content:\"\\f151\"}.fa-toggle-right:before,.fa-caret-square-o-right:before{content:\"\\f152\"}.fa-euro:before,.fa-eur:before{content:\"\\f153\"}.fa-gbp:before{content:\"\\f154\"}.fa-dollar:before,.fa-usd:before{content:\"\\f155\"}.fa-rupee:before,.fa-inr:before{content:\"\\f156\"}.fa-cny:before,.fa-rmb:before,.fa-yen:before,.fa-jpy:before{content:\"\\f157\"}.fa-ruble:before,.fa-rouble:before,.fa-rub:before{content:\"\\f158\"}.fa-won:before,.fa-krw:before{content:\"\\f159\"}.fa-bitcoin:before,.fa-btc:before{content:\"\\f15a\"}.fa-file:before{content:\"\\f15b\"}.fa-file-text:before{content:\"\\f15c\"}.fa-sort-alpha-asc:before{content:\"\\f15d\"}.fa-sort-alpha-desc:before{content:\"\\f15e\"}.fa-sort-amount-asc:before{content:\"\\f160\"}.fa-sort-amount-desc:before{content:\"\\f161\"}.fa-sort-numeric-asc:before{content:\"\\f162\"}.fa-sort-numeric-desc:before{content:\"\\f163\"}.fa-thumbs-up:before{content:\"\\f164\"}.fa-thumbs-down:before{content:\"\\f165\"}.fa-youtube-square:before{content:\"\\f166\"}.fa-youtube:before{content:\"\\f167\"}.fa-xing:before{content:\"\\f168\"}.fa-xing-square:before{content:\"\\f169\"}.fa-youtube-play:before{content:\"\\f16a\"}.fa-dropbox:before{content:\"\\f16b\"}.fa-stack-overflow:before{content:\"\\f16c\"}.fa-instagram:before{content:\"\\f16d\"}.fa-flickr:before{content:\"\\f16e\"}.fa-adn:before{content:\"\\f170\"}.fa-bitbucket:before{content:\"\\f171\"}.fa-bitbucket-square:before{content:\"\\f172\"}.fa-tumblr:before{content:\"\\f173\"}.fa-tumblr-square:before{content:\"\\f174\"}.fa-long-arrow-down:before{content:\"\\f175\"}.fa-long-arrow-up:before{content:\"\\f176\"}.fa-long-arrow-left:before{content:\"\\f177\"}.fa-long-arrow-right:before{content:\"\\f178\"}.fa-apple:before{content:\"\\f179\"}.fa-windows:before{content:\"\\f17a\"}.fa-android:before{content:\"\\f17b\"}.fa-linux:before{content:\"\\f17c\"}.fa-dribbble:before{content:\"\\f17d\"}.fa-skype:before{content:\"\\f17e\"}.fa-foursquare:before{content:\"\\f180\"}.fa-trello:before{content:\"\\f181\"}.fa-female:before{content:\"\\f182\"}.fa-male:before{content:\"\\f183\"}.fa-gittip:before,.fa-gratipay:before{content:\"\\f184\"}.fa-sun-o:before{content:\"\\f185\"}.fa-moon-o:before{content:\"\\f186\"}.fa-archive:before{content:\"\\f187\"}.fa-bug:before{content:\"\\f188\"}.fa-vk:before{content:\"\\f189\"}.fa-weibo:before{content:\"\\f18a\"}.fa-renren:before{content:\"\\f18b\"}.fa-pagelines:before{content:\"\\f18c\"}.fa-stack-exchange:before{content:\"\\f18d\"}.fa-arrow-circle-o-right:before{content:\"\\f18e\"}.fa-arrow-circle-o-left:before{content:\"\\f190\"}.fa-toggle-left:before,.fa-caret-square-o-left:before{content:\"\\f191\"}.fa-dot-circle-o:before{content:\"\\f192\"}.fa-wheelchair:before{content:\"\\f193\"}.fa-vimeo-square:before{content:\"\\f194\"}.fa-turkish-lira:before,.fa-try:before{content:\"\\f195\"}.fa-plus-square-o:before{content:\"\\f196\"}.fa-space-shuttle:before{content:\"\\f197\"}.fa-slack:before{content:\"\\f198\"}.fa-envelope-square:before{content:\"\\f199\"}.fa-wordpress:before{content:\"\\f19a\"}.fa-openid:before{content:\"\\f19b\"}.fa-institution:before,.fa-bank:before,.fa-university:before{content:\"\\f19c\"}.fa-mortar-board:before,.fa-graduation-cap:before{content:\"\\f19d\"}.fa-yahoo:before{content:\"\\f19e\"}.fa-google:before{content:\"\\f1a0\"}.fa-reddit:before{content:\"\\f1a1\"}.fa-reddit-square:before{content:\"\\f1a2\"}.fa-stumbleupon-circle:before{content:\"\\f1a3\"}.fa-stumbleupon:before{content:\"\\f1a4\"}.fa-delicious:before{content:\"\\f1a5\"}.fa-digg:before{content:\"\\f1a6\"}.fa-pied-piper:before{content:\"\\f1a7\"}.fa-pied-piper-alt:before{content:\"\\f1a8\"}.fa-drupal:before{content:\"\\f1a9\"}.fa-joomla:before{content:\"\\f1aa\"}.fa-language:before{content:\"\\f1ab\"}.fa-fax:before{content:\"\\f1ac\"}.fa-building:before{content:\"\\f1ad\"}.fa-child:before{content:\"\\f1ae\"}.fa-paw:before{content:\"\\f1b0\"}.fa-spoon:before{content:\"\\f1b1\"}.fa-cube:before{content:\"\\f1b2\"}.fa-cubes:before{content:\"\\f1b3\"}.fa-behance:before{content:\"\\f1b4\"}.fa-behance-square:before{content:\"\\f1b5\"}.fa-steam:before{content:\"\\f1b6\"}.fa-steam-square:before{content:\"\\f1b7\"}.fa-recycle:before{content:\"\\f1b8\"}.fa-automobile:before,.fa-car:before{content:\"\\f1b9\"}.fa-cab:before,.fa-taxi:before{content:\"\\f1ba\"}.fa-tree:before{content:\"\\f1bb\"}.fa-spotify:before{content:\"\\f1bc\"}.fa-deviantart:before{content:\"\\f1bd\"}.fa-soundcloud:before{content:\"\\f1be\"}.fa-database:before{content:\"\\f1c0\"}.fa-file-pdf-o:before{content:\"\\f1c1\"}.fa-file-word-o:before{content:\"\\f1c2\"}.fa-file-excel-o:before{content:\"\\f1c3\"}.fa-file-powerpoint-o:before{content:\"\\f1c4\"}.fa-file-photo-o:before,.fa-file-picture-o:before,.fa-file-image-o:before{content:\"\\f1c5\"}.fa-file-zip-o:before,.fa-file-archive-o:before{content:\"\\f1c6\"}.fa-file-sound-o:before,.fa-file-audio-o:before{content:\"\\f1c7\"}.fa-file-movie-o:before,.fa-file-video-o:before{content:\"\\f1c8\"}.fa-file-code-o:before{content:\"\\f1c9\"}.fa-vine:before{content:\"\\f1ca\"}.fa-codepen:before{content:\"\\f1cb\"}.fa-jsfiddle:before{content:\"\\f1cc\"}.fa-life-bouy:before,.fa-life-buoy:before,.fa-life-saver:before,.fa-support:before,.fa-life-ring:before{content:\"\\f1cd\"}.fa-circle-o-notch:before{content:\"\\f1ce\"}.fa-ra:before,.fa-rebel:before{content:\"\\f1d0\"}.fa-ge:before,.fa-empire:before{content:\"\\f1d1\"}.fa-git-square:before{content:\"\\f1d2\"}.fa-git:before{content:\"\\f1d3\"}.fa-hacker-news:before{content:\"\\f1d4\"}.fa-tencent-weibo:before{content:\"\\f1d5\"}.fa-qq:before{content:\"\\f1d6\"}.fa-wechat:before,.fa-weixin:before{content:\"\\f1d7\"}.fa-send:before,.fa-paper-plane:before{content:\"\\f1d8\"}.fa-send-o:before,.fa-paper-plane-o:before{content:\"\\f1d9\"}.fa-history:before{content:\"\\f1da\"}.fa-genderless:before,.fa-circle-thin:before{content:\"\\f1db\"}.fa-header:before{content:\"\\f1dc\"}.fa-paragraph:before{content:\"\\f1dd\"}.fa-sliders:before{content:\"\\f1de\"}.fa-share-alt:before{content:\"\\f1e0\"}.fa-share-alt-square:before{content:\"\\f1e1\"}.fa-bomb:before{content:\"\\f1e2\"}.fa-soccer-ball-o:before,.fa-futbol-o:before{content:\"\\f1e3\"}.fa-tty:before{content:\"\\f1e4\"}.fa-binoculars:before{content:\"\\f1e5\"}.fa-plug:before{content:\"\\f1e6\"}.fa-slideshare:before{content:\"\\f1e7\"}.fa-twitch:before{content:\"\\f1e8\"}.fa-yelp:before{content:\"\\f1e9\"}.fa-newspaper-o:before{content:\"\\f1ea\"}.fa-wifi:before{content:\"\\f1eb\"}.fa-calculator:before{content:\"\\f1ec\"}.fa-paypal:before{content:\"\\f1ed\"}.fa-google-wallet:before{content:\"\\f1ee\"}.fa-cc-visa:before{content:\"\\f1f0\"}.fa-cc-mastercard:before{content:\"\\f1f1\"}.fa-cc-discover:before{content:\"\\f1f2\"}.fa-cc-amex:before{content:\"\\f1f3\"}.fa-cc-paypal:before{content:\"\\f1f4\"}.fa-cc-stripe:before{content:\"\\f1f5\"}.fa-bell-slash:before{content:\"\\f1f6\"}.fa-bell-slash-o:before{content:\"\\f1f7\"}.fa-trash:before{content:\"\\f1f8\"}.fa-copyright:before{content:\"\\f1f9\"}.fa-at:before{content:\"\\f1fa\"}.fa-eyedropper:before{content:\"\\f1fb\"}.fa-paint-brush:before{content:\"\\f1fc\"}.fa-birthday-cake:before{content:\"\\f1fd\"}.fa-area-chart:before{content:\"\\f1fe\"}.fa-pie-chart:before{content:\"\\f200\"}.fa-line-chart:before{content:\"\\f201\"}.fa-lastfm:before{content:\"\\f202\"}.fa-lastfm-square:before{content:\"\\f203\"}.fa-toggle-off:before{content:\"\\f204\"}.fa-toggle-on:before{content:\"\\f205\"}.fa-bicycle:before{content:\"\\f206\"}.fa-bus:before{content:\"\\f207\"}.fa-ioxhost:before{content:\"\\f208\"}.fa-angellist:before{content:\"\\f209\"}.fa-cc:before{content:\"\\f20a\"}.fa-shekel:before,.fa-sheqel:before,.fa-ils:before{content:\"\\f20b\"}.fa-meanpath:before{content:\"\\f20c\"}.fa-buysellads:before{content:\"\\f20d\"}.fa-connectdevelop:before{content:\"\\f20e\"}.fa-dashcube:before{content:\"\\f210\"}.fa-forumbee:before{content:\"\\f211\"}.fa-leanpub:before{content:\"\\f212\"}.fa-sellsy:before{content:\"\\f213\"}.fa-shirtsinbulk:before{content:\"\\f214\"}.fa-simplybuilt:before{content:\"\\f215\"}.fa-skyatlas:before{content:\"\\f216\"}.fa-cart-plus:before{content:\"\\f217\"}.fa-cart-arrow-down:before{content:\"\\f218\"}.fa-diamond:before{content:\"\\f219\"}.fa-ship:before{content:\"\\f21a\"}.fa-user-secret:before{content:\"\\f21b\"}.fa-motorcycle:before{content:\"\\f21c\"}.fa-street-view:before{content:\"\\f21d\"}.fa-heartbeat:before{content:\"\\f21e\"}.fa-venus:before{content:\"\\f221\"}.fa-mars:before{content:\"\\f222\"}.fa-mercury:before{content:\"\\f223\"}.fa-transgender:before{content:\"\\f224\"}.fa-transgender-alt:before{content:\"\\f225\"}.fa-venus-double:before{content:\"\\f226\"}.fa-mars-double:before{content:\"\\f227\"}.fa-venus-mars:before{content:\"\\f228\"}.fa-mars-stroke:before{content:\"\\f229\"}.fa-mars-stroke-v:before{content:\"\\f22a\"}.fa-mars-stroke-h:before{content:\"\\f22b\"}.fa-neuter:before{content:\"\\f22c\"}.fa-facebook-official:before{content:\"\\f230\"}.fa-pinterest-p:before{content:\"\\f231\"}.fa-whatsapp:before{content:\"\\f232\"}.fa-server:before{content:\"\\f233\"}.fa-user-plus:before{content:\"\\f234\"}.fa-user-times:before{content:\"\\f235\"}.fa-hotel:before,.fa-bed:before{content:\"\\f236\"}.fa-viacoin:before{content:\"\\f237\"}.fa-train:before{content:\"\\f238\"}.fa-subway:before{content:\"\\f239\"}.fa-medium:before{content:\"\\f23a\"}"

/***/ }),

/***/ "./public/css/ionicons.min.css":
/*!*************************************!*\
  !*** ./public/css/ionicons.min.css ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "@charset \"UTF-8\";/*!\n  Ionicons, v2.0.0\n  Created by Ben Sperry for the Ionic Framework, http://ionicons.com/\n  https://twitter.com/benjsperry  https://twitter.com/ionicframework\n  MIT License: https://github.com/driftyco/ionicons\n\n  Android-style icons originally built by Google’s\n  Material Design Icons: https://github.com/google/material-design-icons\n  used under CC BY http://creativecommons.org/licenses/by/4.0/\n  Modified icons to fit ionicon’s grid from original.\n*/@font-face{font-family:\"Ionicons\";src:url('ionicons.eot?v=2.0.0');src:url('ionicons.eot?v=2.0.0#iefix') format(\"embedded-opentype\"),url('ionicons.ttf?v=2.0.0') format(\"truetype\"),url('ionicons.woff?v=2.0.0') format(\"woff\"),url('ionicons.svg?v=2.0.0#Ionicons') format(\"svg\");font-weight:normal;font-style:normal}.ion,.ionicons,.ion-alert:before,.ion-alert-circled:before,.ion-android-add:before,.ion-android-add-circle:before,.ion-android-alarm-clock:before,.ion-android-alert:before,.ion-android-apps:before,.ion-android-archive:before,.ion-android-arrow-back:before,.ion-android-arrow-down:before,.ion-android-arrow-dropdown:before,.ion-android-arrow-dropdown-circle:before,.ion-android-arrow-dropleft:before,.ion-android-arrow-dropleft-circle:before,.ion-android-arrow-dropright:before,.ion-android-arrow-dropright-circle:before,.ion-android-arrow-dropup:before,.ion-android-arrow-dropup-circle:before,.ion-android-arrow-forward:before,.ion-android-arrow-up:before,.ion-android-attach:before,.ion-android-bar:before,.ion-android-bicycle:before,.ion-android-boat:before,.ion-android-bookmark:before,.ion-android-bulb:before,.ion-android-bus:before,.ion-android-calendar:before,.ion-android-call:before,.ion-android-camera:before,.ion-android-cancel:before,.ion-android-car:before,.ion-android-cart:before,.ion-android-chat:before,.ion-android-checkbox:before,.ion-android-checkbox-blank:before,.ion-android-checkbox-outline:before,.ion-android-checkbox-outline-blank:before,.ion-android-checkmark-circle:before,.ion-android-clipboard:before,.ion-android-close:before,.ion-android-cloud:before,.ion-android-cloud-circle:before,.ion-android-cloud-done:before,.ion-android-cloud-outline:before,.ion-android-color-palette:before,.ion-android-compass:before,.ion-android-contact:before,.ion-android-contacts:before,.ion-android-contract:before,.ion-android-create:before,.ion-android-delete:before,.ion-android-desktop:before,.ion-android-document:before,.ion-android-done:before,.ion-android-done-all:before,.ion-android-download:before,.ion-android-drafts:before,.ion-android-exit:before,.ion-android-expand:before,.ion-android-favorite:before,.ion-android-favorite-outline:before,.ion-android-film:before,.ion-android-folder:before,.ion-android-folder-open:before,.ion-android-funnel:before,.ion-android-globe:before,.ion-android-hand:before,.ion-android-hangout:before,.ion-android-happy:before,.ion-android-home:before,.ion-android-image:before,.ion-android-laptop:before,.ion-android-list:before,.ion-android-locate:before,.ion-android-lock:before,.ion-android-mail:before,.ion-android-map:before,.ion-android-menu:before,.ion-android-microphone:before,.ion-android-microphone-off:before,.ion-android-more-horizontal:before,.ion-android-more-vertical:before,.ion-android-navigate:before,.ion-android-notifications:before,.ion-android-notifications-none:before,.ion-android-notifications-off:before,.ion-android-open:before,.ion-android-options:before,.ion-android-people:before,.ion-android-person:before,.ion-android-person-add:before,.ion-android-phone-landscape:before,.ion-android-phone-portrait:before,.ion-android-pin:before,.ion-android-plane:before,.ion-android-playstore:before,.ion-android-print:before,.ion-android-radio-button-off:before,.ion-android-radio-button-on:before,.ion-android-refresh:before,.ion-android-remove:before,.ion-android-remove-circle:before,.ion-android-restaurant:before,.ion-android-sad:before,.ion-android-search:before,.ion-android-send:before,.ion-android-settings:before,.ion-android-share:before,.ion-android-share-alt:before,.ion-android-star:before,.ion-android-star-half:before,.ion-android-star-outline:before,.ion-android-stopwatch:before,.ion-android-subway:before,.ion-android-sunny:before,.ion-android-sync:before,.ion-android-textsms:before,.ion-android-time:before,.ion-android-train:before,.ion-android-unlock:before,.ion-android-upload:before,.ion-android-volume-down:before,.ion-android-volume-mute:before,.ion-android-volume-off:before,.ion-android-volume-up:before,.ion-android-walk:before,.ion-android-warning:before,.ion-android-watch:before,.ion-android-wifi:before,.ion-aperture:before,.ion-archive:before,.ion-arrow-down-a:before,.ion-arrow-down-b:before,.ion-arrow-down-c:before,.ion-arrow-expand:before,.ion-arrow-graph-down-left:before,.ion-arrow-graph-down-right:before,.ion-arrow-graph-up-left:before,.ion-arrow-graph-up-right:before,.ion-arrow-left-a:before,.ion-arrow-left-b:before,.ion-arrow-left-c:before,.ion-arrow-move:before,.ion-arrow-resize:before,.ion-arrow-return-left:before,.ion-arrow-return-right:before,.ion-arrow-right-a:before,.ion-arrow-right-b:before,.ion-arrow-right-c:before,.ion-arrow-shrink:before,.ion-arrow-swap:before,.ion-arrow-up-a:before,.ion-arrow-up-b:before,.ion-arrow-up-c:before,.ion-asterisk:before,.ion-at:before,.ion-backspace:before,.ion-backspace-outline:before,.ion-bag:before,.ion-battery-charging:before,.ion-battery-empty:before,.ion-battery-full:before,.ion-battery-half:before,.ion-battery-low:before,.ion-beaker:before,.ion-beer:before,.ion-bluetooth:before,.ion-bonfire:before,.ion-bookmark:before,.ion-bowtie:before,.ion-briefcase:before,.ion-bug:before,.ion-calculator:before,.ion-calendar:before,.ion-camera:before,.ion-card:before,.ion-cash:before,.ion-chatbox:before,.ion-chatbox-working:before,.ion-chatboxes:before,.ion-chatbubble:before,.ion-chatbubble-working:before,.ion-chatbubbles:before,.ion-checkmark:before,.ion-checkmark-circled:before,.ion-checkmark-round:before,.ion-chevron-down:before,.ion-chevron-left:before,.ion-chevron-right:before,.ion-chevron-up:before,.ion-clipboard:before,.ion-clock:before,.ion-close:before,.ion-close-circled:before,.ion-close-round:before,.ion-closed-captioning:before,.ion-cloud:before,.ion-code:before,.ion-code-download:before,.ion-code-working:before,.ion-coffee:before,.ion-compass:before,.ion-compose:before,.ion-connection-bars:before,.ion-contrast:before,.ion-crop:before,.ion-cube:before,.ion-disc:before,.ion-document:before,.ion-document-text:before,.ion-drag:before,.ion-earth:before,.ion-easel:before,.ion-edit:before,.ion-egg:before,.ion-eject:before,.ion-email:before,.ion-email-unread:before,.ion-erlenmeyer-flask:before,.ion-erlenmeyer-flask-bubbles:before,.ion-eye:before,.ion-eye-disabled:before,.ion-female:before,.ion-filing:before,.ion-film-marker:before,.ion-fireball:before,.ion-flag:before,.ion-flame:before,.ion-flash:before,.ion-flash-off:before,.ion-folder:before,.ion-fork:before,.ion-fork-repo:before,.ion-forward:before,.ion-funnel:before,.ion-gear-a:before,.ion-gear-b:before,.ion-grid:before,.ion-hammer:before,.ion-happy:before,.ion-happy-outline:before,.ion-headphone:before,.ion-heart:before,.ion-heart-broken:before,.ion-help:before,.ion-help-buoy:before,.ion-help-circled:before,.ion-home:before,.ion-icecream:before,.ion-image:before,.ion-images:before,.ion-information:before,.ion-information-circled:before,.ion-ionic:before,.ion-ios-alarm:before,.ion-ios-alarm-outline:before,.ion-ios-albums:before,.ion-ios-albums-outline:before,.ion-ios-americanfootball:before,.ion-ios-americanfootball-outline:before,.ion-ios-analytics:before,.ion-ios-analytics-outline:before,.ion-ios-arrow-back:before,.ion-ios-arrow-down:before,.ion-ios-arrow-forward:before,.ion-ios-arrow-left:before,.ion-ios-arrow-right:before,.ion-ios-arrow-thin-down:before,.ion-ios-arrow-thin-left:before,.ion-ios-arrow-thin-right:before,.ion-ios-arrow-thin-up:before,.ion-ios-arrow-up:before,.ion-ios-at:before,.ion-ios-at-outline:before,.ion-ios-barcode:before,.ion-ios-barcode-outline:before,.ion-ios-baseball:before,.ion-ios-baseball-outline:before,.ion-ios-basketball:before,.ion-ios-basketball-outline:before,.ion-ios-bell:before,.ion-ios-bell-outline:before,.ion-ios-body:before,.ion-ios-body-outline:before,.ion-ios-bolt:before,.ion-ios-bolt-outline:before,.ion-ios-book:before,.ion-ios-book-outline:before,.ion-ios-bookmarks:before,.ion-ios-bookmarks-outline:before,.ion-ios-box:before,.ion-ios-box-outline:before,.ion-ios-briefcase:before,.ion-ios-briefcase-outline:before,.ion-ios-browsers:before,.ion-ios-browsers-outline:before,.ion-ios-calculator:before,.ion-ios-calculator-outline:before,.ion-ios-calendar:before,.ion-ios-calendar-outline:before,.ion-ios-camera:before,.ion-ios-camera-outline:before,.ion-ios-cart:before,.ion-ios-cart-outline:before,.ion-ios-chatboxes:before,.ion-ios-chatboxes-outline:before,.ion-ios-chatbubble:before,.ion-ios-chatbubble-outline:before,.ion-ios-checkmark:before,.ion-ios-checkmark-empty:before,.ion-ios-checkmark-outline:before,.ion-ios-circle-filled:before,.ion-ios-circle-outline:before,.ion-ios-clock:before,.ion-ios-clock-outline:before,.ion-ios-close:before,.ion-ios-close-empty:before,.ion-ios-close-outline:before,.ion-ios-cloud:before,.ion-ios-cloud-download:before,.ion-ios-cloud-download-outline:before,.ion-ios-cloud-outline:before,.ion-ios-cloud-upload:before,.ion-ios-cloud-upload-outline:before,.ion-ios-cloudy:before,.ion-ios-cloudy-night:before,.ion-ios-cloudy-night-outline:before,.ion-ios-cloudy-outline:before,.ion-ios-cog:before,.ion-ios-cog-outline:before,.ion-ios-color-filter:before,.ion-ios-color-filter-outline:before,.ion-ios-color-wand:before,.ion-ios-color-wand-outline:before,.ion-ios-compose:before,.ion-ios-compose-outline:before,.ion-ios-contact:before,.ion-ios-contact-outline:before,.ion-ios-copy:before,.ion-ios-copy-outline:before,.ion-ios-crop:before,.ion-ios-crop-strong:before,.ion-ios-download:before,.ion-ios-download-outline:before,.ion-ios-drag:before,.ion-ios-email:before,.ion-ios-email-outline:before,.ion-ios-eye:before,.ion-ios-eye-outline:before,.ion-ios-fastforward:before,.ion-ios-fastforward-outline:before,.ion-ios-filing:before,.ion-ios-filing-outline:before,.ion-ios-film:before,.ion-ios-film-outline:before,.ion-ios-flag:before,.ion-ios-flag-outline:before,.ion-ios-flame:before,.ion-ios-flame-outline:before,.ion-ios-flask:before,.ion-ios-flask-outline:before,.ion-ios-flower:before,.ion-ios-flower-outline:before,.ion-ios-folder:before,.ion-ios-folder-outline:before,.ion-ios-football:before,.ion-ios-football-outline:before,.ion-ios-game-controller-a:before,.ion-ios-game-controller-a-outline:before,.ion-ios-game-controller-b:before,.ion-ios-game-controller-b-outline:before,.ion-ios-gear:before,.ion-ios-gear-outline:before,.ion-ios-glasses:before,.ion-ios-glasses-outline:before,.ion-ios-grid-view:before,.ion-ios-grid-view-outline:before,.ion-ios-heart:before,.ion-ios-heart-outline:before,.ion-ios-help:before,.ion-ios-help-empty:before,.ion-ios-help-outline:before,.ion-ios-home:before,.ion-ios-home-outline:before,.ion-ios-infinite:before,.ion-ios-infinite-outline:before,.ion-ios-information:before,.ion-ios-information-empty:before,.ion-ios-information-outline:before,.ion-ios-ionic-outline:before,.ion-ios-keypad:before,.ion-ios-keypad-outline:before,.ion-ios-lightbulb:before,.ion-ios-lightbulb-outline:before,.ion-ios-list:before,.ion-ios-list-outline:before,.ion-ios-location:before,.ion-ios-location-outline:before,.ion-ios-locked:before,.ion-ios-locked-outline:before,.ion-ios-loop:before,.ion-ios-loop-strong:before,.ion-ios-medical:before,.ion-ios-medical-outline:before,.ion-ios-medkit:before,.ion-ios-medkit-outline:before,.ion-ios-mic:before,.ion-ios-mic-off:before,.ion-ios-mic-outline:before,.ion-ios-minus:before,.ion-ios-minus-empty:before,.ion-ios-minus-outline:before,.ion-ios-monitor:before,.ion-ios-monitor-outline:before,.ion-ios-moon:before,.ion-ios-moon-outline:before,.ion-ios-more:before,.ion-ios-more-outline:before,.ion-ios-musical-note:before,.ion-ios-musical-notes:before,.ion-ios-navigate:before,.ion-ios-navigate-outline:before,.ion-ios-nutrition:before,.ion-ios-nutrition-outline:before,.ion-ios-paper:before,.ion-ios-paper-outline:before,.ion-ios-paperplane:before,.ion-ios-paperplane-outline:before,.ion-ios-partlysunny:before,.ion-ios-partlysunny-outline:before,.ion-ios-pause:before,.ion-ios-pause-outline:before,.ion-ios-paw:before,.ion-ios-paw-outline:before,.ion-ios-people:before,.ion-ios-people-outline:before,.ion-ios-person:before,.ion-ios-person-outline:before,.ion-ios-personadd:before,.ion-ios-personadd-outline:before,.ion-ios-photos:before,.ion-ios-photos-outline:before,.ion-ios-pie:before,.ion-ios-pie-outline:before,.ion-ios-pint:before,.ion-ios-pint-outline:before,.ion-ios-play:before,.ion-ios-play-outline:before,.ion-ios-plus:before,.ion-ios-plus-empty:before,.ion-ios-plus-outline:before,.ion-ios-pricetag:before,.ion-ios-pricetag-outline:before,.ion-ios-pricetags:before,.ion-ios-pricetags-outline:before,.ion-ios-printer:before,.ion-ios-printer-outline:before,.ion-ios-pulse:before,.ion-ios-pulse-strong:before,.ion-ios-rainy:before,.ion-ios-rainy-outline:before,.ion-ios-recording:before,.ion-ios-recording-outline:before,.ion-ios-redo:before,.ion-ios-redo-outline:before,.ion-ios-refresh:before,.ion-ios-refresh-empty:before,.ion-ios-refresh-outline:before,.ion-ios-reload:before,.ion-ios-reverse-camera:before,.ion-ios-reverse-camera-outline:before,.ion-ios-rewind:before,.ion-ios-rewind-outline:before,.ion-ios-rose:before,.ion-ios-rose-outline:before,.ion-ios-search:before,.ion-ios-search-strong:before,.ion-ios-settings:before,.ion-ios-settings-strong:before,.ion-ios-shuffle:before,.ion-ios-shuffle-strong:before,.ion-ios-skipbackward:before,.ion-ios-skipbackward-outline:before,.ion-ios-skipforward:before,.ion-ios-skipforward-outline:before,.ion-ios-snowy:before,.ion-ios-speedometer:before,.ion-ios-speedometer-outline:before,.ion-ios-star:before,.ion-ios-star-half:before,.ion-ios-star-outline:before,.ion-ios-stopwatch:before,.ion-ios-stopwatch-outline:before,.ion-ios-sunny:before,.ion-ios-sunny-outline:before,.ion-ios-telephone:before,.ion-ios-telephone-outline:before,.ion-ios-tennisball:before,.ion-ios-tennisball-outline:before,.ion-ios-thunderstorm:before,.ion-ios-thunderstorm-outline:before,.ion-ios-time:before,.ion-ios-time-outline:before,.ion-ios-timer:before,.ion-ios-timer-outline:before,.ion-ios-toggle:before,.ion-ios-toggle-outline:before,.ion-ios-trash:before,.ion-ios-trash-outline:before,.ion-ios-undo:before,.ion-ios-undo-outline:before,.ion-ios-unlocked:before,.ion-ios-unlocked-outline:before,.ion-ios-upload:before,.ion-ios-upload-outline:before,.ion-ios-videocam:before,.ion-ios-videocam-outline:before,.ion-ios-volume-high:before,.ion-ios-volume-low:before,.ion-ios-wineglass:before,.ion-ios-wineglass-outline:before,.ion-ios-world:before,.ion-ios-world-outline:before,.ion-ipad:before,.ion-iphone:before,.ion-ipod:before,.ion-jet:before,.ion-key:before,.ion-knife:before,.ion-laptop:before,.ion-leaf:before,.ion-levels:before,.ion-lightbulb:before,.ion-link:before,.ion-load-a:before,.ion-load-b:before,.ion-load-c:before,.ion-load-d:before,.ion-location:before,.ion-lock-combination:before,.ion-locked:before,.ion-log-in:before,.ion-log-out:before,.ion-loop:before,.ion-magnet:before,.ion-male:before,.ion-man:before,.ion-map:before,.ion-medkit:before,.ion-merge:before,.ion-mic-a:before,.ion-mic-b:before,.ion-mic-c:before,.ion-minus:before,.ion-minus-circled:before,.ion-minus-round:before,.ion-model-s:before,.ion-monitor:before,.ion-more:before,.ion-mouse:before,.ion-music-note:before,.ion-navicon:before,.ion-navicon-round:before,.ion-navigate:before,.ion-network:before,.ion-no-smoking:before,.ion-nuclear:before,.ion-outlet:before,.ion-paintbrush:before,.ion-paintbucket:before,.ion-paper-airplane:before,.ion-paperclip:before,.ion-pause:before,.ion-person:before,.ion-person-add:before,.ion-person-stalker:before,.ion-pie-graph:before,.ion-pin:before,.ion-pinpoint:before,.ion-pizza:before,.ion-plane:before,.ion-planet:before,.ion-play:before,.ion-playstation:before,.ion-plus:before,.ion-plus-circled:before,.ion-plus-round:before,.ion-podium:before,.ion-pound:before,.ion-power:before,.ion-pricetag:before,.ion-pricetags:before,.ion-printer:before,.ion-pull-request:before,.ion-qr-scanner:before,.ion-quote:before,.ion-radio-waves:before,.ion-record:before,.ion-refresh:before,.ion-reply:before,.ion-reply-all:before,.ion-ribbon-a:before,.ion-ribbon-b:before,.ion-sad:before,.ion-sad-outline:before,.ion-scissors:before,.ion-search:before,.ion-settings:before,.ion-share:before,.ion-shuffle:before,.ion-skip-backward:before,.ion-skip-forward:before,.ion-social-android:before,.ion-social-android-outline:before,.ion-social-angular:before,.ion-social-angular-outline:before,.ion-social-apple:before,.ion-social-apple-outline:before,.ion-social-bitcoin:before,.ion-social-bitcoin-outline:before,.ion-social-buffer:before,.ion-social-buffer-outline:before,.ion-social-chrome:before,.ion-social-chrome-outline:before,.ion-social-codepen:before,.ion-social-codepen-outline:before,.ion-social-css3:before,.ion-social-css3-outline:before,.ion-social-designernews:before,.ion-social-designernews-outline:before,.ion-social-dribbble:before,.ion-social-dribbble-outline:before,.ion-social-dropbox:before,.ion-social-dropbox-outline:before,.ion-social-euro:before,.ion-social-euro-outline:before,.ion-social-facebook:before,.ion-social-facebook-outline:before,.ion-social-foursquare:before,.ion-social-foursquare-outline:before,.ion-social-freebsd-devil:before,.ion-social-github:before,.ion-social-github-outline:before,.ion-social-google:before,.ion-social-google-outline:before,.ion-social-googleplus:before,.ion-social-googleplus-outline:before,.ion-social-hackernews:before,.ion-social-hackernews-outline:before,.ion-social-html5:before,.ion-social-html5-outline:before,.ion-social-instagram:before,.ion-social-instagram-outline:before,.ion-social-javascript:before,.ion-social-javascript-outline:before,.ion-social-linkedin:before,.ion-social-linkedin-outline:before,.ion-social-markdown:before,.ion-social-nodejs:before,.ion-social-octocat:before,.ion-social-pinterest:before,.ion-social-pinterest-outline:before,.ion-social-python:before,.ion-social-reddit:before,.ion-social-reddit-outline:before,.ion-social-rss:before,.ion-social-rss-outline:before,.ion-social-sass:before,.ion-social-skype:before,.ion-social-skype-outline:before,.ion-social-snapchat:before,.ion-social-snapchat-outline:before,.ion-social-tumblr:before,.ion-social-tumblr-outline:before,.ion-social-tux:before,.ion-social-twitch:before,.ion-social-twitch-outline:before,.ion-social-twitter:before,.ion-social-twitter-outline:before,.ion-social-usd:before,.ion-social-usd-outline:before,.ion-social-vimeo:before,.ion-social-vimeo-outline:before,.ion-social-whatsapp:before,.ion-social-whatsapp-outline:before,.ion-social-windows:before,.ion-social-windows-outline:before,.ion-social-wordpress:before,.ion-social-wordpress-outline:before,.ion-social-yahoo:before,.ion-social-yahoo-outline:before,.ion-social-yen:before,.ion-social-yen-outline:before,.ion-social-youtube:before,.ion-social-youtube-outline:before,.ion-soup-can:before,.ion-soup-can-outline:before,.ion-speakerphone:before,.ion-speedometer:before,.ion-spoon:before,.ion-star:before,.ion-stats-bars:before,.ion-steam:before,.ion-stop:before,.ion-thermometer:before,.ion-thumbsdown:before,.ion-thumbsup:before,.ion-toggle:before,.ion-toggle-filled:before,.ion-transgender:before,.ion-trash-a:before,.ion-trash-b:before,.ion-trophy:before,.ion-tshirt:before,.ion-tshirt-outline:before,.ion-umbrella:before,.ion-university:before,.ion-unlocked:before,.ion-upload:before,.ion-usb:before,.ion-videocamera:before,.ion-volume-high:before,.ion-volume-low:before,.ion-volume-medium:before,.ion-volume-mute:before,.ion-wand:before,.ion-waterdrop:before,.ion-wifi:before,.ion-wineglass:before,.ion-woman:before,.ion-wrench:before,.ion-xbox:before{display:inline-block;font-family:\"Ionicons\";speak:none;font-style:normal;font-weight:normal;font-variant:normal;text-transform:none;text-rendering:auto;line-height:1;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.ion-alert:before{content:\"\\f101\"}.ion-alert-circled:before{content:\"\\f100\"}.ion-android-add:before{content:\"\\f2c7\"}.ion-android-add-circle:before{content:\"\\f359\"}.ion-android-alarm-clock:before{content:\"\\f35a\"}.ion-android-alert:before{content:\"\\f35b\"}.ion-android-apps:before{content:\"\\f35c\"}.ion-android-archive:before{content:\"\\f2c9\"}.ion-android-arrow-back:before{content:\"\\f2ca\"}.ion-android-arrow-down:before{content:\"\\f35d\"}.ion-android-arrow-dropdown:before{content:\"\\f35f\"}.ion-android-arrow-dropdown-circle:before{content:\"\\f35e\"}.ion-android-arrow-dropleft:before{content:\"\\f361\"}.ion-android-arrow-dropleft-circle:before{content:\"\\f360\"}.ion-android-arrow-dropright:before{content:\"\\f363\"}.ion-android-arrow-dropright-circle:before{content:\"\\f362\"}.ion-android-arrow-dropup:before{content:\"\\f365\"}.ion-android-arrow-dropup-circle:before{content:\"\\f364\"}.ion-android-arrow-forward:before{content:\"\\f30f\"}.ion-android-arrow-up:before{content:\"\\f366\"}.ion-android-attach:before{content:\"\\f367\"}.ion-android-bar:before{content:\"\\f368\"}.ion-android-bicycle:before{content:\"\\f369\"}.ion-android-boat:before{content:\"\\f36a\"}.ion-android-bookmark:before{content:\"\\f36b\"}.ion-android-bulb:before{content:\"\\f36c\"}.ion-android-bus:before{content:\"\\f36d\"}.ion-android-calendar:before{content:\"\\f2d1\"}.ion-android-call:before{content:\"\\f2d2\"}.ion-android-camera:before{content:\"\\f2d3\"}.ion-android-cancel:before{content:\"\\f36e\"}.ion-android-car:before{content:\"\\f36f\"}.ion-android-cart:before{content:\"\\f370\"}.ion-android-chat:before{content:\"\\f2d4\"}.ion-android-checkbox:before{content:\"\\f374\"}.ion-android-checkbox-blank:before{content:\"\\f371\"}.ion-android-checkbox-outline:before{content:\"\\f373\"}.ion-android-checkbox-outline-blank:before{content:\"\\f372\"}.ion-android-checkmark-circle:before{content:\"\\f375\"}.ion-android-clipboard:before{content:\"\\f376\"}.ion-android-close:before{content:\"\\f2d7\"}.ion-android-cloud:before{content:\"\\f37a\"}.ion-android-cloud-circle:before{content:\"\\f377\"}.ion-android-cloud-done:before{content:\"\\f378\"}.ion-android-cloud-outline:before{content:\"\\f379\"}.ion-android-color-palette:before{content:\"\\f37b\"}.ion-android-compass:before{content:\"\\f37c\"}.ion-android-contact:before{content:\"\\f2d8\"}.ion-android-contacts:before{content:\"\\f2d9\"}.ion-android-contract:before{content:\"\\f37d\"}.ion-android-create:before{content:\"\\f37e\"}.ion-android-delete:before{content:\"\\f37f\"}.ion-android-desktop:before{content:\"\\f380\"}.ion-android-document:before{content:\"\\f381\"}.ion-android-done:before{content:\"\\f383\"}.ion-android-done-all:before{content:\"\\f382\"}.ion-android-download:before{content:\"\\f2dd\"}.ion-android-drafts:before{content:\"\\f384\"}.ion-android-exit:before{content:\"\\f385\"}.ion-android-expand:before{content:\"\\f386\"}.ion-android-favorite:before{content:\"\\f388\"}.ion-android-favorite-outline:before{content:\"\\f387\"}.ion-android-film:before{content:\"\\f389\"}.ion-android-folder:before{content:\"\\f2e0\"}.ion-android-folder-open:before{content:\"\\f38a\"}.ion-android-funnel:before{content:\"\\f38b\"}.ion-android-globe:before{content:\"\\f38c\"}.ion-android-hand:before{content:\"\\f2e3\"}.ion-android-hangout:before{content:\"\\f38d\"}.ion-android-happy:before{content:\"\\f38e\"}.ion-android-home:before{content:\"\\f38f\"}.ion-android-image:before{content:\"\\f2e4\"}.ion-android-laptop:before{content:\"\\f390\"}.ion-android-list:before{content:\"\\f391\"}.ion-android-locate:before{content:\"\\f2e9\"}.ion-android-lock:before{content:\"\\f392\"}.ion-android-mail:before{content:\"\\f2eb\"}.ion-android-map:before{content:\"\\f393\"}.ion-android-menu:before{content:\"\\f394\"}.ion-android-microphone:before{content:\"\\f2ec\"}.ion-android-microphone-off:before{content:\"\\f395\"}.ion-android-more-horizontal:before{content:\"\\f396\"}.ion-android-more-vertical:before{content:\"\\f397\"}.ion-android-navigate:before{content:\"\\f398\"}.ion-android-notifications:before{content:\"\\f39b\"}.ion-android-notifications-none:before{content:\"\\f399\"}.ion-android-notifications-off:before{content:\"\\f39a\"}.ion-android-open:before{content:\"\\f39c\"}.ion-android-options:before{content:\"\\f39d\"}.ion-android-people:before{content:\"\\f39e\"}.ion-android-person:before{content:\"\\f3a0\"}.ion-android-person-add:before{content:\"\\f39f\"}.ion-android-phone-landscape:before{content:\"\\f3a1\"}.ion-android-phone-portrait:before{content:\"\\f3a2\"}.ion-android-pin:before{content:\"\\f3a3\"}.ion-android-plane:before{content:\"\\f3a4\"}.ion-android-playstore:before{content:\"\\f2f0\"}.ion-android-print:before{content:\"\\f3a5\"}.ion-android-radio-button-off:before{content:\"\\f3a6\"}.ion-android-radio-button-on:before{content:\"\\f3a7\"}.ion-android-refresh:before{content:\"\\f3a8\"}.ion-android-remove:before{content:\"\\f2f4\"}.ion-android-remove-circle:before{content:\"\\f3a9\"}.ion-android-restaurant:before{content:\"\\f3aa\"}.ion-android-sad:before{content:\"\\f3ab\"}.ion-android-search:before{content:\"\\f2f5\"}.ion-android-send:before{content:\"\\f2f6\"}.ion-android-settings:before{content:\"\\f2f7\"}.ion-android-share:before{content:\"\\f2f8\"}.ion-android-share-alt:before{content:\"\\f3ac\"}.ion-android-star:before{content:\"\\f2fc\"}.ion-android-star-half:before{content:\"\\f3ad\"}.ion-android-star-outline:before{content:\"\\f3ae\"}.ion-android-stopwatch:before{content:\"\\f2fd\"}.ion-android-subway:before{content:\"\\f3af\"}.ion-android-sunny:before{content:\"\\f3b0\"}.ion-android-sync:before{content:\"\\f3b1\"}.ion-android-textsms:before{content:\"\\f3b2\"}.ion-android-time:before{content:\"\\f3b3\"}.ion-android-train:before{content:\"\\f3b4\"}.ion-android-unlock:before{content:\"\\f3b5\"}.ion-android-upload:before{content:\"\\f3b6\"}.ion-android-volume-down:before{content:\"\\f3b7\"}.ion-android-volume-mute:before{content:\"\\f3b8\"}.ion-android-volume-off:before{content:\"\\f3b9\"}.ion-android-volume-up:before{content:\"\\f3ba\"}.ion-android-walk:before{content:\"\\f3bb\"}.ion-android-warning:before{content:\"\\f3bc\"}.ion-android-watch:before{content:\"\\f3bd\"}.ion-android-wifi:before{content:\"\\f305\"}.ion-aperture:before{content:\"\\f313\"}.ion-archive:before{content:\"\\f102\"}.ion-arrow-down-a:before{content:\"\\f103\"}.ion-arrow-down-b:before{content:\"\\f104\"}.ion-arrow-down-c:before{content:\"\\f105\"}.ion-arrow-expand:before{content:\"\\f25e\"}.ion-arrow-graph-down-left:before{content:\"\\f25f\"}.ion-arrow-graph-down-right:before{content:\"\\f260\"}.ion-arrow-graph-up-left:before{content:\"\\f261\"}.ion-arrow-graph-up-right:before{content:\"\\f262\"}.ion-arrow-left-a:before{content:\"\\f106\"}.ion-arrow-left-b:before{content:\"\\f107\"}.ion-arrow-left-c:before{content:\"\\f108\"}.ion-arrow-move:before{content:\"\\f263\"}.ion-arrow-resize:before{content:\"\\f264\"}.ion-arrow-return-left:before{content:\"\\f265\"}.ion-arrow-return-right:before{content:\"\\f266\"}.ion-arrow-right-a:before{content:\"\\f109\"}.ion-arrow-right-b:before{content:\"\\f10a\"}.ion-arrow-right-c:before{content:\"\\f10b\"}.ion-arrow-shrink:before{content:\"\\f267\"}.ion-arrow-swap:before{content:\"\\f268\"}.ion-arrow-up-a:before{content:\"\\f10c\"}.ion-arrow-up-b:before{content:\"\\f10d\"}.ion-arrow-up-c:before{content:\"\\f10e\"}.ion-asterisk:before{content:\"\\f314\"}.ion-at:before{content:\"\\f10f\"}.ion-backspace:before{content:\"\\f3bf\"}.ion-backspace-outline:before{content:\"\\f3be\"}.ion-bag:before{content:\"\\f110\"}.ion-battery-charging:before{content:\"\\f111\"}.ion-battery-empty:before{content:\"\\f112\"}.ion-battery-full:before{content:\"\\f113\"}.ion-battery-half:before{content:\"\\f114\"}.ion-battery-low:before{content:\"\\f115\"}.ion-beaker:before{content:\"\\f269\"}.ion-beer:before{content:\"\\f26a\"}.ion-bluetooth:before{content:\"\\f116\"}.ion-bonfire:before{content:\"\\f315\"}.ion-bookmark:before{content:\"\\f26b\"}.ion-bowtie:before{content:\"\\f3c0\"}.ion-briefcase:before{content:\"\\f26c\"}.ion-bug:before{content:\"\\f2be\"}.ion-calculator:before{content:\"\\f26d\"}.ion-calendar:before{content:\"\\f117\"}.ion-camera:before{content:\"\\f118\"}.ion-card:before{content:\"\\f119\"}.ion-cash:before{content:\"\\f316\"}.ion-chatbox:before{content:\"\\f11b\"}.ion-chatbox-working:before{content:\"\\f11a\"}.ion-chatboxes:before{content:\"\\f11c\"}.ion-chatbubble:before{content:\"\\f11e\"}.ion-chatbubble-working:before{content:\"\\f11d\"}.ion-chatbubbles:before{content:\"\\f11f\"}.ion-checkmark:before{content:\"\\f122\"}.ion-checkmark-circled:before{content:\"\\f120\"}.ion-checkmark-round:before{content:\"\\f121\"}.ion-chevron-down:before{content:\"\\f123\"}.ion-chevron-left:before{content:\"\\f124\"}.ion-chevron-right:before{content:\"\\f125\"}.ion-chevron-up:before{content:\"\\f126\"}.ion-clipboard:before{content:\"\\f127\"}.ion-clock:before{content:\"\\f26e\"}.ion-close:before{content:\"\\f12a\"}.ion-close-circled:before{content:\"\\f128\"}.ion-close-round:before{content:\"\\f129\"}.ion-closed-captioning:before{content:\"\\f317\"}.ion-cloud:before{content:\"\\f12b\"}.ion-code:before{content:\"\\f271\"}.ion-code-download:before{content:\"\\f26f\"}.ion-code-working:before{content:\"\\f270\"}.ion-coffee:before{content:\"\\f272\"}.ion-compass:before{content:\"\\f273\"}.ion-compose:before{content:\"\\f12c\"}.ion-connection-bars:before{content:\"\\f274\"}.ion-contrast:before{content:\"\\f275\"}.ion-crop:before{content:\"\\f3c1\"}.ion-cube:before{content:\"\\f318\"}.ion-disc:before{content:\"\\f12d\"}.ion-document:before{content:\"\\f12f\"}.ion-document-text:before{content:\"\\f12e\"}.ion-drag:before{content:\"\\f130\"}.ion-earth:before{content:\"\\f276\"}.ion-easel:before{content:\"\\f3c2\"}.ion-edit:before{content:\"\\f2bf\"}.ion-egg:before{content:\"\\f277\"}.ion-eject:before{content:\"\\f131\"}.ion-email:before{content:\"\\f132\"}.ion-email-unread:before{content:\"\\f3c3\"}.ion-erlenmeyer-flask:before{content:\"\\f3c5\"}.ion-erlenmeyer-flask-bubbles:before{content:\"\\f3c4\"}.ion-eye:before{content:\"\\f133\"}.ion-eye-disabled:before{content:\"\\f306\"}.ion-female:before{content:\"\\f278\"}.ion-filing:before{content:\"\\f134\"}.ion-film-marker:before{content:\"\\f135\"}.ion-fireball:before{content:\"\\f319\"}.ion-flag:before{content:\"\\f279\"}.ion-flame:before{content:\"\\f31a\"}.ion-flash:before{content:\"\\f137\"}.ion-flash-off:before{content:\"\\f136\"}.ion-folder:before{content:\"\\f139\"}.ion-fork:before{content:\"\\f27a\"}.ion-fork-repo:before{content:\"\\f2c0\"}.ion-forward:before{content:\"\\f13a\"}.ion-funnel:before{content:\"\\f31b\"}.ion-gear-a:before{content:\"\\f13d\"}.ion-gear-b:before{content:\"\\f13e\"}.ion-grid:before{content:\"\\f13f\"}.ion-hammer:before{content:\"\\f27b\"}.ion-happy:before{content:\"\\f31c\"}.ion-happy-outline:before{content:\"\\f3c6\"}.ion-headphone:before{content:\"\\f140\"}.ion-heart:before{content:\"\\f141\"}.ion-heart-broken:before{content:\"\\f31d\"}.ion-help:before{content:\"\\f143\"}.ion-help-buoy:before{content:\"\\f27c\"}.ion-help-circled:before{content:\"\\f142\"}.ion-home:before{content:\"\\f144\"}.ion-icecream:before{content:\"\\f27d\"}.ion-image:before{content:\"\\f147\"}.ion-images:before{content:\"\\f148\"}.ion-information:before{content:\"\\f14a\"}.ion-information-circled:before{content:\"\\f149\"}.ion-ionic:before{content:\"\\f14b\"}.ion-ios-alarm:before{content:\"\\f3c8\"}.ion-ios-alarm-outline:before{content:\"\\f3c7\"}.ion-ios-albums:before{content:\"\\f3ca\"}.ion-ios-albums-outline:before{content:\"\\f3c9\"}.ion-ios-americanfootball:before{content:\"\\f3cc\"}.ion-ios-americanfootball-outline:before{content:\"\\f3cb\"}.ion-ios-analytics:before{content:\"\\f3ce\"}.ion-ios-analytics-outline:before{content:\"\\f3cd\"}.ion-ios-arrow-back:before{content:\"\\f3cf\"}.ion-ios-arrow-down:before{content:\"\\f3d0\"}.ion-ios-arrow-forward:before{content:\"\\f3d1\"}.ion-ios-arrow-left:before{content:\"\\f3d2\"}.ion-ios-arrow-right:before{content:\"\\f3d3\"}.ion-ios-arrow-thin-down:before{content:\"\\f3d4\"}.ion-ios-arrow-thin-left:before{content:\"\\f3d5\"}.ion-ios-arrow-thin-right:before{content:\"\\f3d6\"}.ion-ios-arrow-thin-up:before{content:\"\\f3d7\"}.ion-ios-arrow-up:before{content:\"\\f3d8\"}.ion-ios-at:before{content:\"\\f3da\"}.ion-ios-at-outline:before{content:\"\\f3d9\"}.ion-ios-barcode:before{content:\"\\f3dc\"}.ion-ios-barcode-outline:before{content:\"\\f3db\"}.ion-ios-baseball:before{content:\"\\f3de\"}.ion-ios-baseball-outline:before{content:\"\\f3dd\"}.ion-ios-basketball:before{content:\"\\f3e0\"}.ion-ios-basketball-outline:before{content:\"\\f3df\"}.ion-ios-bell:before{content:\"\\f3e2\"}.ion-ios-bell-outline:before{content:\"\\f3e1\"}.ion-ios-body:before{content:\"\\f3e4\"}.ion-ios-body-outline:before{content:\"\\f3e3\"}.ion-ios-bolt:before{content:\"\\f3e6\"}.ion-ios-bolt-outline:before{content:\"\\f3e5\"}.ion-ios-book:before{content:\"\\f3e8\"}.ion-ios-book-outline:before{content:\"\\f3e7\"}.ion-ios-bookmarks:before{content:\"\\f3ea\"}.ion-ios-bookmarks-outline:before{content:\"\\f3e9\"}.ion-ios-box:before{content:\"\\f3ec\"}.ion-ios-box-outline:before{content:\"\\f3eb\"}.ion-ios-briefcase:before{content:\"\\f3ee\"}.ion-ios-briefcase-outline:before{content:\"\\f3ed\"}.ion-ios-browsers:before{content:\"\\f3f0\"}.ion-ios-browsers-outline:before{content:\"\\f3ef\"}.ion-ios-calculator:before{content:\"\\f3f2\"}.ion-ios-calculator-outline:before{content:\"\\f3f1\"}.ion-ios-calendar:before{content:\"\\f3f4\"}.ion-ios-calendar-outline:before{content:\"\\f3f3\"}.ion-ios-camera:before{content:\"\\f3f6\"}.ion-ios-camera-outline:before{content:\"\\f3f5\"}.ion-ios-cart:before{content:\"\\f3f8\"}.ion-ios-cart-outline:before{content:\"\\f3f7\"}.ion-ios-chatboxes:before{content:\"\\f3fa\"}.ion-ios-chatboxes-outline:before{content:\"\\f3f9\"}.ion-ios-chatbubble:before{content:\"\\f3fc\"}.ion-ios-chatbubble-outline:before{content:\"\\f3fb\"}.ion-ios-checkmark:before{content:\"\\f3ff\"}.ion-ios-checkmark-empty:before{content:\"\\f3fd\"}.ion-ios-checkmark-outline:before{content:\"\\f3fe\"}.ion-ios-circle-filled:before{content:\"\\f400\"}.ion-ios-circle-outline:before{content:\"\\f401\"}.ion-ios-clock:before{content:\"\\f403\"}.ion-ios-clock-outline:before{content:\"\\f402\"}.ion-ios-close:before{content:\"\\f406\"}.ion-ios-close-empty:before{content:\"\\f404\"}.ion-ios-close-outline:before{content:\"\\f405\"}.ion-ios-cloud:before{content:\"\\f40c\"}.ion-ios-cloud-download:before{content:\"\\f408\"}.ion-ios-cloud-download-outline:before{content:\"\\f407\"}.ion-ios-cloud-outline:before{content:\"\\f409\"}.ion-ios-cloud-upload:before{content:\"\\f40b\"}.ion-ios-cloud-upload-outline:before{content:\"\\f40a\"}.ion-ios-cloudy:before{content:\"\\f410\"}.ion-ios-cloudy-night:before{content:\"\\f40e\"}.ion-ios-cloudy-night-outline:before{content:\"\\f40d\"}.ion-ios-cloudy-outline:before{content:\"\\f40f\"}.ion-ios-cog:before{content:\"\\f412\"}.ion-ios-cog-outline:before{content:\"\\f411\"}.ion-ios-color-filter:before{content:\"\\f414\"}.ion-ios-color-filter-outline:before{content:\"\\f413\"}.ion-ios-color-wand:before{content:\"\\f416\"}.ion-ios-color-wand-outline:before{content:\"\\f415\"}.ion-ios-compose:before{content:\"\\f418\"}.ion-ios-compose-outline:before{content:\"\\f417\"}.ion-ios-contact:before{content:\"\\f41a\"}.ion-ios-contact-outline:before{content:\"\\f419\"}.ion-ios-copy:before{content:\"\\f41c\"}.ion-ios-copy-outline:before{content:\"\\f41b\"}.ion-ios-crop:before{content:\"\\f41e\"}.ion-ios-crop-strong:before{content:\"\\f41d\"}.ion-ios-download:before{content:\"\\f420\"}.ion-ios-download-outline:before{content:\"\\f41f\"}.ion-ios-drag:before{content:\"\\f421\"}.ion-ios-email:before{content:\"\\f423\"}.ion-ios-email-outline:before{content:\"\\f422\"}.ion-ios-eye:before{content:\"\\f425\"}.ion-ios-eye-outline:before{content:\"\\f424\"}.ion-ios-fastforward:before{content:\"\\f427\"}.ion-ios-fastforward-outline:before{content:\"\\f426\"}.ion-ios-filing:before{content:\"\\f429\"}.ion-ios-filing-outline:before{content:\"\\f428\"}.ion-ios-film:before{content:\"\\f42b\"}.ion-ios-film-outline:before{content:\"\\f42a\"}.ion-ios-flag:before{content:\"\\f42d\"}.ion-ios-flag-outline:before{content:\"\\f42c\"}.ion-ios-flame:before{content:\"\\f42f\"}.ion-ios-flame-outline:before{content:\"\\f42e\"}.ion-ios-flask:before{content:\"\\f431\"}.ion-ios-flask-outline:before{content:\"\\f430\"}.ion-ios-flower:before{content:\"\\f433\"}.ion-ios-flower-outline:before{content:\"\\f432\"}.ion-ios-folder:before{content:\"\\f435\"}.ion-ios-folder-outline:before{content:\"\\f434\"}.ion-ios-football:before{content:\"\\f437\"}.ion-ios-football-outline:before{content:\"\\f436\"}.ion-ios-game-controller-a:before{content:\"\\f439\"}.ion-ios-game-controller-a-outline:before{content:\"\\f438\"}.ion-ios-game-controller-b:before{content:\"\\f43b\"}.ion-ios-game-controller-b-outline:before{content:\"\\f43a\"}.ion-ios-gear:before{content:\"\\f43d\"}.ion-ios-gear-outline:before{content:\"\\f43c\"}.ion-ios-glasses:before{content:\"\\f43f\"}.ion-ios-glasses-outline:before{content:\"\\f43e\"}.ion-ios-grid-view:before{content:\"\\f441\"}.ion-ios-grid-view-outline:before{content:\"\\f440\"}.ion-ios-heart:before{content:\"\\f443\"}.ion-ios-heart-outline:before{content:\"\\f442\"}.ion-ios-help:before{content:\"\\f446\"}.ion-ios-help-empty:before{content:\"\\f444\"}.ion-ios-help-outline:before{content:\"\\f445\"}.ion-ios-home:before{content:\"\\f448\"}.ion-ios-home-outline:before{content:\"\\f447\"}.ion-ios-infinite:before{content:\"\\f44a\"}.ion-ios-infinite-outline:before{content:\"\\f449\"}.ion-ios-information:before{content:\"\\f44d\"}.ion-ios-information-empty:before{content:\"\\f44b\"}.ion-ios-information-outline:before{content:\"\\f44c\"}.ion-ios-ionic-outline:before{content:\"\\f44e\"}.ion-ios-keypad:before{content:\"\\f450\"}.ion-ios-keypad-outline:before{content:\"\\f44f\"}.ion-ios-lightbulb:before{content:\"\\f452\"}.ion-ios-lightbulb-outline:before{content:\"\\f451\"}.ion-ios-list:before{content:\"\\f454\"}.ion-ios-list-outline:before{content:\"\\f453\"}.ion-ios-location:before{content:\"\\f456\"}.ion-ios-location-outline:before{content:\"\\f455\"}.ion-ios-locked:before{content:\"\\f458\"}.ion-ios-locked-outline:before{content:\"\\f457\"}.ion-ios-loop:before{content:\"\\f45a\"}.ion-ios-loop-strong:before{content:\"\\f459\"}.ion-ios-medical:before{content:\"\\f45c\"}.ion-ios-medical-outline:before{content:\"\\f45b\"}.ion-ios-medkit:before{content:\"\\f45e\"}.ion-ios-medkit-outline:before{content:\"\\f45d\"}.ion-ios-mic:before{content:\"\\f461\"}.ion-ios-mic-off:before{content:\"\\f45f\"}.ion-ios-mic-outline:before{content:\"\\f460\"}.ion-ios-minus:before{content:\"\\f464\"}.ion-ios-minus-empty:before{content:\"\\f462\"}.ion-ios-minus-outline:before{content:\"\\f463\"}.ion-ios-monitor:before{content:\"\\f466\"}.ion-ios-monitor-outline:before{content:\"\\f465\"}.ion-ios-moon:before{content:\"\\f468\"}.ion-ios-moon-outline:before{content:\"\\f467\"}.ion-ios-more:before{content:\"\\f46a\"}.ion-ios-more-outline:before{content:\"\\f469\"}.ion-ios-musical-note:before{content:\"\\f46b\"}.ion-ios-musical-notes:before{content:\"\\f46c\"}.ion-ios-navigate:before{content:\"\\f46e\"}.ion-ios-navigate-outline:before{content:\"\\f46d\"}.ion-ios-nutrition:before{content:\"\\f470\"}.ion-ios-nutrition-outline:before{content:\"\\f46f\"}.ion-ios-paper:before{content:\"\\f472\"}.ion-ios-paper-outline:before{content:\"\\f471\"}.ion-ios-paperplane:before{content:\"\\f474\"}.ion-ios-paperplane-outline:before{content:\"\\f473\"}.ion-ios-partlysunny:before{content:\"\\f476\"}.ion-ios-partlysunny-outline:before{content:\"\\f475\"}.ion-ios-pause:before{content:\"\\f478\"}.ion-ios-pause-outline:before{content:\"\\f477\"}.ion-ios-paw:before{content:\"\\f47a\"}.ion-ios-paw-outline:before{content:\"\\f479\"}.ion-ios-people:before{content:\"\\f47c\"}.ion-ios-people-outline:before{content:\"\\f47b\"}.ion-ios-person:before{content:\"\\f47e\"}.ion-ios-person-outline:before{content:\"\\f47d\"}.ion-ios-personadd:before{content:\"\\f480\"}.ion-ios-personadd-outline:before{content:\"\\f47f\"}.ion-ios-photos:before{content:\"\\f482\"}.ion-ios-photos-outline:before{content:\"\\f481\"}.ion-ios-pie:before{content:\"\\f484\"}.ion-ios-pie-outline:before{content:\"\\f483\"}.ion-ios-pint:before{content:\"\\f486\"}.ion-ios-pint-outline:before{content:\"\\f485\"}.ion-ios-play:before{content:\"\\f488\"}.ion-ios-play-outline:before{content:\"\\f487\"}.ion-ios-plus:before{content:\"\\f48b\"}.ion-ios-plus-empty:before{content:\"\\f489\"}.ion-ios-plus-outline:before{content:\"\\f48a\"}.ion-ios-pricetag:before{content:\"\\f48d\"}.ion-ios-pricetag-outline:before{content:\"\\f48c\"}.ion-ios-pricetags:before{content:\"\\f48f\"}.ion-ios-pricetags-outline:before{content:\"\\f48e\"}.ion-ios-printer:before{content:\"\\f491\"}.ion-ios-printer-outline:before{content:\"\\f490\"}.ion-ios-pulse:before{content:\"\\f493\"}.ion-ios-pulse-strong:before{content:\"\\f492\"}.ion-ios-rainy:before{content:\"\\f495\"}.ion-ios-rainy-outline:before{content:\"\\f494\"}.ion-ios-recording:before{content:\"\\f497\"}.ion-ios-recording-outline:before{content:\"\\f496\"}.ion-ios-redo:before{content:\"\\f499\"}.ion-ios-redo-outline:before{content:\"\\f498\"}.ion-ios-refresh:before{content:\"\\f49c\"}.ion-ios-refresh-empty:before{content:\"\\f49a\"}.ion-ios-refresh-outline:before{content:\"\\f49b\"}.ion-ios-reload:before{content:\"\\f49d\"}.ion-ios-reverse-camera:before{content:\"\\f49f\"}.ion-ios-reverse-camera-outline:before{content:\"\\f49e\"}.ion-ios-rewind:before{content:\"\\f4a1\"}.ion-ios-rewind-outline:before{content:\"\\f4a0\"}.ion-ios-rose:before{content:\"\\f4a3\"}.ion-ios-rose-outline:before{content:\"\\f4a2\"}.ion-ios-search:before{content:\"\\f4a5\"}.ion-ios-search-strong:before{content:\"\\f4a4\"}.ion-ios-settings:before{content:\"\\f4a7\"}.ion-ios-settings-strong:before{content:\"\\f4a6\"}.ion-ios-shuffle:before{content:\"\\f4a9\"}.ion-ios-shuffle-strong:before{content:\"\\f4a8\"}.ion-ios-skipbackward:before{content:\"\\f4ab\"}.ion-ios-skipbackward-outline:before{content:\"\\f4aa\"}.ion-ios-skipforward:before{content:\"\\f4ad\"}.ion-ios-skipforward-outline:before{content:\"\\f4ac\"}.ion-ios-snowy:before{content:\"\\f4ae\"}.ion-ios-speedometer:before{content:\"\\f4b0\"}.ion-ios-speedometer-outline:before{content:\"\\f4af\"}.ion-ios-star:before{content:\"\\f4b3\"}.ion-ios-star-half:before{content:\"\\f4b1\"}.ion-ios-star-outline:before{content:\"\\f4b2\"}.ion-ios-stopwatch:before{content:\"\\f4b5\"}.ion-ios-stopwatch-outline:before{content:\"\\f4b4\"}.ion-ios-sunny:before{content:\"\\f4b7\"}.ion-ios-sunny-outline:before{content:\"\\f4b6\"}.ion-ios-telephone:before{content:\"\\f4b9\"}.ion-ios-telephone-outline:before{content:\"\\f4b8\"}.ion-ios-tennisball:before{content:\"\\f4bb\"}.ion-ios-tennisball-outline:before{content:\"\\f4ba\"}.ion-ios-thunderstorm:before{content:\"\\f4bd\"}.ion-ios-thunderstorm-outline:before{content:\"\\f4bc\"}.ion-ios-time:before{content:\"\\f4bf\"}.ion-ios-time-outline:before{content:\"\\f4be\"}.ion-ios-timer:before{content:\"\\f4c1\"}.ion-ios-timer-outline:before{content:\"\\f4c0\"}.ion-ios-toggle:before{content:\"\\f4c3\"}.ion-ios-toggle-outline:before{content:\"\\f4c2\"}.ion-ios-trash:before{content:\"\\f4c5\"}.ion-ios-trash-outline:before{content:\"\\f4c4\"}.ion-ios-undo:before{content:\"\\f4c7\"}.ion-ios-undo-outline:before{content:\"\\f4c6\"}.ion-ios-unlocked:before{content:\"\\f4c9\"}.ion-ios-unlocked-outline:before{content:\"\\f4c8\"}.ion-ios-upload:before{content:\"\\f4cb\"}.ion-ios-upload-outline:before{content:\"\\f4ca\"}.ion-ios-videocam:before{content:\"\\f4cd\"}.ion-ios-videocam-outline:before{content:\"\\f4cc\"}.ion-ios-volume-high:before{content:\"\\f4ce\"}.ion-ios-volume-low:before{content:\"\\f4cf\"}.ion-ios-wineglass:before{content:\"\\f4d1\"}.ion-ios-wineglass-outline:before{content:\"\\f4d0\"}.ion-ios-world:before{content:\"\\f4d3\"}.ion-ios-world-outline:before{content:\"\\f4d2\"}.ion-ipad:before{content:\"\\f1f9\"}.ion-iphone:before{content:\"\\f1fa\"}.ion-ipod:before{content:\"\\f1fb\"}.ion-jet:before{content:\"\\f295\"}.ion-key:before{content:\"\\f296\"}.ion-knife:before{content:\"\\f297\"}.ion-laptop:before{content:\"\\f1fc\"}.ion-leaf:before{content:\"\\f1fd\"}.ion-levels:before{content:\"\\f298\"}.ion-lightbulb:before{content:\"\\f299\"}.ion-link:before{content:\"\\f1fe\"}.ion-load-a:before{content:\"\\f29a\"}.ion-load-b:before{content:\"\\f29b\"}.ion-load-c:before{content:\"\\f29c\"}.ion-load-d:before{content:\"\\f29d\"}.ion-location:before{content:\"\\f1ff\"}.ion-lock-combination:before{content:\"\\f4d4\"}.ion-locked:before{content:\"\\f200\"}.ion-log-in:before{content:\"\\f29e\"}.ion-log-out:before{content:\"\\f29f\"}.ion-loop:before{content:\"\\f201\"}.ion-magnet:before{content:\"\\f2a0\"}.ion-male:before{content:\"\\f2a1\"}.ion-man:before{content:\"\\f202\"}.ion-map:before{content:\"\\f203\"}.ion-medkit:before{content:\"\\f2a2\"}.ion-merge:before{content:\"\\f33f\"}.ion-mic-a:before{content:\"\\f204\"}.ion-mic-b:before{content:\"\\f205\"}.ion-mic-c:before{content:\"\\f206\"}.ion-minus:before{content:\"\\f209\"}.ion-minus-circled:before{content:\"\\f207\"}.ion-minus-round:before{content:\"\\f208\"}.ion-model-s:before{content:\"\\f2c1\"}.ion-monitor:before{content:\"\\f20a\"}.ion-more:before{content:\"\\f20b\"}.ion-mouse:before{content:\"\\f340\"}.ion-music-note:before{content:\"\\f20c\"}.ion-navicon:before{content:\"\\f20e\"}.ion-navicon-round:before{content:\"\\f20d\"}.ion-navigate:before{content:\"\\f2a3\"}.ion-network:before{content:\"\\f341\"}.ion-no-smoking:before{content:\"\\f2c2\"}.ion-nuclear:before{content:\"\\f2a4\"}.ion-outlet:before{content:\"\\f342\"}.ion-paintbrush:before{content:\"\\f4d5\"}.ion-paintbucket:before{content:\"\\f4d6\"}.ion-paper-airplane:before{content:\"\\f2c3\"}.ion-paperclip:before{content:\"\\f20f\"}.ion-pause:before{content:\"\\f210\"}.ion-person:before{content:\"\\f213\"}.ion-person-add:before{content:\"\\f211\"}.ion-person-stalker:before{content:\"\\f212\"}.ion-pie-graph:before{content:\"\\f2a5\"}.ion-pin:before{content:\"\\f2a6\"}.ion-pinpoint:before{content:\"\\f2a7\"}.ion-pizza:before{content:\"\\f2a8\"}.ion-plane:before{content:\"\\f214\"}.ion-planet:before{content:\"\\f343\"}.ion-play:before{content:\"\\f215\"}.ion-playstation:before{content:\"\\f30a\"}.ion-plus:before{content:\"\\f218\"}.ion-plus-circled:before{content:\"\\f216\"}.ion-plus-round:before{content:\"\\f217\"}.ion-podium:before{content:\"\\f344\"}.ion-pound:before{content:\"\\f219\"}.ion-power:before{content:\"\\f2a9\"}.ion-pricetag:before{content:\"\\f2aa\"}.ion-pricetags:before{content:\"\\f2ab\"}.ion-printer:before{content:\"\\f21a\"}.ion-pull-request:before{content:\"\\f345\"}.ion-qr-scanner:before{content:\"\\f346\"}.ion-quote:before{content:\"\\f347\"}.ion-radio-waves:before{content:\"\\f2ac\"}.ion-record:before{content:\"\\f21b\"}.ion-refresh:before{content:\"\\f21c\"}.ion-reply:before{content:\"\\f21e\"}.ion-reply-all:before{content:\"\\f21d\"}.ion-ribbon-a:before{content:\"\\f348\"}.ion-ribbon-b:before{content:\"\\f349\"}.ion-sad:before{content:\"\\f34a\"}.ion-sad-outline:before{content:\"\\f4d7\"}.ion-scissors:before{content:\"\\f34b\"}.ion-search:before{content:\"\\f21f\"}.ion-settings:before{content:\"\\f2ad\"}.ion-share:before{content:\"\\f220\"}.ion-shuffle:before{content:\"\\f221\"}.ion-skip-backward:before{content:\"\\f222\"}.ion-skip-forward:before{content:\"\\f223\"}.ion-social-android:before{content:\"\\f225\"}.ion-social-android-outline:before{content:\"\\f224\"}.ion-social-angular:before{content:\"\\f4d9\"}.ion-social-angular-outline:before{content:\"\\f4d8\"}.ion-social-apple:before{content:\"\\f227\"}.ion-social-apple-outline:before{content:\"\\f226\"}.ion-social-bitcoin:before{content:\"\\f2af\"}.ion-social-bitcoin-outline:before{content:\"\\f2ae\"}.ion-social-buffer:before{content:\"\\f229\"}.ion-social-buffer-outline:before{content:\"\\f228\"}.ion-social-chrome:before{content:\"\\f4db\"}.ion-social-chrome-outline:before{content:\"\\f4da\"}.ion-social-codepen:before{content:\"\\f4dd\"}.ion-social-codepen-outline:before{content:\"\\f4dc\"}.ion-social-css3:before{content:\"\\f4df\"}.ion-social-css3-outline:before{content:\"\\f4de\"}.ion-social-designernews:before{content:\"\\f22b\"}.ion-social-designernews-outline:before{content:\"\\f22a\"}.ion-social-dribbble:before{content:\"\\f22d\"}.ion-social-dribbble-outline:before{content:\"\\f22c\"}.ion-social-dropbox:before{content:\"\\f22f\"}.ion-social-dropbox-outline:before{content:\"\\f22e\"}.ion-social-euro:before{content:\"\\f4e1\"}.ion-social-euro-outline:before{content:\"\\f4e0\"}.ion-social-facebook:before{content:\"\\f231\"}.ion-social-facebook-outline:before{content:\"\\f230\"}.ion-social-foursquare:before{content:\"\\f34d\"}.ion-social-foursquare-outline:before{content:\"\\f34c\"}.ion-social-freebsd-devil:before{content:\"\\f2c4\"}.ion-social-github:before{content:\"\\f233\"}.ion-social-github-outline:before{content:\"\\f232\"}.ion-social-google:before{content:\"\\f34f\"}.ion-social-google-outline:before{content:\"\\f34e\"}.ion-social-googleplus:before{content:\"\\f235\"}.ion-social-googleplus-outline:before{content:\"\\f234\"}.ion-social-hackernews:before{content:\"\\f237\"}.ion-social-hackernews-outline:before{content:\"\\f236\"}.ion-social-html5:before{content:\"\\f4e3\"}.ion-social-html5-outline:before{content:\"\\f4e2\"}.ion-social-instagram:before{content:\"\\f351\"}.ion-social-instagram-outline:before{content:\"\\f350\"}.ion-social-javascript:before{content:\"\\f4e5\"}.ion-social-javascript-outline:before{content:\"\\f4e4\"}.ion-social-linkedin:before{content:\"\\f239\"}.ion-social-linkedin-outline:before{content:\"\\f238\"}.ion-social-markdown:before{content:\"\\f4e6\"}.ion-social-nodejs:before{content:\"\\f4e7\"}.ion-social-octocat:before{content:\"\\f4e8\"}.ion-social-pinterest:before{content:\"\\f2b1\"}.ion-social-pinterest-outline:before{content:\"\\f2b0\"}.ion-social-python:before{content:\"\\f4e9\"}.ion-social-reddit:before{content:\"\\f23b\"}.ion-social-reddit-outline:before{content:\"\\f23a\"}.ion-social-rss:before{content:\"\\f23d\"}.ion-social-rss-outline:before{content:\"\\f23c\"}.ion-social-sass:before{content:\"\\f4ea\"}.ion-social-skype:before{content:\"\\f23f\"}.ion-social-skype-outline:before{content:\"\\f23e\"}.ion-social-snapchat:before{content:\"\\f4ec\"}.ion-social-snapchat-outline:before{content:\"\\f4eb\"}.ion-social-tumblr:before{content:\"\\f241\"}.ion-social-tumblr-outline:before{content:\"\\f240\"}.ion-social-tux:before{content:\"\\f2c5\"}.ion-social-twitch:before{content:\"\\f4ee\"}.ion-social-twitch-outline:before{content:\"\\f4ed\"}.ion-social-twitter:before{content:\"\\f243\"}.ion-social-twitter-outline:before{content:\"\\f242\"}.ion-social-usd:before{content:\"\\f353\"}.ion-social-usd-outline:before{content:\"\\f352\"}.ion-social-vimeo:before{content:\"\\f245\"}.ion-social-vimeo-outline:before{content:\"\\f244\"}.ion-social-whatsapp:before{content:\"\\f4f0\"}.ion-social-whatsapp-outline:before{content:\"\\f4ef\"}.ion-social-windows:before{content:\"\\f247\"}.ion-social-windows-outline:before{content:\"\\f246\"}.ion-social-wordpress:before{content:\"\\f249\"}.ion-social-wordpress-outline:before{content:\"\\f248\"}.ion-social-yahoo:before{content:\"\\f24b\"}.ion-social-yahoo-outline:before{content:\"\\f24a\"}.ion-social-yen:before{content:\"\\f4f2\"}.ion-social-yen-outline:before{content:\"\\f4f1\"}.ion-social-youtube:before{content:\"\\f24d\"}.ion-social-youtube-outline:before{content:\"\\f24c\"}.ion-soup-can:before{content:\"\\f4f4\"}.ion-soup-can-outline:before{content:\"\\f4f3\"}.ion-speakerphone:before{content:\"\\f2b2\"}.ion-speedometer:before{content:\"\\f2b3\"}.ion-spoon:before{content:\"\\f2b4\"}.ion-star:before{content:\"\\f24e\"}.ion-stats-bars:before{content:\"\\f2b5\"}.ion-steam:before{content:\"\\f30b\"}.ion-stop:before{content:\"\\f24f\"}.ion-thermometer:before{content:\"\\f2b6\"}.ion-thumbsdown:before{content:\"\\f250\"}.ion-thumbsup:before{content:\"\\f251\"}.ion-toggle:before{content:\"\\f355\"}.ion-toggle-filled:before{content:\"\\f354\"}.ion-transgender:before{content:\"\\f4f5\"}.ion-trash-a:before{content:\"\\f252\"}.ion-trash-b:before{content:\"\\f253\"}.ion-trophy:before{content:\"\\f356\"}.ion-tshirt:before{content:\"\\f4f7\"}.ion-tshirt-outline:before{content:\"\\f4f6\"}.ion-umbrella:before{content:\"\\f2b7\"}.ion-university:before{content:\"\\f357\"}.ion-unlocked:before{content:\"\\f254\"}.ion-upload:before{content:\"\\f255\"}.ion-usb:before{content:\"\\f2b8\"}.ion-videocamera:before{content:\"\\f256\"}.ion-volume-high:before{content:\"\\f257\"}.ion-volume-low:before{content:\"\\f258\"}.ion-volume-medium:before{content:\"\\f259\"}.ion-volume-mute:before{content:\"\\f25a\"}.ion-wand:before{content:\"\\f358\"}.ion-waterdrop:before{content:\"\\f25b\"}.ion-wifi:before{content:\"\\f25c\"}.ion-wineglass:before{content:\"\\f2b9\"}.ion-woman:before{content:\"\\f25d\"}.ion-wrench:before{content:\"\\f2ba\"}.ion-xbox:before{content:\"\\f30c\"}\n"

/***/ }),

/***/ "./public/repositoryParser/parser_types.ts":
/*!*************************************************!*\
  !*** ./public/repositoryParser/parser_types.ts ***!
  \*************************************************/
/*! exports provided: CommitInfo, FileInfo, LinksDataPoint, FastaLink */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CommitInfo", function() { return CommitInfo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FileInfo", function() { return FileInfo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinksDataPoint", function() { return LinksDataPoint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FastaLink", function() { return FastaLink; });
var CommitInfo = /** @class */ (function () {
    function CommitInfo() {
    }
    return CommitInfo;
}());

var FileInfo = /** @class */ (function () {
    function FileInfo() {
    }
    return FileInfo;
}());

var LinksDataPoint = /** @class */ (function () {
    function LinksDataPoint() {
        //FastaLink.data in database. Thus links data and links file have to be separate collections
        this.group1Name = "";
        this.group2Name = "";
        this.g1value = "";
        this.g2value = "";
        this.isSNP = false;
        this.isInDel = false;
        this.isDelta = false;
    }
    Object.defineProperty(LinksDataPoint.prototype, "g1chr", {
        get: function () {
            return (this.group1Name === "" ? this._g1chr : this.group1Name.concat("_").concat(this._g1chr));
        },
        set: function (value) {
            this._g1chr = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LinksDataPoint.prototype, "g2chr", {
        get: function () {
            return (this.group2Name === "" ? this._g2chr : this.group2Name.concat("_").concat(this._g2chr));
        },
        set: function (value) {
            this._g2chr = value;
        },
        enumerable: true,
        configurable: true
    });
    return LinksDataPoint;
}());

var FastaLink = /** @class */ (function () {
    function FastaLink() {
        this.isDataReversed = false;
    }
    return FastaLink;
}());



/***/ }),

/***/ "./routes/binner.ts":
/*!**************************!*\
  !*** ./routes/binner.ts ***!
  \**************************/
/*! exports provided: DataBinner */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataBinner", function() { return DataBinner; });
var MIN_BIN_SIZE = 0.0005;
var DataBinner = /** @class */ (function () {
    function DataBinner() {
    }
    DataBinner.prototype.adjustFragmentEnds = function (genomeLength, displayedChromosomes, chromosome, elementStart, elementEnd) {
        var startValue = Number(elementStart);
        var endValue = Number(elementEnd);
        var sequenceLength = -1;
        //get length of relevant fragment
        for (var i = 0; i < displayedChromosomes.length; i++) {
            if (displayedChromosomes[i][0] === chromosome) {
                sequenceLength = displayedChromosomes[i][1]; //length of chromosome to which element belongs
                break;
            }
        }
        if (sequenceLength == -1) {
            //this is likely to be caused by using mismatched files and ideally user should be warned
            return [0, 0];
        }
        var targetLength = genomeLength * MIN_BIN_SIZE;
        if (targetLength > sequenceLength) {
            //the genome element is less than 1% of total genome length, so should be coloured in its entirety
            return [0, sequenceLength];
        }
        if ((endValue - startValue) < (targetLength)) {
            //fragment is less then 1% of element length, increase the lenght of fragment
            if (endValue + targetLength / 2 <= sequenceLength && startValue - targetLength / 2 >= 0) {
                //there is enough space to increase fragment symmetrically
                startValue += -targetLength / 2; //note minus sign
                endValue += targetLength / 2;
            }
            else if (endValue + targetLength / 2 >= sequenceLength) {
                //there is not enough space to increase the end of sequence
                startValue += -(targetLength / 2 + (sequenceLength - (endValue + targetLength / 2)));
                endValue = sequenceLength;
            }
            else if (startValue - targetLength / 2 <= 0) {
                endValue += (targetLength / 2 - (startValue - targetLength / 2));
                startValue = 0;
            }
        }
        return [startValue, endValue];
    };
    DataBinner.prototype.mergeBins = function (mergedSequences, elementID, start, end, color) {
        if (mergedSequences.length === 0) {
            //special case - dislapyedSequences contains no items
            mergedSequences.push({ chr: elementID, start: start, end: end, color: color });
            return;
        }
        //because all the sequence are binned together the array doesn't need to be sorted. 
        //the possible cases are (first line is existing sequence):
        //case 1
        //    __________
        // ______
        //case 2
        //    ______
        // ______________
        //case 3 
        // ________
        //     _______
        //case 4
        // ______________
        //    ________
        //case 5
        // ______
        //         ______
        //case 6
        //         ______
        // ______
        var overlapCase = 5; //assume by default that element doesn't overlap with anything
        var i = 0;
        for (i = 0; i < mergedSequences.length; i++) {
            if (mergedSequences[i].chr === elementID) {
                if (mergedSequences[i].start <= start) {
                    //either 3 or 4 or 5
                    if (mergedSequences[i].end >= end) {
                        //case 4, new sequence is contained within this one
                        overlapCase = 4;
                        break;
                    }
                    else if (mergedSequences[i].end < start) {
                        //case 5, new sequence doesn't overlap with this one, do nothing
                        overlapCase = 5; //break is not needed as there may be other sequences with overlap with new
                    }
                    else {
                        //case 3, extend existing sequence to the end of new one and exit
                        overlapCase = 3;
                        break;
                    }
                }
                else {
                    //either 1 or 2 or 6
                    if (mergedSequences[i].end <= end) {
                        //case 2, this sequence contain existing one
                        overlapCase = 2;
                        break;
                    }
                    else if (mergedSequences[i].start >= end) {
                        //case 6, new sequence doesn't overlap with this one, do nothing
                        overlapCase = 6; //break is not needed as there may be other sequences with overlap with new
                    }
                    else {
                        //case 1, extend this sequence to the beginning of new one
                        overlapCase = 1;
                        break;
                    }
                }
            }
        }
        switch (overlapCase) {
            case 1: //extend existing to the left
                mergedSequences[i].start = start;
                break;
            case 2: //replace existing with new
                mergedSequences[i].start = start;
                mergedSequences[i].end = end;
                break;
            case 3: //extend existing to the right
                mergedSequences[i].end = end;
                break;
            case 4: //do nothing
                break;
            case 5: //add new as new fragment
                mergedSequences.push({ chr: elementID, start: start, end: end, color: color });
                break;
            case 6: //add new as new fragment
                mergedSequences.push({ chr: elementID, start: start, end: end, color: color });
                break;
        }
    };
    DataBinner.prototype.calculateDisplayedGenomeLength = function (displayedSequences) {
        var totalLength = 0;
        for (var i = 0; i < displayedSequences.length; i++) {
            totalLength += displayedSequences[i][1];
        }
        return totalLength;
    };
    return DataBinner;
}());



/***/ }),

/***/ "./src/$$_lazy_route_resource lazy recursive":
/*!**********************************************************!*\
  !*** ./src/$$_lazy_route_resource lazy namespace object ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function webpackEmptyAsyncContext(req) {
	// Here Promise.resolve().then() is used instead of new Promise() to prevent
	// uncaught exception popping up in devtools
	return Promise.resolve().then(function() {
		var e = new Error('Cannot find module "' + req + '".');
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	});
}
webpackEmptyAsyncContext.keys = function() { return []; };
webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;
module.exports = webpackEmptyAsyncContext;
webpackEmptyAsyncContext.id = "./src/$$_lazy_route_resource lazy recursive";

/***/ }),

/***/ "./src/app/app.component.css":
/*!***********************************!*\
  !*** ./src/app/app.component.css ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#root, body, html{\n  height:100%;\n  /* min-height:100%; */\n}\n\ntoolbar{\n  height: 50px; \n}\n\n#page-container{\n  position: relative;\n  min-height: 100vh;\n}\n\n#content-wrap{\n  padding-bottom: 2.5rem; \n}\n\n#footer{\n  position: absolute;\n  bottom: 0;\n  width: 100%;\n  height: 2.5rem;;\n  font-size: 2rem;\n  margin-bottom: 0;\n  /* background: grey;\n    margin-top: -70px;\n    padding: 10px;\n    height: 50px;\n    width: 100%; */\n}\n\n#footer p{\n  vertical-align: -webkit-baseline-middle;\n  padding: 2vh 0;\n  background: var(--header-footer);\n  color: var(--genomeGitWeb);\n  text-align: center;\n  border-left: solid 0.7vw var(--accent);\n  margin-bottom: 0;\n  z-index: 1;\n}\n"

/***/ }),

/***/ "./src/app/app.component.html":
/*!************************************!*\
  !*** ./src/app/app.component.html ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\n      rel=\"stylesheet\">\n<div #root [hidden]=\"!triedCookies\">\n  <div id=\"page-container\">\n    <div id=\"content-wrap\">\n      <app-toolbar #toolbar (clicked)=\"onToolarClick($event)\" (signOut)=\"onSignOut()\" (toogleEvent)=\"toogle()\">\n      </app-toolbar>\n      <sign-panel #signPanel (signedIn)=\"onSignIn()\" (clicked)=\"onPanelClick($event)\"></sign-panel>\n      <router-outlet #router (activate)=\"onActivate($event)\"></router-outlet>\n    </div>\n    <!-- <footer id=\"footer\">\n      <p>genomeGitWeb&copy; 2019</p>\n    </footer> -->\n  </div>\n</div>\n\n<p-growl></p-growl>\n"

/***/ }),

/***/ "./src/app/app.component.ts":
/*!**********************************!*\
  !*** ./src/app/app.component.ts ***!
  \**********************************/
/*! exports provided: AppComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppComponent", function() { return AppComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _user_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./user.service */ "./src/app/user.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var AppComponent = /** @class */ (function () {
    function AppComponent(userService, router) {
        this.userService = userService;
        this.router = router;
        this.title = "app";
        this.triedCookies = false;
        this.message = null;
    }
    AppComponent.prototype.onToolarClick = function (event) {
        // when the users clicks on the sign up or sign in button in the toolbar
        if (event === "signIn") {
            this.signPanel.openSignInPanel();
        }
        else if (event === "signUp") {
            this.signPanel.openSignUpPanel();
        }
    };
    AppComponent.prototype.onPanelClick = function (event) {
        if (event === "signIn") {
            this.signPanel.openSignInPanel();
        }
        else if (event === "resetpassword") {
            this.signPanel.openResetPanel();
        }
        else if (event === "forgetpassword") {
            this.signPanel.openForgetPanel();
        }
    };
    AppComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.userService.hasCookies()) {
            // if there are cookies...
            var res = this.userService.signInWithCookies(); // try to sign in using them
            var that_1 = this;
            res.subscribe(function (data) {
                // wait for the server response
                _this.triedCookies = true;
                if (data.message === "Success") {
                    // if the sign in was successfull
                    that_1.userService.setUser(data.data); // store the user information
                    // that.userService.selectedProject;
                    // console.log(that.userService.selectedProject);
                    that_1.onSignIn(); // render the interface for connected users
                    // this.biocircos.create_msgs(['Create or Select a Project']);
                }
            }, function (error) {
                // if there was an error (ex: invalid credentials), just display the normal view for non sign in users
                _this.triedCookies = true;
            });
        }
        else {
            // same shit here
            this.triedCookies = true;
        }
    };
    AppComponent.prototype.onSignIn = function () {
        this.toolbar.showUser();
        if (window.location.href.includes("/app") && window.location.href.length > 25) {
            this.router.navigateByUrl("/app");
            this.componentDisplayed.projectPanel.getProjects();
        }
        else if (window.location.href.includes("/app") && window.location.href.length < 25) {
            this.router.navigateByUrl("/app");
            this.componentDisplayed.projectPanel.getProjects();
        }
        else {
            this.router.navigateByUrl("/app");
        }
    };
    AppComponent.prototype.guest = function () {
        if (window.location.href.includes("/app")) {
            this.componentDisplayed.projectPanel.getProjects();
        }
    };
    AppComponent.prototype.onSignOut = function () {
        this.router.navigateByUrl("/");
    };
    AppComponent.prototype.onActivate = function (componentRef) {
        this.componentDisplayed = componentRef;
    };
    AppComponent.prototype.toogle = function () {
        this.componentDisplayed.toogleProjectPanel();
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])("signPanel"),
        __metadata("design:type", Object)
    ], AppComponent.prototype, "signPanel", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])("toolbar"),
        __metadata("design:type", Object)
    ], AppComponent.prototype, "toolbar", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])("router"),
        __metadata("design:type", Object)
    ], AppComponent.prototype, "routerComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])("assemblyList"),
        __metadata("design:type", Object)
    ], AppComponent.prototype, "AssemblyListComponent", void 0);
    AppComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: "app-root",
            template: __webpack_require__(/*! ./app.component.html */ "./src/app/app.component.html"),
            styles: [__webpack_require__(/*! ./app.component.css */ "./src/app/app.component.css")]
        }),
        __metadata("design:paramtypes", [_user_service__WEBPACK_IMPORTED_MODULE_2__["UserService"], _angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"]])
    ], AppComponent);
    return AppComponent;
}());



/***/ }),

/***/ "./src/app/app.module.ts":
/*!*******************************!*\
  !*** ./src/app/app.module.ts ***!
  \*******************************/
/*! exports provided: AppModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppModule", function() { return AppModule; });
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/platform-browser */ "./node_modules/@angular/platform-browser/fesm5/platform-browser.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/platform-browser/animations */ "./node_modules/@angular/platform-browser/fesm5/animations.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm5/http.js");
/* harmony import */ var _angular_http__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/http */ "./node_modules/@angular/http/fesm5/http.js");
/* harmony import */ var _user_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./user.service */ "./src/app/user.service.ts");
/* harmony import */ var _loading_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./loading.service */ "./src/app/loading.service.ts");
/* harmony import */ var _parser_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./parser.service */ "./src/app/parser.service.ts");
/* harmony import */ var ngx_cookie_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ngx-cookie-service */ "./node_modules/ngx-cookie-service/index.js");
/* harmony import */ var _app_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./app.component */ "./src/app/app.component.ts");
/* harmony import */ var _webcircos_webcircos_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./webcircos/webcircos.component */ "./src/app/webcircos/webcircos.component.ts");
/* harmony import */ var _welcome_welcome_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./welcome/welcome.component */ "./src/app/welcome/welcome.component.ts");
/* harmony import */ var _toolbar_toolbar_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./toolbar/toolbar.component */ "./src/app/toolbar/toolbar.component.ts");
/* harmony import */ var _webcircos_project_panel_project_panel_component__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./webcircos/project-panel/project-panel.component */ "./src/app/webcircos/project-panel/project-panel.component.ts");
/* harmony import */ var _webcircos_biocircos_biocircos_component__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./webcircos/biocircos/biocircos.component */ "./src/app/webcircos/biocircos/biocircos.component.ts");
/* harmony import */ var _webcircos_circos_controls_circos_controls_component__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./webcircos/circos-controls/circos-controls.component */ "./src/app/webcircos/circos-controls/circos-controls.component.ts");
/* harmony import */ var _dialog_container_share_dialog_share_dialog_component__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./dialog-container/share-dialog/share-dialog.component */ "./src/app/dialog-container/share-dialog/share-dialog.component.ts");
/* harmony import */ var _webcircos_customisation_panel_customisation_panel_component__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./webcircos/customisation-panel/customisation-panel.component */ "./src/app/webcircos/customisation-panel/customisation-panel.component.ts");
/* harmony import */ var primeng_button__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! primeng/button */ "./node_modules/primeng/button.js");
/* harmony import */ var primeng_button__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(primeng_button__WEBPACK_IMPORTED_MODULE_18__);
/* harmony import */ var primeng_sidebar__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! primeng/sidebar */ "./node_modules/primeng/sidebar.js");
/* harmony import */ var primeng_sidebar__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(primeng_sidebar__WEBPACK_IMPORTED_MODULE_19__);
/* harmony import */ var _sign_panel_sign_panel_component__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./sign-panel/sign-panel.component */ "./src/app/sign-panel/sign-panel.component.ts");
/* harmony import */ var primeng_inputtext__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! primeng/inputtext */ "./node_modules/primeng/inputtext.js");
/* harmony import */ var primeng_inputtext__WEBPACK_IMPORTED_MODULE_21___default = /*#__PURE__*/__webpack_require__.n(primeng_inputtext__WEBPACK_IMPORTED_MODULE_21__);
/* harmony import */ var primeng_password__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! primeng/password */ "./node_modules/primeng/password.js");
/* harmony import */ var primeng_password__WEBPACK_IMPORTED_MODULE_22___default = /*#__PURE__*/__webpack_require__.n(primeng_password__WEBPACK_IMPORTED_MODULE_22__);
/* harmony import */ var primeng_messages__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! primeng/messages */ "./node_modules/primeng/messages.js");
/* harmony import */ var primeng_messages__WEBPACK_IMPORTED_MODULE_23___default = /*#__PURE__*/__webpack_require__.n(primeng_messages__WEBPACK_IMPORTED_MODULE_23__);
/* harmony import */ var primeng_message__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! primeng/message */ "./node_modules/primeng/message.js");
/* harmony import */ var primeng_message__WEBPACK_IMPORTED_MODULE_24___default = /*#__PURE__*/__webpack_require__.n(primeng_message__WEBPACK_IMPORTED_MODULE_24__);
/* harmony import */ var primeng_panel__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! primeng/panel */ "./node_modules/primeng/panel.js");
/* harmony import */ var primeng_panel__WEBPACK_IMPORTED_MODULE_25___default = /*#__PURE__*/__webpack_require__.n(primeng_panel__WEBPACK_IMPORTED_MODULE_25__);
/* harmony import */ var primeng_dropdown__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! primeng/dropdown */ "./node_modules/primeng/dropdown.js");
/* harmony import */ var primeng_dropdown__WEBPACK_IMPORTED_MODULE_26___default = /*#__PURE__*/__webpack_require__.n(primeng_dropdown__WEBPACK_IMPORTED_MODULE_26__);
/* harmony import */ var primeng_dialog__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! primeng/dialog */ "./node_modules/primeng/dialog.js");
/* harmony import */ var primeng_dialog__WEBPACK_IMPORTED_MODULE_27___default = /*#__PURE__*/__webpack_require__.n(primeng_dialog__WEBPACK_IMPORTED_MODULE_27__);
/* harmony import */ var primeng_inputtextarea__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! primeng/inputtextarea */ "./node_modules/primeng/inputtextarea.js");
/* harmony import */ var primeng_inputtextarea__WEBPACK_IMPORTED_MODULE_28___default = /*#__PURE__*/__webpack_require__.n(primeng_inputtextarea__WEBPACK_IMPORTED_MODULE_28__);
/* harmony import */ var primeng_table__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! primeng/table */ "./node_modules/primeng/table.js");
/* harmony import */ var primeng_table__WEBPACK_IMPORTED_MODULE_29___default = /*#__PURE__*/__webpack_require__.n(primeng_table__WEBPACK_IMPORTED_MODULE_29__);
/* harmony import */ var primeng_fileupload__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! primeng/fileupload */ "./node_modules/primeng/fileupload.js");
/* harmony import */ var primeng_fileupload__WEBPACK_IMPORTED_MODULE_30___default = /*#__PURE__*/__webpack_require__.n(primeng_fileupload__WEBPACK_IMPORTED_MODULE_30__);
/* harmony import */ var primeng_menu__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! primeng/menu */ "./node_modules/primeng/menu.js");
/* harmony import */ var primeng_menu__WEBPACK_IMPORTED_MODULE_31___default = /*#__PURE__*/__webpack_require__.n(primeng_menu__WEBPACK_IMPORTED_MODULE_31__);
/* harmony import */ var primeng_card__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! primeng/card */ "./node_modules/primeng/card.js");
/* harmony import */ var primeng_card__WEBPACK_IMPORTED_MODULE_32___default = /*#__PURE__*/__webpack_require__.n(primeng_card__WEBPACK_IMPORTED_MODULE_32__);
/* harmony import */ var primeng_progressbar__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! primeng/progressbar */ "./node_modules/primeng/progressbar.js");
/* harmony import */ var primeng_progressbar__WEBPACK_IMPORTED_MODULE_33___default = /*#__PURE__*/__webpack_require__.n(primeng_progressbar__WEBPACK_IMPORTED_MODULE_33__);
/* harmony import */ var primeng_progressspinner__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! primeng/progressspinner */ "./node_modules/primeng/progressspinner.js");
/* harmony import */ var primeng_progressspinner__WEBPACK_IMPORTED_MODULE_34___default = /*#__PURE__*/__webpack_require__.n(primeng_progressspinner__WEBPACK_IMPORTED_MODULE_34__);
/* harmony import */ var ng2_dragula_ng2_dragula__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ng2-dragula/ng2-dragula */ "./node_modules/ng2-dragula/ng2-dragula.js");
/* harmony import */ var ng2_dragula_ng2_dragula__WEBPACK_IMPORTED_MODULE_35___default = /*#__PURE__*/__webpack_require__.n(ng2_dragula_ng2_dragula__WEBPACK_IMPORTED_MODULE_35__);
/* harmony import */ var primeng_checkbox__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! primeng/checkbox */ "./node_modules/primeng/checkbox.js");
/* harmony import */ var primeng_checkbox__WEBPACK_IMPORTED_MODULE_36___default = /*#__PURE__*/__webpack_require__.n(primeng_checkbox__WEBPACK_IMPORTED_MODULE_36__);
/* harmony import */ var angular_font_awesome__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! angular-font-awesome */ "./node_modules/angular-font-awesome/dist/angular-font-awesome.es5.js");
/* harmony import */ var primeng_confirmdialog__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! primeng/confirmdialog */ "./node_modules/primeng/confirmdialog.js");
/* harmony import */ var primeng_confirmdialog__WEBPACK_IMPORTED_MODULE_38___default = /*#__PURE__*/__webpack_require__.n(primeng_confirmdialog__WEBPACK_IMPORTED_MODULE_38__);
/* harmony import */ var primeng_api__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! primeng/api */ "./node_modules/primeng/api.js");
/* harmony import */ var primeng_api__WEBPACK_IMPORTED_MODULE_39___default = /*#__PURE__*/__webpack_require__.n(primeng_api__WEBPACK_IMPORTED_MODULE_39__);
/* harmony import */ var ng2_nouislider__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ng2-nouislider */ "./node_modules/ng2-nouislider/ng2-nouislider.es5.js");
/* harmony import */ var _angular_material_input__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! @angular/material/input */ "./node_modules/@angular/material/esm5/input.es5.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_material_button__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! @angular/material/button */ "./node_modules/@angular/material/esm5/button.es5.js");
/* harmony import */ var _angular_material_sidenav__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! @angular/material/sidenav */ "./node_modules/@angular/material/esm5/sidenav.es5.js");
/* harmony import */ var primeng_multiselect__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! primeng/multiselect */ "./node_modules/primeng/multiselect.js");
/* harmony import */ var primeng_multiselect__WEBPACK_IMPORTED_MODULE_45___default = /*#__PURE__*/__webpack_require__.n(primeng_multiselect__WEBPACK_IMPORTED_MODULE_45__);
/* harmony import */ var primeng_accordion__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! primeng/accordion */ "./node_modules/primeng/accordion.js");
/* harmony import */ var primeng_accordion__WEBPACK_IMPORTED_MODULE_46___default = /*#__PURE__*/__webpack_require__.n(primeng_accordion__WEBPACK_IMPORTED_MODULE_46__);
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm5/ngx-toastr.js");
/* harmony import */ var primeng_picklist__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! primeng/picklist */ "./node_modules/primeng/picklist.js");
/* harmony import */ var primeng_picklist__WEBPACK_IMPORTED_MODULE_48___default = /*#__PURE__*/__webpack_require__.n(primeng_picklist__WEBPACK_IMPORTED_MODULE_48__);
/* harmony import */ var primeng_growl__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! primeng/growl */ "./node_modules/primeng/growl.js");
/* harmony import */ var primeng_growl__WEBPACK_IMPORTED_MODULE_49___default = /*#__PURE__*/__webpack_require__.n(primeng_growl__WEBPACK_IMPORTED_MODULE_49__);
/* harmony import */ var primeng_radiobutton__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! primeng/radiobutton */ "./node_modules/primeng/radiobutton.js");
/* harmony import */ var primeng_radiobutton__WEBPACK_IMPORTED_MODULE_50___default = /*#__PURE__*/__webpack_require__.n(primeng_radiobutton__WEBPACK_IMPORTED_MODULE_50__);
/* harmony import */ var primeng_slider__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! primeng/slider */ "./node_modules/primeng/slider.js");
/* harmony import */ var primeng_slider__WEBPACK_IMPORTED_MODULE_51___default = /*#__PURE__*/__webpack_require__.n(primeng_slider__WEBPACK_IMPORTED_MODULE_51__);
/* harmony import */ var primeng_togglebutton__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! primeng/togglebutton */ "./node_modules/primeng/togglebutton.js");
/* harmony import */ var primeng_togglebutton__WEBPACK_IMPORTED_MODULE_52___default = /*#__PURE__*/__webpack_require__.n(primeng_togglebutton__WEBPACK_IMPORTED_MODULE_52__);
/* harmony import */ var primeng_tooltip__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! primeng/tooltip */ "./node_modules/primeng/tooltip.js");
/* harmony import */ var primeng_tooltip__WEBPACK_IMPORTED_MODULE_53___default = /*#__PURE__*/__webpack_require__.n(primeng_tooltip__WEBPACK_IMPORTED_MODULE_53__);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _genoverse_genoverse_component__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./genoverse/genoverse.component */ "./src/app/genoverse/genoverse.component.ts");
/* harmony import */ var _webcircos_project_panel_link_table_link_table_component__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./webcircos/project-panel/link-table/link-table.component */ "./src/app/webcircos/project-panel/link-table/link-table.component.ts");
/* harmony import */ var _dialog_container_dialog_container_component__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./dialog-container/dialog-container.component */ "./src/app/dialog-container/dialog-container.component.ts");
/* harmony import */ var _dialog_container_import_dialog_import_dialog_component__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./dialog-container/import-dialog/import-dialog.component */ "./src/app/dialog-container/import-dialog/import-dialog.component.ts");
/* harmony import */ var _webcircos_file_management_cdk_tree_nested_example__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./webcircos/file-management/cdk-tree-nested-example */ "./src/app/webcircos/file-management/cdk-tree-nested-example.ts");
/* harmony import */ var _angular_material_tree__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! @angular/material/tree */ "./node_modules/@angular/material/esm5/tree.es5.js");
/* harmony import */ var _material_module__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./material-module */ "./src/app/material-module.ts");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _assembly_list_assembly_list_component__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ./assembly-list/assembly-list.component */ "./src/app/assembly-list/assembly-list.component.ts");
/* harmony import */ var _autocomplete_filter_example_autocomplete_filter_example_component__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ./autocomplete-filter-example/autocomplete-filter-example.component */ "./src/app/autocomplete-filter-example/autocomplete-filter-example.component.ts");
/* harmony import */ var _profile_profile_component__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ./profile/profile.component */ "./src/app/profile/profile.component.ts");
/* harmony import */ var _common_service__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ./common.service */ "./src/app/common.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};



































































var appRoutes = [
    { path: "app", component: _webcircos_webcircos_component__WEBPACK_IMPORTED_MODULE_10__["WebcircosComponent"] },
    { path: "app/:id", component: _webcircos_webcircos_component__WEBPACK_IMPORTED_MODULE_10__["WebcircosComponent"] },
    { path: "", component: _welcome_welcome_component__WEBPACK_IMPORTED_MODULE_11__["WelcomeComponent"] },
    { path: "profile", component: _profile_profile_component__WEBPACK_IMPORTED_MODULE_65__["ProfileComponent"] }
];
var AppModule = /** @class */ (function () {
    function AppModule() {
    }
    AppModule = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
            declarations: [
                _app_component__WEBPACK_IMPORTED_MODULE_9__["AppComponent"],
                _welcome_welcome_component__WEBPACK_IMPORTED_MODULE_11__["WelcomeComponent"],
                _toolbar_toolbar_component__WEBPACK_IMPORTED_MODULE_12__["ToolbarComponent"],
                _sign_panel_sign_panel_component__WEBPACK_IMPORTED_MODULE_20__["SignPanelComponent"],
                _webcircos_project_panel_project_panel_component__WEBPACK_IMPORTED_MODULE_13__["ProjectPanelComponent"],
                _webcircos_biocircos_biocircos_component__WEBPACK_IMPORTED_MODULE_14__["BiocircosComponent"],
                _dialog_container_share_dialog_share_dialog_component__WEBPACK_IMPORTED_MODULE_16__["ShareDialogComponent"],
                _webcircos_circos_controls_circos_controls_component__WEBPACK_IMPORTED_MODULE_15__["CircosControlsComponent"],
                _webcircos_customisation_panel_customisation_panel_component__WEBPACK_IMPORTED_MODULE_17__["CustomisationPanelComponent"],
                _webcircos_webcircos_component__WEBPACK_IMPORTED_MODULE_10__["WebcircosComponent"],
                _genoverse_genoverse_component__WEBPACK_IMPORTED_MODULE_55__["GenoverseComponent"],
                _webcircos_project_panel_link_table_link_table_component__WEBPACK_IMPORTED_MODULE_56__["LinkTableComponent"],
                _dialog_container_dialog_container_component__WEBPACK_IMPORTED_MODULE_57__["DialogContainerComponent"],
                _dialog_container_import_dialog_import_dialog_component__WEBPACK_IMPORTED_MODULE_58__["ImportDialogComponent"],
                _angular_material_tree__WEBPACK_IMPORTED_MODULE_60__["MatTree"],
                _angular_material_tree__WEBPACK_IMPORTED_MODULE_60__["MatTreeNode"],
                _angular_material_tree__WEBPACK_IMPORTED_MODULE_60__["MatNestedTreeNode"],
                _webcircos_file_management_cdk_tree_nested_example__WEBPACK_IMPORTED_MODULE_59__["CdkTreeNestedExample"],
                _assembly_list_assembly_list_component__WEBPACK_IMPORTED_MODULE_63__["AssemblyListComponent"],
                _autocomplete_filter_example_autocomplete_filter_example_component__WEBPACK_IMPORTED_MODULE_64__["AutocompleteFilterExampleComponent"],
                _profile_profile_component__WEBPACK_IMPORTED_MODULE_65__["ProfileComponent"]
            ],
            imports: [
                _material_module__WEBPACK_IMPORTED_MODULE_61__["DemoMaterialModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_62__["MatNativeDateModule"],
                _angular_forms__WEBPACK_IMPORTED_MODULE_42__["ReactiveFormsModule"],
                _angular_platform_browser__WEBPACK_IMPORTED_MODULE_0__["BrowserModule"],
                ng2_dragula_ng2_dragula__WEBPACK_IMPORTED_MODULE_35__["DragulaModule"],
                _angular_common_http__WEBPACK_IMPORTED_MODULE_3__["HttpClientModule"],
                _angular_http__WEBPACK_IMPORTED_MODULE_4__["HttpModule"],
                primeng_button__WEBPACK_IMPORTED_MODULE_18__["ButtonModule"],
                primeng_sidebar__WEBPACK_IMPORTED_MODULE_19__["SidebarModule"],
                _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_2__["BrowserAnimationsModule"],
                primeng_inputtext__WEBPACK_IMPORTED_MODULE_21__["InputTextModule"],
                primeng_password__WEBPACK_IMPORTED_MODULE_22__["PasswordModule"],
                _angular_forms__WEBPACK_IMPORTED_MODULE_42__["FormsModule"],
                primeng_messages__WEBPACK_IMPORTED_MODULE_23__["MessagesModule"],
                primeng_message__WEBPACK_IMPORTED_MODULE_24__["MessageModule"],
                primeng_panel__WEBPACK_IMPORTED_MODULE_25__["PanelModule"],
                primeng_dropdown__WEBPACK_IMPORTED_MODULE_26__["DropdownModule"],
                primeng_dialog__WEBPACK_IMPORTED_MODULE_27__["DialogModule"],
                primeng_inputtextarea__WEBPACK_IMPORTED_MODULE_28__["InputTextareaModule"],
                primeng_table__WEBPACK_IMPORTED_MODULE_29__["TableModule"],
                primeng_fileupload__WEBPACK_IMPORTED_MODULE_30__["FileUploadModule"],
                primeng_menu__WEBPACK_IMPORTED_MODULE_31__["MenuModule"],
                primeng_card__WEBPACK_IMPORTED_MODULE_32__["CardModule"],
                ng2_nouislider__WEBPACK_IMPORTED_MODULE_40__["NouisliderModule"],
                primeng_progressbar__WEBPACK_IMPORTED_MODULE_33__["ProgressBarModule"],
                primeng_progressspinner__WEBPACK_IMPORTED_MODULE_34__["ProgressSpinnerModule"],
                primeng_checkbox__WEBPACK_IMPORTED_MODULE_36__["CheckboxModule"],
                angular_font_awesome__WEBPACK_IMPORTED_MODULE_37__["AngularFontAwesomeModule"],
                primeng_picklist__WEBPACK_IMPORTED_MODULE_48__["PickListModule"],
                primeng_growl__WEBPACK_IMPORTED_MODULE_49__["GrowlModule"],
                primeng_radiobutton__WEBPACK_IMPORTED_MODULE_50__["RadioButtonModule"],
                primeng_slider__WEBPACK_IMPORTED_MODULE_51__["SliderModule"],
                primeng_togglebutton__WEBPACK_IMPORTED_MODULE_52__["ToggleButtonModule"],
                primeng_confirmdialog__WEBPACK_IMPORTED_MODULE_38__["ConfirmDialogModule"],
                primeng_tooltip__WEBPACK_IMPORTED_MODULE_53__["TooltipModule"],
                _angular_material_input__WEBPACK_IMPORTED_MODULE_41__["MatInputModule"],
                _angular_forms__WEBPACK_IMPORTED_MODULE_42__["FormsModule"],
                _angular_forms__WEBPACK_IMPORTED_MODULE_42__["ReactiveFormsModule"],
                _angular_material_button__WEBPACK_IMPORTED_MODULE_43__["MatButtonModule"],
                _angular_material_sidenav__WEBPACK_IMPORTED_MODULE_44__["MatSidenavModule"],
                primeng_multiselect__WEBPACK_IMPORTED_MODULE_45__["MultiSelectModule"],
                primeng_accordion__WEBPACK_IMPORTED_MODULE_46__["AccordionModule"],
                ngx_toastr__WEBPACK_IMPORTED_MODULE_47__["ToastrModule"].forRoot(),
                _angular_router__WEBPACK_IMPORTED_MODULE_54__["RouterModule"].forRoot(appRoutes, { onSameUrlNavigation: 'reload' })
            ],
            entryComponents: [_webcircos_file_management_cdk_tree_nested_example__WEBPACK_IMPORTED_MODULE_59__["CdkTreeNestedExample"]],
            providers: [
                _user_service__WEBPACK_IMPORTED_MODULE_5__["UserService"],
                _parser_service__WEBPACK_IMPORTED_MODULE_7__["ParserService"],
                ngx_cookie_service__WEBPACK_IMPORTED_MODULE_8__["CookieService"],
                _loading_service__WEBPACK_IMPORTED_MODULE_6__["LoadingService"],
                primeng_api__WEBPACK_IMPORTED_MODULE_39__["ConfirmationService"],
                _common_service__WEBPACK_IMPORTED_MODULE_66__["CommonService"]
            ],
            bootstrap: [_app_component__WEBPACK_IMPORTED_MODULE_9__["AppComponent"]]
        })
    ], AppModule);
    return AppModule;
}());



/***/ }),

/***/ "./src/app/assembly-list/assembly-list.component.css":
/*!***********************************************************!*\
  !*** ./src/app/assembly-list/assembly-list.component.css ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/assembly-list/assembly-list.component.html":
/*!************************************************************!*\
  !*** ./src/app/assembly-list/assembly-list.component.html ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<p>test</p>\n"

/***/ }),

/***/ "./src/app/assembly-list/assembly-list.component.ts":
/*!**********************************************************!*\
  !*** ./src/app/assembly-list/assembly-list.component.ts ***!
  \**********************************************************/
/*! exports provided: AssemblyListComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AssemblyListComponent", function() { return AssemblyListComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _common_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common.service */ "./src/app/common.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var AssemblyListComponent = /** @class */ (function () {
    function AssemblyListComponent(commonService) {
        this.commonService = commonService;
    }
    AssemblyListComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.getAllGenomes();
        this.commonService.add_subject.subscribe(function (response) {
            _this.getAllGenomes();
        });
    };
    AssemblyListComponent.prototype.getAllGenomes = function () {
        var _this = this;
        this.commonService.getGenomes().subscribe(function (res) {
            _this.assemblyList = [];
            res.json().data.map(function (e) {
                _this.assemblyList.push(e);
            });
        });
    };
    AssemblyListComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: "app-assembly-list",
            template: __webpack_require__(/*! ./assembly-list.component.html */ "./src/app/assembly-list/assembly-list.component.html"),
            styles: [__webpack_require__(/*! ./assembly-list.component.css */ "./src/app/assembly-list/assembly-list.component.css")]
        }),
        __metadata("design:paramtypes", [_common_service__WEBPACK_IMPORTED_MODULE_1__["CommonService"]])
    ], AssemblyListComponent);
    return AssemblyListComponent;
}());



/***/ }),

/***/ "./src/app/autocomplete-filter-example/autocomplete-filter-example.component.css":
/*!***************************************************************************************!*\
  !*** ./src/app/autocomplete-filter-example/autocomplete-filter-example.component.css ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ":root{\n  --header-footer: #24292e;\n  --accent: #6cc644;\n  --background: #eae7ed;\n  --homelogo: #ffffff;\n  --genomeGitWeb: #80c962;\n  --menuItems: #ffffff;\n  --signIn: #ffffff;\n  --foreground: #f6f8fa;\n  --textLight: #ffffff;\n  --textDark: #24292e;\n  --textDarkUnfocused: #889aad;\n  --button-hover: #596470;\n  --shadow: 0 1px 5px rgba(100, 100, 100, 0.5);\n  --searchbarShadow: 0 1px 5px rgba(0, 255, 0, 1);\n  --searchbarShadowHover: 0 1px 15px rgba(0, 255, 0, 1);\n  --searchbarShadowHoverInside: inset 1px 15px rgba(0, 255, 0, 1);\n  --logos: #5f5f5f;\n  --footerText: #80c962;\n  }\n\n.example-form {\n  min-width: 150px;\n  /* max-width: 1000px; */\n  /* width: 100%; */\n  margin: 1rem;\n  font-size: 2rem;\n \n}\n\n.example-full-width {\n  width: 100%;\n  \n}\n\n.explore{\n  display: block;\n  padding: 6vh 20vw;\nalign-content: center;\nmargin-top: 3rem;\n}\n\n#search-box{\n  /* width: 80%; */\n  grid-area: searchbar;\n  border: none;\n  height: 2rem;\n  box-shadow: var(--searchbarShadow);\n  padding: 1.75vh 2vw;\n  outline: none;\n  /* margin: 4vh 0vw 0vh 0vw; */\n  /* font-size: 10px; */\n  /* border-radius: 0.5rem; */\n}\n\n#search-box:hover{\n  box-shadow: var(--searchbarShadowHover);\n}\n\n#search-box:focus{\n  box-shadow: var(--searchbarShadowHover);\n}\n"

/***/ }),

/***/ "./src/app/autocomplete-filter-example/autocomplete-filter-example.component.html":
/*!****************************************************************************************!*\
  !*** ./src/app/autocomplete-filter-example/autocomplete-filter-example.component.html ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.8.1/css/all.css\" integrity=\"sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf\" crossorigin=\"anonymous\">\n\n\n<div class=\"explore\" style=\"display: grid;\" align=\"center\">\n    <i class=\"fas fa-dna\" style=\"font-size: 17rem; color: #6cc644\" title=\"genomeGitWeb\"></i>\n    <form class=\"example-form\">\n        <mat-form-field class=\"example-full-width\">\n          <input id=\"search-box\"\n            type=\"text\"\n            placeholder=\"Search Projects...\"\n            aria-label=\"Number\"\n            matInput\n            [formControl]=\"myControl\"\n            [matAutocomplete]=\"auto\"\n          />\n          <mat-autocomplete #auto=\"matAutocomplete\">\n            <mat-option class=\"search-result\"\n              *ngFor=\"let option of (filteredOptions | async)\"\n              [value]=\"option.value\"\n              [routerLink]=\"['/app', option.id]\"\n            >\n              {{ option.value }}\n            </mat-option>\n          </mat-autocomplete>\n        </mat-form-field>\n      </form>\n</div>\n\n"

/***/ }),

/***/ "./src/app/autocomplete-filter-example/autocomplete-filter-example.component.ts":
/*!**************************************************************************************!*\
  !*** ./src/app/autocomplete-filter-example/autocomplete-filter-example.component.ts ***!
  \**************************************************************************************/
/*! exports provided: AutocompleteFilterExampleComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AutocompleteFilterExampleComponent", function() { return AutocompleteFilterExampleComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _common_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common.service */ "./src/app/common.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




/**
 * @title Filter autocomplete
 */
var AutocompleteFilterExampleComponent = /** @class */ (function () {
    function AutocompleteFilterExampleComponent(commonService) {
        this.commonService = commonService;
        this.myControl = new _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormControl"]();
        this.genomeOptions = [];
        this.genomeIds = [];
        this.output = [];
        this.ranks = [];
        this.complete = [];
        this.results = [];
        // Sift4 - extended version
        // online algorithm to compute the distance between two strings in O(n)
        // maxOffset is the number of positions to search for matching tokens
        // options: the options for the function, allowing for customization of the scope and algorithm:
        //         maxDistance: the distance at which the algorithm should stop computing the value and just exit (the strings are too different anyway)
        //         tokenizer: a function to transform strings into vectors of tokens
        //        tokenMatcher: a function to determine if two tokens are matching (equal)
        //        matchingEvaluator: a function to determine the way a token match should be added to the local_cs. For example a fuzzy match could be implemented.
        //        localLengthEvaluator: a function to determine the way the local_cs value is added to the lcss. For example longer continuous substrings could be awarded.
        //        transpositionCostEvaluator: a function to determine the value of an individual transposition. For example longer transpositions should have a higher cost.
        //        transpositionsEvaluator: a function to determine the way the total cost of transpositions affects the final result
        this.config = this.extend(this.config, {
            maxDistance: null,
            tokenizer: function (s) {
                var result = [];
                if (!s)
                    return result;
                for (var i = 0; i <= s.length - 2; i++) {
                    result.push(s.substr(i, 2));
                }
                return result;
            },
            //tokenizer: function(s) { return s?s.split(''):[]; },
            tokenMatcher: function (t1, t2) { return t1 == t2; },
            matchingEvaluator: function (t1, t2) { return 1; },
            localLengthEvaluator: function (local_cs) { return local_cs; },
            transpositionCostEvaluator: function (c1, c2) { return 1; },
            transpositionsEvaluator: function (lcss, trans) { return lcss - trans; }
        });
    }
    AutocompleteFilterExampleComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.getAllGenomes();
        this.commonService.add_subject.subscribe(function (response) {
            _this.getAllGenomes();
        });
    };
    AutocompleteFilterExampleComponent.prototype._filter = function (value) {
        var filterValue = value.toLowerCase();
        this.output = [];
        this.ranks = [];
        this.complete = [];
        this.results = [];
        for (var x = 0; x < this.genomeOptions.length; x++) {
            if (this.genomeOptions[x].title.toLowerCase().includes(filterValue)) {
                this.output.push(this.genomeOptions[x]);
            }
        }
        ;
        for (var y = 0; y < this.output.length; y++) {
            this.ranks.push(this.sift4(this.output[y].title.toLowerCase(), filterValue, this.output[y].length, this.config));
            this.complete.push({ key: this.ranks[y], value: this.output[y].title, id: this.output[y].id });
        }
        this.complete.sort(this.rank);
        for (var z = 0; z < this.complete.length; z++) {
            this.results.push(this.complete[z].value);
        }
        //return filtered options
        //return this.options.filter(option => option.toLowerCase().includes(filterValue));
        return this.complete.filter(function (result) { return result.value.toLowerCase().includes(filterValue); });
    };
    AutocompleteFilterExampleComponent.prototype.getAllGenomes = function () {
        var _this = this;
        this.commonService.getGenomes().subscribe(function (res) {
            _this.genomeOptions = [];
            res.json().data.map(function (e) {
                _this.genomeOptions.push({ title: e.title, id: e._id });
                //this.genomeIds.push(e._id);
            });
        });
        this.filteredOptions = this.myControl.valueChanges
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["startWith"])(''), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (value) { return _this._filter(value); }));
    };
    AutocompleteFilterExampleComponent.prototype.rank = function (a, b) {
        var x = a.key;
        var y = b.key;
        if (x > y) {
            return 1;
        }
        else if (x < y) {
            return -1;
        }
        else {
            return 0;
        }
    };
    AutocompleteFilterExampleComponent.prototype.sift4 = function (s1, s2, maxOffset, options) {
        var t1 = options.tokenizer(s1);
        var t2 = options.tokenizer(s2);
        var l1 = t1.length;
        var l2 = t2.length;
        if (l1 == 0)
            return l2;
        if (l2 == 0)
            return l1;
        var c1 = 0; //cursor for string 1
        var c2 = 0; //cursor for string 2
        var lcss = 0; //largest common subsequence
        var local_cs = 0; //local common substring
        var trans = 0; //number of transpositions ('ab' vs 'ba')
        var offset_arr = []; //offset pair array, for computing the transpositions
        while ((c1 < l1) && (c2 < l2)) {
            if (options.tokenMatcher(t1[c1], t2[c2])) {
                local_cs += options.matchingEvaluator(t1[c1], t2[c2]);
                var isTrans = false;
                //see if current match is a transposition
                var i = 0;
                while (i < offset_arr.length) {
                    var ofs = offset_arr[i];
                    if (c1 <= ofs.c1 || c2 <= ofs.c2) {
                        // when two matches cross, the one considered a transposition is the one with the largest difference in offsets
                        isTrans = Math.abs(c2 - c1) >= Math.abs(ofs.c2 - ofs.c1);
                        if (isTrans) {
                            trans += options.transpositionCostEvaluator(c1, c2);
                        }
                        else {
                            if (!ofs.trans) {
                                ofs.trans = true;
                                trans += options.transpositionCostEvaluator(ofs.c1, ofs.c2);
                            }
                        }
                        break;
                    }
                    else {
                        if (c1 > ofs.c2 && c2 > ofs.c1) {
                            offset_arr.splice(i, 1);
                        }
                        else {
                            i++;
                        }
                    }
                }
                offset_arr.push({
                    c1: c1,
                    c2: c2,
                    trans: isTrans
                });
            }
            else {
                lcss += options.localLengthEvaluator(local_cs);
                local_cs = 0;
                if (c1 != c2) {
                    c1 = c2 = Math.min(c1, c2); //using min allows the computation of transpositions
                }
                //if matching tokens are found, remove 1 from both cursors (they get incremented at the end of the loop)
                //so that we can have only one code block handling matches 
                for (var i = 0; i < maxOffset && (c1 + i < l1 || c2 + i < l2); i++) {
                    if ((c1 + i < l1) && options.tokenMatcher(t1[c1 + i], t2[c2])) {
                        c1 += i - 1;
                        c2--;
                        break;
                    }
                    if ((c2 + i < l2) && options.tokenMatcher(t1[c1], t2[c2 + i])) {
                        c1--;
                        c2 += i - 1;
                        break;
                    }
                }
            }
            c1++;
            c2++;
            if (options.maxDistance) {
                var temporaryDistance = options.localLengthEvaluator(Math.max(c1, c2)) - options.transpositionsEvaluator(lcss, trans);
                if (temporaryDistance >= options.maxDistance)
                    return Math.round(temporaryDistance);
            }
            // this covers the case where the last match is on the last token in list, so that it can compute transpositions correctly
            if ((c1 >= l1) || (c2 >= l2)) {
                lcss += options.localLengthEvaluator(local_cs);
                local_cs = 0;
                c1 = c2 = Math.min(c1, c2);
            }
        }
        lcss += options.localLengthEvaluator(local_cs);
        return Math.round(options.localLengthEvaluator(Math.max(l1, l2)) - options.transpositionsEvaluator(lcss, trans)); //add the cost of found transpositions
    };
    AutocompleteFilterExampleComponent.prototype.extend = function (obj, def) {
        var result = {};
        for (var prop in def) {
            if (!obj || !obj.hasOwnProperty(prop)) {
                result[prop] = def[prop];
            }
            else {
                result[prop] = obj[prop];
            }
        }
        return result;
    };
    // possible values for the options
    // tokenizers:
    AutocompleteFilterExampleComponent.prototype.nGramTokenizer = function (s, n) {
        var result = [];
        if (!s)
            return result;
        for (var i = 0; i <= s.length - n; i++) {
            result.push(s.substr(i, n));
        }
        return result;
    };
    AutocompleteFilterExampleComponent.prototype.wordSplitTokenizer = function (s) {
        if (!s)
            return [];
        return s.split(/\s+/);
    };
    AutocompleteFilterExampleComponent.prototype.characterFrequencyTokenizer = function (s) {
        var result = [];
        for (var i = 0; i <= 25; i++) {
            var val = 0;
            if (s) {
                for (var j = 0; j < s.length; j++) {
                    var code = s.charCodeAt(j);
                    if (code == i + 65 || code == i + 97)
                        val++;
                }
            }
            result.push(val);
        }
        return result;
    };
    //tokenMatchers:
    AutocompleteFilterExampleComponent.prototype.sift4TokenMatcher = function (t1, t2) {
        var similarity = 1 - this.sift4(t1, t2, 5, this.config) / Math.max(t1.length, t2.length);
        return similarity > 0.7;
    };
    //matchingEvaluators:
    AutocompleteFilterExampleComponent.prototype.sift4MatchingEvaluator = function (t1, t2) {
        var similarity = 1 - this.sift4(t1, t2, 5, this.config) / Math.max(t1.length, t2.length);
        return similarity;
    };
    //localLengthEvaluators:
    AutocompleteFilterExampleComponent.prototype.rewardLengthEvaluator = function (l) {
        if (l < 1)
            return l; //0 -> 0
        return l - 1 / (l + 1); //1 -> 0.5, 2-> 0.66, 9 -> 0.9
    };
    AutocompleteFilterExampleComponent.prototype.rewardLengthEvaluator2 = function (l) {
        return Math.pow(l, 1.5); // 0 -> 0, 1 -> 1, 2 -> 2.83, 10 -> 31.62
    };
    //transpositionCostEvaluators:
    AutocompleteFilterExampleComponent.prototype.longerTranspositionsAreMoreCostly = function (c1, c2) {
        return Math.abs(c2 - c1) / 9 + 1;
    };
    AutocompleteFilterExampleComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'autocomplete-filter-example',
            template: __webpack_require__(/*! ./autocomplete-filter-example.component.html */ "./src/app/autocomplete-filter-example/autocomplete-filter-example.component.html"),
            styles: [__webpack_require__(/*! ./autocomplete-filter-example.component.css */ "./src/app/autocomplete-filter-example/autocomplete-filter-example.component.css")],
            providers: [_common_service__WEBPACK_IMPORTED_MODULE_3__["CommonService"]]
        }),
        __metadata("design:paramtypes", [_common_service__WEBPACK_IMPORTED_MODULE_3__["CommonService"]])
    ], AutocompleteFilterExampleComponent);
    return AutocompleteFilterExampleComponent;
}());



/***/ }),

/***/ "./src/app/common.service.ts":
/*!***********************************!*\
  !*** ./src/app/common.service.ts ***!
  \***********************************/
/*! exports provided: CommonService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CommonService", function() { return CommonService; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/http */ "./node_modules/@angular/http/fesm5/http.js");
/* harmony import */ var rxjs_Subject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs/Subject */ "./node_modules/rxjs-compat/_esm5/Subject.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var CommonService = /** @class */ (function () {
    function CommonService(http) {
        this.http = http;
        this.add_subject = new rxjs_Subject__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
        this.assembliesUrl = "/api/searchAssemblies";
        this.assemblyList = [];
    }
    CommonService.prototype.functionName = function (userName, projectName) {
        var config = { params: { uName: userName, pName: projectName } };
        return this.http.get("/api/functionName", config);
    };
    CommonService.prototype.getGenomes = function () {
        return this.http.get("/api/getGenomes", {});
    };
    CommonService.prototype.getUsers = function () {
        return this.http.get("/api/getUsers", {});
    };
    CommonService.prototype.getGenome = function (id) {
        var config = { params: { s: id } };
        return this.http.get("/api/getGenome", config);
    };
    CommonService.prototype.getIssues = function (projectId) {
        var config = { params: { projectID: projectId } };
        return this.http.get("/api/getIssues", config);
    };
    CommonService.prototype.updateProject = function (title, user, publicPrivate) {
        var config = { params: { a: title, b: user, c: publicPrivate } };
        // console.log("updateProject function called in commonService: ", config);
        return this.http.get("/api/updateProject", config);
    };
    CommonService.prototype.updateIssue = function (solved, projectID, issueID) {
        var config = { params: { a: solved, b: projectID, c: issueID } };
        return this.http.get("/api/updateIssue", config);
    };
    CommonService.prototype.issueSolved = function (projectId, issueId, solved, issue) {
        console.log(projectId, issueId, solved, issue);
        var config = { params: { projectID: projectId, issueID: issueId, solved: solved, issue: issue } };
        return this.http.get("/api/issueSolved", config);
    };
    CommonService.prototype.submitIssue = function (title, comment, id, userName) {
        // console.log("working at commonservice");
        var config = { params: { a: title, b: comment, c: id, d: userName } };
        return this.http.get("/api/submitIssue", config);
    };
    CommonService.prototype.editDescription = function (Description, projectid) {
        var config = { params: { a: Description, b: projectid } };
        return this.http.get("/api/updateDescription", config);
    };
    CommonService.prototype.getProjects = function () {
        // console.log("getProjects function called, heres the response: ", this.http.get("/api/getProjects", {}));
        return this.http.get("/api/getProjects", {});
    };
    CommonService.prototype.getProject = function (projectid) {
        var config = { params: { projectID: projectid } };
        return this.http.get("/api/getProject", config);
    };
    CommonService.prototype.getCollaborators = function (projectId, userIds) {
        var config = { params: { projectID: projectId, userIDs: userIds } };
        return this.http.get("/api/getProjectCollaborators", config);
    };
    CommonService.prototype.getUserId = function (username) {
        var config = { params: { userName: username } };
        return this.http.get("/api/getUserID", config);
    };
    CommonService.prototype.addCollaborator = function (projectId, userId, userName) {
        var config = { params: { projectID: projectId, userID: userId, username: userName } };
        return this.http.get("/api/addCollaborator", config);
    };
    CommonService = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])({ providedIn: "root" }),
        __metadata("design:paramtypes", [_angular_http__WEBPACK_IMPORTED_MODULE_1__["Http"]])
    ], CommonService);
    return CommonService;
}());



/***/ }),

/***/ "./src/app/dialog-container/dialog-container.component.css":
/*!*****************************************************************!*\
  !*** ./src/app/dialog-container/dialog-container.component.css ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#tableAdditionalColumns{\n  width: 100%;\n  margin-bottom: 50px;\n}\n\n#tableAdditionalColumns td{\n  padding-bottom: 20px;\n}\n\n.columnTableDropdown{\n  text-align: center;\n}\n\n.linkFormatColumns{\n  display: inline-block;\n  vertical-align: top;\n  margin-top: 20px;\n  max-width: 50%;\n}\n"

/***/ }),

/***/ "./src/app/dialog-container/dialog-container.component.html":
/*!******************************************************************!*\
  !*** ./src/app/dialog-container/dialog-container.component.html ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<p-dialog id=\"confirmD\" header=\"Fasta file (.fasta/.fa)\" [(visible)]=\"displayFastainfo\" modal=\"modal\" [responsive]=\"true\" [width]=\"850\" [minWidth]=\"300\" [minY]=\"70\">\n  <span> <b>Accepted format</b> </span>\n  <img src=\"image/FastaFormat.png\" width=\"778\" height=\"200\">\n  <li> <b>The genome chromosome by chromosome</b> </li>\n  <li> The file should contain the chromosomes / regions in an organism followed by their nucleotide sequence.</li>\n  <li> The file should contain the chromosome name after the \">\" symbol, before each sequence.</li>\n  <li> Each line of the sequence needs to have the same amount of characters apart from the last row.</li>\n  <li> Do not upload resutls with contigs and scaffolds.</li>\n  <p-footer>\n    <button type=\"button\" pButton icon=\"pi pi-times\" (click)=\"displayFastainfo=false\" label=\"OK\"></button>\n  </p-footer>\n</p-dialog>\n\n<p-dialog header=\"File tab information\" [(visible)]=\"displayFileInfo\" modal=\"modal\" [responsive]=\"true\" [width]=\"850\" [minWidth]=\"300\" [minY]=\"70\">\n  <span><b>Files panel description</b></span>\n  <img src=\"image/files.png\" width=\"766\" height=\"300\">\n  <p-footer>\n      <button type=\"button\" pButton icon=\"pi pi-times\" (click)=\"displayFileInfo=false\" label=\"OK\"></button>\n    </p-footer>\n</p-dialog>\n\n\n<p-dialog header=\"Variant Calling (.VCF)\" [(visible)]=\"displayVCFinfo\" modal=\"modal\" [responsive]=\"true\" [width]=\"850\" [minWidth]=\"300\" [minY]=\"70\">\n  <span> <b>Accepted format</b> </span>\n  <img src=\"image/vcf_format.png\" width=\"666\" height=\"104\">\n  <li><b>SNPs found in each chromosome</b></li>\n  <li> The file should contain the chromosome name in the first column, the position of the SNP in the second and the quality score in the sixth. If the Allelic Depth identifier (AD) is present on column 9, the homozygousity is calculated as the allele specific\n    depth divided by the sum of reference and alternative allelic depth for this SNP. The number is then normalized between 0 and 1. </li>\n  <li> The chromosome name should be the same as the one in the fasta file </li>\n  <p-footer>\n    <button type=\"button\" pButton icon=\"pi pi-times\" (click)=\"displayVCFinfo=false\" label=\"OK\"></button>\n  </p-footer>\n</p-dialog>\n\n<p-dialog header=\"Annotation file (.gff3/.gtf/.gff2/.gff) \" [(visible)]=\"displayGFFinfo\" modal=\"modal\" [responsive]=\"true\" [width]=\"850\" [minWidth]=\"300\" [minY]=\"70\">\n  <span> <b>Accepted format</b> </span>\n  <img src=\"image/gffformat.png\" width=\"846\" height=\"134\">\n  <li><b>Information concerning the sequence</b></li>\n  <li> The file should contain the chromosome name in the first column, the start position and end positions of the region in columns 4 and 5 respectively.The annotation name is retrieved from the ninth column the after the \"ID=\" marker. The name can contain\n    letters, numbers and \"_-:.\". The parser will only upload lines marked as \"gene\", \"exon\" or \"intron\" in the third column.</li>\n  <li> The chromosome name should be the same as the one in the fasta file </li>\n  <p-footer>\n    <button type=\"button\" pButton icon=\"pi pi-times\" (click)=\"displayGFFinfo=false\" label=\"OK\"></button>\n  </p-footer>\n</p-dialog>\n\n<p-dialog header=\"Transcriptomic Coverage file from SAMTools pipeline (.bed/.bedcov) \" [(visible)]=\"displayBedinfo\" modal=\"modal\" [responsive]=\"true\" [width]=\"850\" [minWidth]=\"300\" [minY]=\"70\">\n  <span> <b>Accepted format</b> </span>\n  <img src=\"image/bedformat.png\" width=\"690\" height=\"186\">\n  <li><b>Tanscriptomic Coverage from RNA SEQ: The number of reads that cover a certain region of the sequence</b></li>\n  <li> The file should contain the chromosome name in the first column, the start position and end positions of the region in columns 2 and 3 respectively and in the forth column quality score calculated</li>\n  <li> The genes names must match your annotation (.gff/.gff3/.gtf) file </li>\n  <p-footer>\n    <button type=\"button\" pButton icon=\"pi pi-times\" (click)=\"displayBedinfo=false\" label=\"OK\"></button>\n  </p-footer>\n</p-dialog>\n\n<p-dialog header=\"Differential Expression (.diff/.de.txt)\" [(visible)]=\"displayDiffinfo\" modal=\"modal\" [responsive]=\"true\" [width]=\"850\" [minWidth]=\"300\" [minY]=\"70\">\n  <span> <b>Accepted format 1: Cuffdiff (.diff) </b> </span>\n  <img src=\"image/diff_format.png\" width=\"1069\" height=\"144\">\n  <li><b>The differential expression found in an RNA SEQ experiment from  Cuffdiff output (gene_exp.diff).</b></li>\n  <li> The file should contain the chromosome name in the first column, information about the region in the second one, the start and end position of the region seperated from the name of the chromosome with the \":\" in the third column (Check image above)\n    and lastly in the tenth column the log Fold Change</li>\n  <span> <b>Accepted format 2: EBSeq (.de.txt)</b> </span>\n  <img src=\"image/de_format.png\" width=\"876\" height=\"76\">\n  <li><b>The differential expression found in an RNA SEQ experiment from EBSeq output (GeneMat.de.txt).</b></li>\n  <li> The file should contain the chromosome name in the first column, and lastly in the fifth column the Real Fold Change. </li>\n  <li> Before uploading this format, you need to have uploaded an annotation file containing matching genes </li>\n  <li> The chromosome name should be the same as the one in the fasta file </li>\n  <p-footer>\n    <button type=\"button\" pButton icon=\"pi pi-times\" (click)=\"displayDiffinfo=false\" label=\"OK\"></button>\n  </p-footer>\n</p-dialog>\n\n<p-dialog header=\"Bam - Bai \" [(visible)]=\"displayBaminfo\" modal=\"modal\" [responsive]=\"true\" [width]=\"850\" [minWidth]=\"300\" [minY]=\"70\">\n  <span> <b>Accepted format</b> </span>\n  <img src=\"image/bam_format.png\" width=\"940\" height=\"118\">\n  <li><b> The Genomic Coverage : The number of reads that cover a certain region of the sequence. </b></li>\n  <li> To display genomic coverage, you must FIRST upload an index file (.bai) and then upload the actual alignment file (.bam) containing reads mapped to chromosomes </li>\n  <li> The displayed coverage is an estimation of the actual coverage (.bam.iobio.js library) </li>\n  <p-footer>\n    <button type=\"button\" pButton icon=\"pi pi-times\" (click)=\"displayBaminfo=false\" label=\"OK\"></button>\n  </p-footer>\n</p-dialog>\n\n<p-dialog header=\"Expression \" [(visible)]=\"displayExpressioninfo\" modal=\"modal\" [responsive]=\"true\" [width]=\"850\" [minWidth]=\"300\" [minY]=\"70\">\n  <span> <b>Accepted format</b> </span>\n  <img src=\"image/expression_format.png\" width=\"940\" height=\"118\">\n  <li><b> The Expression corresponds to the abundance of your transcript/isoform that cover a certain region of the sequence expressed in Transcript Per Million </b></li>\n  <li> To display expression, you must upload a .results file from RSEM output. (either isoform.results or genes.results) </li>\n  <li> The genes names must match your annotation file (.gff/.gff3/.gtf) </li>\n  <p-footer>\n    <button type=\"button\" pButton icon=\"pi pi-times\" (click)=\"displayExpressioninfo=false\" label=\"OK\"></button>\n  </p-footer>\n</p-dialog>\n\n\n<p-dialog header=\"Add a project\" [(visible)]=\"addProjectDialogVisible\">\n  <label for=\"newTitleInput\">Title:</label><br />\n  <input id=\"newTitleInput\" type=\"text\" size=\"30\" pInputText [(ngModel)]=\"newProjectTitle\"><br />\n  <mat-slide-toggle [(ngModel)]=\"public\">Public</mat-slide-toggle><br>\n\n  <label for=\"newDescriptionArea\">Description:</label><br />\n  <textarea id=\"newDescriptionArea\" pInputTextarea [(ngModel)]=\"newProjectDescription\"></textarea><br />\n  <p-button label=\"Create\" (onClick)=\"projectPanel.addProject(newProjectTitle, public, newProjectDescription);addProjectDialogVisible=false;\"></p-button>\n  <p-button label=\"Cancel\" (onClick)=\"projectPanel.cancelNewProject()\"></p-button>\n\n</p-dialog>\n\n\n\n<p-confirmDialog *ngIf=\"projectPanel\" header=\"Confirmation\" [(visible)]=\"showFastaParam\" icon=\"fa fa-question-circle\" width=\"50%\" margin-top=\"100\" closable=\"false\" closeOnEscape=\"false\" #cd>\n\n  <p-footer>\n\n    Input the beginning of the chromosome signature :\n    <br><input #beginsInput type=\"text\" pInputText [(ngModel)]=\"projectPanel.chromosomeSignature.begins\" />\n    <br>Input the end of the chromosome signature :\n    <br><input #endsInput type=\"text\" pInputText [(ngModel)]=\"projectPanel.chromosomeSignature.ends\" />\n\n    <br>\n    <br><button type=\"button\" pButton icon=\"fa-tags\" label=\"Default\" (click)=\"defaultFasta()\"></button>\n    <button type=\"button\" pButton icon=\"fa-check\" label=\"Confirm\" (click)=\"accept()\"></button>\n  </p-footer>\n</p-confirmDialog>\n\n<app-link-table #linkTable (updateLinksDisplayed)=\"projectPanel.onLinksUpdate($event)\"></app-link-table>\n\n\n\n<!----------- Dialog shown when the user uploads a links file and there are additional columns-->\n<p-dialog header=\"Select the type of the additional columns\" [(visible)]=\"displayAddColumnTypesLink\">\n  <table id=\"tableAdditionalColumns\">\n    <tr *ngFor=\"let column of additionalLinkColumns\">\n      <td> {{column.name}}</td>\n      <td class=\"columnTableDropdown\">\n        <p-dropdown [options]=\"linkTypes\" [(ngModel)]=\"column.selectedType\"></p-dropdown>\n      </td>\n    </tr>\n  </table>\n  <p-button label=\"Confirm\" (onClick)=\"confirmLinksType();displayAddColumnTypesLink=false;\"></p-button>\n\n</p-dialog>\n\n\n\n<!-------- Information dialog for the link files format -->\n\n<p-dialog header=\"Link file\" [(visible)]=\"displayLinkInfo\" modal=\"modal\" [responsive]=\"true\" [width]=\"850\" [minWidth]=\"300\" [minY]=\"70\">\n\n  <img src=\"image/linkFileExample.png\">\n  <h3>Information concerning the format</h3>\n  <li>The file must be a comma separated values text file. A file can be used to display links among a single group or between different groups.</li>\n  <div>\n    <div class=\"linkFormatColumns\">\n      For a single group, the file should have the following columns:\n      <ul>\n        <li>g1chr: ID of the first chromosome</li>\n        <li>g1start: start position on the first chromosome</li>\n        <li>g1end: end position on the first chromosome</li>\n        <li>g2chr: ID of the second chromosome</li>\n        <li>g2start: start position on the second chromosome</li>\n        <li>g2end: end position on the second chromosome</li>\n        <li>color: link color in hexadecimal format (ex: #FF0000)</li>\n        <li>fusion: text to display in the tooltip when putting the mouse over the link</li>\n      </ul>\n    </div>\n    <div class=\"linkFormatColumns\">\n      For multiple groups, the file should have the following columns:\n      <ul>\n        <li>g1: name of tthe first group</li>\n        <li>g1chr: ID of the first chromosome</li>\n        <li>g1start: start position on the first chromosome</li>\n        <li>g1end: end position on the first chromosome</li>\n        <li>g2: name of the second group</li>\n        <li>g2chr: ID of the second chromosome</li>\n        <li>g2start: start position on the second chromosome</li>\n        <li>g2end: end position on the second chromosome</li>\n        <li>color: link color in hexadecimal format (ex: #FF0000)</li>\n        <li>fusion: text to display in the tooltip when putting the mouse over the link</li>\n      </ul>\n    </div>\n  </div>\n  <p>Additional columns can be added. They should be added after the other columns (see example.)</p>\n  <p>An example of valid file for the single group can be downloaded <a style=\"color:#337ab7;\" href=\"files/exampleLinkSingle.txt\">here</a> and a valid file for multiple groups can be downloaded <a style=\"color:#337ab7;\" href=\"files/exampleLinkMultiple.txt\">here</a></p>\n  <p-footer>\n    <button type=\"button\" pButton icon=\"pi pi-times\" (click)=\"displayLinkInfo=false\" label=\"OK\"></button>\n  </p-footer>\n</p-dialog>\n\n\n\n<share-dialog #sharedialog></share-dialog>\n\n<app-import-dialog #importdialog></app-import-dialog>\n"

/***/ }),

/***/ "./src/app/dialog-container/dialog-container.component.ts":
/*!****************************************************************!*\
  !*** ./src/app/dialog-container/dialog-container.component.ts ***!
  \****************************************************************/
/*! exports provided: DialogContainerComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DialogContainerComponent", function() { return DialogContainerComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var primeng_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! primeng/api */ "./node_modules/primeng/api.js");
/* harmony import */ var primeng_api__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(primeng_api__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _dialog_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../dialog.service */ "./src/app/dialog.service.ts");
/* harmony import */ var _user_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../user.service */ "./src/app/user.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var DialogContainerComponent = /** @class */ (function () {
    function DialogContainerComponent(dialogService, confirmationService, userService) {
        this.dialogService = dialogService;
        this.confirmationService = confirmationService;
        this.userService = userService;
        this.displayFastainfo = false;
        this.displayVCFinfo = false;
        this.displayGFFinfo = false;
        this.displayBedinfo = false;
        this.displayDiffinfo = false;
        this.displayBaminfo = false;
        this.displayExpressioninfo = false;
        this.displayLinkInfo = false;
        this.displayShareProject = false;
        this.displayImportFile = false;
        this.displayFileInfo = false;
        this.addProjectDialogVisible = false;
        this.showFastaParam = false;
        this.displayAddColumnTypesLink = false;
        this.public = true;
        this.additionalLinkColumns = null;
        this.linkWorder = null;
        this.linkTypes = [
            { label: 'Numeric', value: 'numeric' },
            { label: 'Level', value: 'level' },
            { label: 'Text', value: 'text' },
        ];
    }
    DialogContainerComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.dialogService.fastaDialog.subscribe(function () {
            _this.displayFastainfo = true;
        });
        this.dialogService.vcfInfoDialog.subscribe(function () {
            _this.displayVCFinfo = true;
        });
        this.dialogService.gffInfoDialog.subscribe(function () {
            _this.displayGFFinfo = true;
        });
        this.dialogService.fileInfoDialog.subscribe(function () {
            _this.displayFileInfo = true;
        });
        this.dialogService.bedInfoDialog.subscribe(function () {
            _this.displayBedinfo = true;
        });
        this.dialogService.diffInfoDialog.subscribe(function () {
            _this.displayDiffinfo = true;
        });
        this.dialogService.bamInfoDialog.subscribe(function () {
            _this.displayBaminfo = true;
        });
        this.dialogService.expressionInfoDialog.subscribe(function () {
            _this.displayExpressioninfo = true;
        });
        this.dialogService.linkInfoDialog.subscribe(function () {
            _this.displayLinkInfo = true;
        });
        this.dialogService.addProjectDialog.subscribe(function (origin) {
            _this.addProjectDialogVisible = true;
            _this.projectPanel = origin;
        });
        this.dialogService.importFileDialog.subscribe(function (origin) {
            _this.importdialog.open(origin);
        });
        this.dialogService.shareProjectDialog.subscribe(function (project) {
            _this.sharedialog.open(_this.userService.selectedProject.id);
        });
        this.dialogService.paramFastaDialog.subscribe(function (origin) {
            _this.projectPanel = origin;
            _this.confirmFasta();
            _this.showFastaParam = true;
        });
        this.dialogService.linkTableDialog.subscribe(function (input) {
            _this.projectPanel = input.projectPanel;
            _this.linkTable.open(input.file);
        });
        this.dialogService.columnTypeLinkDialog.subscribe(function (input) {
            _this.additionalLinkColumns = input.columns.map(function (x) { return { name: x, value: x, selectedType: 'numeric' }; });
            _this.projectPanel = input.projectPanel;
            _this.linkWorder = input.worker;
            _this.displayAddColumnTypesLink = true;
        });
    };
    DialogContainerComponent.prototype.confirmFasta = function () {
        this.confirmationService.confirm({
            message: '<br>In order to parse your FASTA reference genome, the programs needs the\
          <br>"chromosome signature" of the description lines (starting with ">").\
          <br>This corresponds to what preceeds and follows the chromosome number (0\
          <br>included) or letter.\
          <br>For example:\
          <br>"Chr00-2012-12-18-BGI#" => beginning :Chr; end :-\
          <br>or "1 CHROMOSOME Feb/3/09 16:9" => beginning : ; end : CHROMOSOME\
          <br>(don\'t forget the space before CHROMOSOME)',
            reject: function (event) {
            }
        });
    };
    //moved this outside the confirmFasta() because the reference in html was to cd.accept which wasn't working
    DialogContainerComponent.prototype.accept = function () {
        this.projectPanel.chromosomeSignature.use = true;
        this.cd.hide();
        this.projectPanel.fileupload.el.nativeElement.children[0].children[2].click();
    };
    DialogContainerComponent.prototype.defaultFasta = function () {
        this.projectPanel.chromosomeSignature.use = false;
        this.cd.hide();
        this.projectPanel.fileupload.el.nativeElement.children[0].children[2].click();
    };
    DialogContainerComponent.prototype.confirmLinksType = function () {
        this.projectPanel.confirmLinksType(this.linkWorder, this.additionalLinkColumns);
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('cd'),
        __metadata("design:type", Object)
    ], DialogContainerComponent.prototype, "cd", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('linkTable'),
        __metadata("design:type", Object)
    ], DialogContainerComponent.prototype, "linkTable", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('sharedialog'),
        __metadata("design:type", Object)
    ], DialogContainerComponent.prototype, "sharedialog", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('importdialog'),
        __metadata("design:type", Object)
    ], DialogContainerComponent.prototype, "importdialog", void 0);
    DialogContainerComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-dialog-container',
            template: __webpack_require__(/*! ./dialog-container.component.html */ "./src/app/dialog-container/dialog-container.component.html"),
            styles: [__webpack_require__(/*! ./dialog-container.component.css */ "./src/app/dialog-container/dialog-container.component.css")]
        }),
        __metadata("design:paramtypes", [_dialog_service__WEBPACK_IMPORTED_MODULE_2__["DialogService"], primeng_api__WEBPACK_IMPORTED_MODULE_1__["ConfirmationService"], _user_service__WEBPACK_IMPORTED_MODULE_3__["UserService"]])
    ], DialogContainerComponent);
    return DialogContainerComponent;
}());



/***/ }),

/***/ "./src/app/dialog-container/import-dialog/import-dialog.component.css":
/*!****************************************************************************!*\
  !*** ./src/app/dialog-container/import-dialog/import-dialog.component.css ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "p-table, p-dropdown {\n  margin-bottom: 20px;\n  display: block;\n}\n\n:host {\n  padding-bottom: 30px;\n  text-align: center;\n}\n"

/***/ }),

/***/ "./src/app/dialog-container/import-dialog/import-dialog.component.html":
/*!*****************************************************************************!*\
  !*** ./src/app/dialog-container/import-dialog/import-dialog.component.html ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<p-dialog header=\"Import a file\" [(visible)]=\"importDialogVisible\" [responsive]=\"true\" [width]=\"850\" [minWidth]=\"300\" [minY]=\"70\">\n  <p-dropdown [(options)]=\"projectsListWithoutDisplayed\" [(ngModel)]=\"selectedProjectForImport\" optionLabel=\"title\" editable=\"false\" (onChange)=\"projectToImportChanged()\"></p-dropdown>\n\n  <p-table [columns]=\"cols\" [value]=\"importableFiles\" selectionMode=\"multiple\" [(selection)]=\"filesSelectedForImport\">\n    <ng-template pTemplate=\"header\" let-columns>\n      <tr>\n        <th>\n          Name\n        </th>\n        <th>\n          Format\n        </th>\n      </tr>\n    </ng-template>\n    <ng-template pTemplate=\"body\" let-file let-columns=\"columns\" let-rowIndex=\"rowIndex\">\n      <tr [pSelectableRow]=\"file\" [pSelectableRowIndex]=\"rowIndex\">\n        <td>\n          {{file.name}}\n        </td>\n        <td>\n          {{file.format}}\n        </td>\n      </tr>\n    </ng-template>\n  </p-table>\n\n  <p-button label=\"Import\" (onClick)=\"importFiles()\"></p-button>\n</p-dialog>\n"

/***/ }),

/***/ "./src/app/dialog-container/import-dialog/import-dialog.component.ts":
/*!***************************************************************************!*\
  !*** ./src/app/dialog-container/import-dialog/import-dialog.component.ts ***!
  \***************************************************************************/
/*! exports provided: ImportDialogComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ImportDialogComponent", function() { return ImportDialogComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm5/http.js");
/* harmony import */ var _user_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../user.service */ "./src/app/user.service.ts");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../environments/environment */ "./src/environments/environment.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var ImportDialogComponent = /** @class */ (function () {
    function ImportDialogComponent(userService, http) {
        this.userService = userService;
        this.http = http;
        this.importDialogVisible = false;
    }
    ImportDialogComponent.prototype.ngOnInit = function () {
    };
    ImportDialogComponent.prototype.open = function (origin) {
        this.projectPanel = origin;
        if (this.userService.projects.length > 0) {
            this.projectsListWithoutDisplayed = []; // initialize the array
            for (var i = 0; i < this.userService.projects.length; i++) { // populate it with all the user projects, except the one currently displayed
                if (this.userService.projects[i].title !== this.userService.selectedProject.title) {
                    this.projectsListWithoutDisplayed.push(this.userService.projects[i]);
                }
            }
        }
        this.importDialogVisible = true;
    };
    ImportDialogComponent.prototype.projectToImportChanged = function () {
        var _this = this;
        var url = _environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].host + 'getFilesNames?id=' + this.selectedProjectForImport.id + '&token=' + this.userService.getToken();
        this.http.get(url).subscribe(function (data) {
            if (data) {
                _this.importableFiles = [];
                for (var i = 0; i < data.length; i++) {
                    _this.importableFiles.push({ name: data[i].name, format: data[i].format, id: data[i]._id });
                }
            }
        });
    };
    ImportDialogComponent.prototype.importFiles = function () {
        var _this = this;
        var filesToImportIds = [];
        var filesToImport = [];
        var fileAlreadyExists;
        for (var i = 0; i < this.filesSelectedForImport.length; i++) {
            var existingList = void 0;
            fileAlreadyExists = false;
            switch (this.filesSelectedForImport[i].format) {
                case 'fasta':
                    existingList = this.projectPanel.fastaFiles;
                    break;
                case 'vcf':
                    existingList = this.projectPanel.vcfFiles;
                    break;
                case 'annotation':
                    existingList = this.projectPanel.annotationFiles;
                    break;
                case 'diffExp':
                    existingList = this.projectPanel.DEFiles;
                    break;
                case 'de':
                    existingList = this.projectPanel.DEFiles;
                    break;
                case 'results':
                    existingList = this.projectPanel.expressionFiles;
                    break;
                case 'bam':
                    existingList = this.projectPanel.genomicCovFiles;
                    break;
                case 'bai':
                    existingList = this.projectPanel.genomicCovFiles;
                    break;
                case 'bedcov':
                    existingList = this.projectPanel.transcriptomicCovFiles;
                    break;
            }
            for (var j = 0; j < existingList.length; j++) {
                if (existingList[i].name === this.filesSelectedForImport[i].name) {
                    fileAlreadyExists = true;
                    break;
                }
            }
            if (!fileAlreadyExists) {
                filesToImport.push(this.filesSelectedForImport[i]);
                filesToImportIds.push(this.filesSelectedForImport[i].id);
            }
        }
        var url = _environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].host + 'importFiles';
        this.http.post(url, { project: this.userService.selectedProject.id, files: JSON.stringify(filesToImportIds), token: this.userService.getToken() }).subscribe(function (data) {
            _this.importDialogVisible = false;
            _this.filesSelectedForImport = [];
            for (var i = 0; i < filesToImport.length; i++) {
                switch (filesToImport[i].format) {
                    case 'fasta':
                        _this.projectPanel.fastaFiles.push(filesToImport[i]);
                        break;
                    case 'vcf':
                        _this.projectPanel.vcfFiles.push(filesToImport[i]);
                        break;
                    case 'annotation':
                        _this.projectPanel.annotationFiles.push(filesToImport[i]);
                        break;
                    case 'diffExp':
                        _this.projectPanel.DEFiles.push(filesToImport[i]);
                        break;
                    case 'de':
                        _this.projectPanel.DEFiles.push(filesToImport[i]);
                        break;
                    case 'results':
                        _this.projectPanel.expressionFiles.push(filesToImport[i]);
                        break;
                    case 'bam':
                        _this.projectPanel.genomicCovFiles.push(filesToImport[i]);
                        break;
                    case 'bai':
                        _this.projectPanel.genomicCovFiles.push(filesToImport[i]);
                        break;
                    case 'bedcov':
                        _this.projectPanel.transcriptomicCovFiles.push(filesToImport[i]);
                        break;
                }
            }
        });
    };
    ImportDialogComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-import-dialog',
            template: __webpack_require__(/*! ./import-dialog.component.html */ "./src/app/dialog-container/import-dialog/import-dialog.component.html"),
            styles: [__webpack_require__(/*! ./import-dialog.component.css */ "./src/app/dialog-container/import-dialog/import-dialog.component.css")]
        }),
        __metadata("design:paramtypes", [_user_service__WEBPACK_IMPORTED_MODULE_2__["UserService"], _angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpClient"]])
    ], ImportDialogComponent);
    return ImportDialogComponent;
}());



/***/ }),

/***/ "./src/app/dialog-container/share-dialog/share-dialog.component.css":
/*!**************************************************************************!*\
  !*** ./src/app/dialog-container/share-dialog/share-dialog.component.css ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "p-dialog >>> .ui-dialog{\n  width:40vw;\n}\n\np-table >>> .ui-table{\n  margin-bottom: 25px;\n}\n\n.ui-float-label{\n  margin-top: 2rem;\n  margin-bottom: 2rem;\n}"

/***/ }),

/***/ "./src/app/dialog-container/share-dialog/share-dialog.component.html":
/*!***************************************************************************!*\
  !*** ./src/app/dialog-container/share-dialog/share-dialog.component.html ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\n<p-dialog header=\"Title\" [(visible)]=\"display\" id=\"shareDialogRoot\" #shareDialogRoot>\n\n  <p-table [value]=\"users\" selectionMode=\"multiple\" [(selection)]=\"selectedProjectUsers\">\n    <ng-template pTemplate=\"header\">\n        <tr>\n            <th>First name</th>\n            <th>Last name</th>\n            <th>E-mail</th>\n        </tr>\n    </ng-template>\n    <ng-template pTemplate=\"body\" let-user let-rowIndex=\"rowIndex\">\n        <tr [pSelectableRow]=\"user\" [pSelectableRowIndex]=\"rowIndex\">\n            <td>{{user.firstName}}</td>\n            <td>{{user.lastName}}</td>\n            <td>{{user.email}}</td>\n        </tr>\n    </ng-template>\n</p-table>\n\n<p-button label=\"Remove\" (onClick)=\"removeUsers()\"></p-button>\n\n<span class=\"ui-float-label\">\n    <input type=\"text\" pInputText id=\"searchInput\" (input)=\"onSearchChange($event.target.value)\" [(ngModel)]=\"searchEntry\"/>\n    <label for=\"searchInput\">Search for a user</label>\n</span>\n\n\n\n\n<p-table [value]=\"matchingUsers\" selectionMode=\"single\" [(selection)]=\"selectedMatchingUsers\">\n  <ng-template pTemplate=\"header\">\n      <tr>\n          <th>First name</th>\n          <th>Last name</th>\n          <th>E-mail</th>\n      </tr>\n  </ng-template>\n  <ng-template pTemplate=\"body\" let-user>\n      <tr [pSelectableRow]=\"user\" >\n          <td>{{user.firstName}}</td>\n          <td>{{user.lastName}}</td>\n          <td>{{user.email}}</td>\n      </tr>\n  </ng-template>\n</p-table>\n\n<p-button label=\"Invite\" (onClick)=\"inviteUsers()\"></p-button>\n\n</p-dialog>\n"

/***/ }),

/***/ "./src/app/dialog-container/share-dialog/share-dialog.component.ts":
/*!*************************************************************************!*\
  !*** ./src/app/dialog-container/share-dialog/share-dialog.component.ts ***!
  \*************************************************************************/
/*! exports provided: ShareDialogComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShareDialogComponent", function() { return ShareDialogComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm5/http.js");
/* harmony import */ var _user_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../user.service */ "./src/app/user.service.ts");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../environments/environment */ "./src/environments/environment.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var ShareDialogComponent = /** @class */ (function () {
    function ShareDialogComponent(userService, http) {
        this.userService = userService;
        this.http = http;
        this.users = [];
        this.matchingUsers = [];
        this.display = false;
    }
    ShareDialogComponent.prototype.ngOnInit = function () {
    };
    ShareDialogComponent.prototype.open = function (project) {
        this.project = project;
        this.display = true;
        this.getUsers(project);
    };
    ShareDialogComponent.prototype.getUsers = function (project) {
        var _this = this;
        var url = _environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].host + "getProjectUsers?project=" + project;
        this.http.get(url).subscribe(function (data) {
            _this.users = data;
        }, function (error) {
            console.log(error);
        });
    };
    ShareDialogComponent.prototype.getMatchingUsers = function (input) {
        var _this = this;
        if (input.length > 0) {
            var url = _environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].host + "getMatchingUsers?input=" + input;
            this.http.get(url).subscribe(function (data) {
                _this.matchingUsers = data;
            }, function (error) {
                console.log(error);
            });
        }
        else {
            this.matchingUsers = [];
        }
    };
    ShareDialogComponent.prototype.onSearchChange = function (input) {
        this.getMatchingUsers(input);
    };
    ShareDialogComponent.prototype.inviteUsers = function () {
        var _this = this;
        var url = _environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].host + "inviteUsers";
        this.http.post(url, { project: this.project, user: this.selectedMatchingUsers.id }).subscribe(function (data) {
            _this.users = _this.users.concat(_this.selectedMatchingUsers);
            _this.searchEntry = "";
            _this.selectedMatchingUsers = [];
            _this.matchingUsers = [];
        }, function (error) {
            console.log(error);
        });
    };
    ShareDialogComponent.prototype.removeUsers = function () {
        var _this = this;
        var url = _environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].host + "removeUsersFromProject";
        var users = [];
        for (var i = 0; i < this.selectedProjectUsers.length; i++) {
            if (this.selectedProjectUsers[i].id != this.userService.getID()) {
                users.push(this.selectedProjectUsers[i].id);
            }
        }
        this.http.post(url, { project: this.project, users: JSON.stringify(users) }).subscribe(function (data) {
            for (var i = 0; i < _this.selectedProjectUsers.length; i++) {
                _this.users.splice(_this.users.indexOf(_this.selectedProjectUsers[i]), 1);
            }
            _this.selectedProjectUsers = [];
        }, function (error) {
            console.log(error);
        });
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('shareDialogRoot'),
        __metadata("design:type", Object)
    ], ShareDialogComponent.prototype, "shareDialogRoot", void 0);
    ShareDialogComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'share-dialog',
            template: __webpack_require__(/*! ./share-dialog.component.html */ "./src/app/dialog-container/share-dialog/share-dialog.component.html"),
            styles: [__webpack_require__(/*! ./share-dialog.component.css */ "./src/app/dialog-container/share-dialog/share-dialog.component.css")]
        }),
        __metadata("design:paramtypes", [_user_service__WEBPACK_IMPORTED_MODULE_2__["UserService"], _angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpClient"]])
    ], ShareDialogComponent);
    return ShareDialogComponent;
}());



/***/ }),

/***/ "./src/app/dialog.service.ts":
/*!***********************************!*\
  !*** ./src/app/dialog.service.ts ***!
  \***********************************/
/*! exports provided: DialogService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DialogService", function() { return DialogService; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var rxjs_Rx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs/Rx */ "./node_modules/rxjs-compat/_esm5/Rx.js");
/* harmony import */ var rxjs_Subject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs/Subject */ "./node_modules/rxjs-compat/_esm5/Subject.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var DialogService = /** @class */ (function () {
    function DialogService() {
        this.fastaDialog = new rxjs_Subject__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
        this.vcfInfoDialog = new rxjs_Subject__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
        this.gffInfoDialog = new rxjs_Subject__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
        this.bedInfoDialog = new rxjs_Subject__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
        this.diffInfoDialog = new rxjs_Subject__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
        this.bamInfoDialog = new rxjs_Subject__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
        this.expressionInfoDialog = new rxjs_Subject__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
        this.linkInfoDialog = new rxjs_Subject__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
        this.shareProjectDialog = new rxjs_Subject__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
        this.importFileDialog = new rxjs_Subject__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
        this.addProjectDialog = new rxjs_Subject__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
        this.paramFastaDialog = new rxjs_Subject__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
        this.linkTableDialog = new rxjs_Subject__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
        this.columnTypeLinkDialog = new rxjs_Subject__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
        this.fileInfoDialog = new rxjs_Subject__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
    }
    DialogService = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [])
    ], DialogService);
    return DialogService;
}());



/***/ }),

/***/ "./src/app/display-settings.service.ts":
/*!*********************************************!*\
  !*** ./src/app/display-settings.service.ts ***!
  \*********************************************/
/*! exports provided: DisplaySettingsService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DisplaySettingsService", function() { return DisplaySettingsService; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var DisplaySettingsService = /** @class */ (function () {
    function DisplaySettingsService() {
    }
    DisplaySettingsService = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [])
    ], DisplaySettingsService);
    return DisplaySettingsService;
}());



/***/ }),

/***/ "./src/app/genoverse/genoverse.component.css":
/*!***************************************************!*\
  !*** ./src/app/genoverse/genoverse.component.css ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#genoverse{\n  padding: 0;\n}\n\np-sidebar{\n  height:400px;\n}\n\np-sidebar >>> .ui-sidebar-close{\n  display: none;\n}\n\np-sidebar >>> .ui-sidebar{\n  padding: 0;\n  height: auto;\n  z-index: 1100;\n}\n"

/***/ }),

/***/ "./src/app/genoverse/genoverse.component.html":
/*!****************************************************!*\
  !*** ./src/app/genoverse/genoverse.component.html ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<p-sidebar #sidebar [(visible)]=\"display\" position=\"bottom\" [(visible)]=\"display\" showCloseIcon=\"false\">\n  <div id=\"genoverse\" #genoverse>\n  </div>\n</p-sidebar>\n"

/***/ }),

/***/ "./src/app/genoverse/genoverse.component.ts":
/*!**************************************************!*\
  !*** ./src/app/genoverse/genoverse.component.ts ***!
  \**************************************************/
/*! exports provided: GenoverseComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GenoverseComponent", function() { return GenoverseComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var GenoverseComponent = /** @class */ (function () {
    function GenoverseComponent() {
        this.genoverse = undefined;
        this.display = false;
        this.currentConfig = null;
    }
    GenoverseComponent.prototype.ngOnInit = function () {
        // console.log("genoverse is initted");
    };
    GenoverseComponent.prototype.update = function (config) {
        this.genoverse.reset(config);
        window.scrollTo(0, document.body.scrollHeight);
    };
    GenoverseComponent.prototype.reset = function (config) {
        this.display = true;
        if (this.currentConfig && JSON.stringify(config.files) === JSON.stringify(this.currentConfig.files)) {
            this.update(config);
        }
        else {
            this.currentConfig = config;
            this.container.nativeElement.innerHTML = '';
            var genome = {};
            genome[config.chr.id] = { size: config.chr.size, bands: [] };
            var tracks = [Genoverse.Track.Scalebar];
            for (var _i = 0, _a = config.files.annotation; _i < _a.length; _i++) {
                var annotationFile = _a[_i];
                tracks.push(Genoverse.Track.Gene.extend({
                    name: annotationFile.name,
                    urlParams: { fileID: annotationFile.id }
                }));
            }
            for (var _b = 0, _c = config.files.vcf; _b < _c.length; _b++) {
                var vcfFile = _c[_b];
                tracks.push(Genoverse.Track.dbSNP.extend({
                    name: vcfFile.name,
                    urlParams: { fileID: vcfFile.id }
                }));
            }
            this.genoverse = new Genoverse({
                container: '#genoverse',
                // If no genome supplied, it must have at least chromosomeSize, e.g.:
                // chromosomeSize : 249250621, // chromosome 1, human
                // genome: 'grch38', // see js/genomes/
                width: this.sidebar.containerViewChild.nativeElement.clientWidth,
                genome: genome,
                chr: config.chr.id,
                start: config.start,
                end: config.end,
                plugins: ['controlPanel', 'karyotype', 'trackControls', 'resizer', 'focusRegion', 'fullscreen', 'tooltips', 'fileDrop'],
                tracks: tracks
            });
        }
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('genoverse'),
        __metadata("design:type", Object)
    ], GenoverseComponent.prototype, "container", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('sidebar'),
        __metadata("design:type", Object)
    ], GenoverseComponent.prototype, "sidebar", void 0);
    GenoverseComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'genoverse',
            template: __webpack_require__(/*! ./genoverse.component.html */ "./src/app/genoverse/genoverse.component.html"),
            styles: [__webpack_require__(/*! ./genoverse.component.css */ "./src/app/genoverse/genoverse.component.css")]
        }),
        __metadata("design:paramtypes", [])
    ], GenoverseComponent);
    return GenoverseComponent;
}());



/***/ }),

/***/ "./src/app/loading.service.ts":
/*!************************************!*\
  !*** ./src/app/loading.service.ts ***!
  \************************************/
/*! exports provided: LoadingService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoadingService", function() { return LoadingService; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var LoadingService = /** @class */ (function () {
    function LoadingService() {
        this.isCharging = false;
        this.start = 0;
    }
    LoadingService.prototype.toggleIsCharging = function () {
        this.isCharging = !this.isCharging;
    };
    LoadingService = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])(),
        __metadata("design:paramtypes", [])
    ], LoadingService);
    return LoadingService;
}());



/***/ }),

/***/ "./src/app/material-module.ts":
/*!************************************!*\
  !*** ./src/app/material-module.ts ***!
  \************************************/
/*! exports provided: DemoMaterialModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DemoMaterialModule", function() { return DemoMaterialModule; });
/* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm5/a11y.es5.js");
/* harmony import */ var _angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/stepper */ "./node_modules/@angular/cdk/esm5/stepper.es5.js");
/* harmony import */ var _angular_cdk_table__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/table */ "./node_modules/@angular/cdk/esm5/table.es5.js");
/* harmony import */ var _angular_cdk_tree__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/tree */ "./node_modules/@angular/cdk/esm5/tree.es5.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

// import {DragDropModule} from '@angular/cdk/drag-drop';
// import {ScrollingModule} from '@angular/cdk/scrolling';





var DemoMaterialModule = /** @class */ (function () {
    function DemoMaterialModule() {
    }
    DemoMaterialModule = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_4__["NgModule"])({
            exports: [
                _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["A11yModule"],
                _angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_1__["CdkStepperModule"],
                _angular_cdk_table__WEBPACK_IMPORTED_MODULE_2__["CdkTableModule"],
                _angular_cdk_tree__WEBPACK_IMPORTED_MODULE_3__["CdkTreeModule"],
                // DragDropModule,
                _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatAutocompleteModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatBadgeModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatBottomSheetModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatButtonModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatButtonToggleModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatCardModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatCheckboxModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatChipsModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatStepperModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatDatepickerModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatDialogModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatDividerModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatExpansionModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatGridListModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatIconModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatInputModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatListModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatMenuModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatNativeDateModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatPaginatorModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatProgressBarModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatProgressSpinnerModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatRadioModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatRippleModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatSelectModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatSidenavModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatSliderModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatSlideToggleModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatSnackBarModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatSortModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatTableModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatTabsModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatToolbarModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatTooltipModule"],
            ]
        })
    ], DemoMaterialModule);
    return DemoMaterialModule;
}());

/**  Copyright 2018 Google Inc. All Rights Reserved.
    Use of this source code is governed by an MIT-style license that
    can be found in the LICENSE file at http://angular.io/license */ 


/***/ }),

/***/ "./src/app/parser.service.ts":
/*!***********************************!*\
  !*** ./src/app/parser.service.ts ***!
  \***********************************/
/*! exports provided: ParserService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ParserService", function() { return ParserService; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var ParserService = /** @class */ (function () {
    function ParserService() {
        this.self = this;
    }
    //Detect the file type and return the type
    ParserService.prototype.parseFile = function (file, callback) {
        var reader = new FileReader();
        var _this = this;
        reader.onload = (function (theFile) {
            return function (e) {
                var extension = file.name.split('.');
                extension = extension[extension.length - 1];
                console.log(extension);
                var result = { format: "", data: {} };
                if (extension == "fasta") {
                }
                switch (extension) {
                    case "fasta": {
                        result.format = "fasta";
                        result.data = _this.parse_fasta(e.target.result);
                        break;
                    }
                    case "fa": {
                        console.log(".fa");
                        result.format = "fasta";
                        result.data = _this.parse_fasta(e.target.result);
                        break;
                    }
                    case "gff3": {
                        result.format = "annotation";
                        result.data = _this.parse_GFF_GTF(e.target.result);
                        break;
                    }
                    case "gff2": {
                        result.format = "annotation";
                        result.data = _this.parse_GFF_GTF(e.target.result);
                        break;
                    }
                    case "gff": {
                        result.format = "annotation";
                        result.data = _this.parse_GFF_GTF(e.target.result);
                        break;
                    }
                    case "gtf": {
                        result.format = "annotation";
                        result.data = _this.parse_GFF_GTF(e.target.result);
                        break;
                    }
                    case "diff": {
                        result.format = "diffExp";
                        result.data = _this.parse_DIFF(e.target.result);
                        break;
                    }
                    case "bed": {
                        break;
                    }
                    case "bedcov": {
                        break;
                    }
                    case "vcf": {
                        //Need further information from user to differenciate SNP density / Genomic Coverage
                        result.format = "vcf";
                        result.data = _this.parse_vcf(e.target.result);
                        break;
                    }
                    case "bam": {
                        //BINARY File
                        break;
                    }
                    case "results": {
                        break;
                    }
                    default: {
                        console.log("Error, the file extension is not correct");
                    }
                }
                callback(result);
            };
        })(file);
        reader.readAsText(file);
    };
    //Fasta parser to biocircos matrix to Genome Configuration Matrix
    ParserService.prototype.parse_fasta = function (text) {
        var fastaMatrix = [];
        var textArray = [];
        // catch empty string
        if (!text || (text.length === 0)) {
            console.log("Empty String !");
            return [];
        }
        //Split by line if the text is not an array already
        if (Object.prototype.toString.call(text) !== '[object Array]') {
            textArray = text.split("\n");
        }
        var currentLength = 0;
        for (var i = 0; i < textArray.length; i++) {
            var line = textArray[i];
            //Check if the line is a header
            if ((line[0] === ">") || (line[0] === ";")) {
                //First line
                if (!label || (label.length === 0)) {
                    var label = line.slice(1);
                    //NEED TO UNIFY ALL OF THE CHROMOSOME LABELS ! HERE :
                    // ...
                    // NEED TO UNIFY ALL OF THE CHROMOSOME LABELS !
                }
                else {
                    //Add entry to list_chromosomes_length
                    var chromosome_length = [this.numberInChromosome(label), currentLength];
                    console.log(chromosome_length);
                    fastaMatrix.push(chromosome_length);
                    label = line.slice(1);
                    currentLength = 0;
                }
            }
            else {
                //Increase the length
                currentLength = currentLength + line.length;
            }
        }
        //Add last entry to list_chromosome_length
        var chromosome_length = [this.numberInChromosome(label), currentLength];
        fastaMatrix.push(chromosome_length);
        return fastaMatrix;
    };
    //Parsing BAM files
    ParserService.prototype.parse_BAM = function (bamFile, baiFile) {
        console.log(bamFile);
        console.log(baiFile);
        var _this = this;
        var minBinSize = 100000;
        var currentBin = minBinSize;
        var value = 0;
        var list_genomic_coverage = [];
        var chromosome = [];
        var chromosome_index = 0;
        var maxChromosomeSize = 100000000;
        var test = '';
        var chromosomeList = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "X", "Y"];
        var bam = new Bam(bamFile, { bai: baiFile });
        var jumped = false;
        for (var i = 0; i < chromosomeList.length; i++) {
            console.log("into parse_BAM de while");
            bam.fetch(chromosomeList[i], 1, maxChromosomeSize, function (records) {
                records.forEach(function (item) {
                    if (item.pos < currentBin) {
                        value += item.seq;
                        //console.log("Match");
                    }
                    else {
                        var read = new BAMread(_this.numberInChromosome(chromosomeList[chromosome_index]), currentBin, value / minBinSize);
                        //console.log(chromosomeList[chromosome_index] + JSON.stringify(read, null, 4));
                        chromosome.push(read);
                        while (item.pos > currentBin + minBinSize) {
                            currentBin += minBinSize;
                            var read = new BAMread(_this.numberInChromosome(chromosomeList[chromosome_index]), currentBin, 0);
                            chromosome.push(read);
                            //console.log(_this.numberInChromosome(chromosomeList[chromosome_index])+ JSON.stringify(read, null, 4));
                        }
                        value = item.seq;
                        currentBin += minBinSize;
                        //console.log("NewBin");
                    }
                });
                var read = new BAMread(_this.numberInChromosome(chromosomeList[chromosome_index]), currentBin, value / minBinSize);
                console.log("New Chromosome");
                chromosome.push(read);
                //list_genomic_coverage.push(chromosome);
                //chromosome=[];
                chromosome_index++;
                value = 0;
                currentBin = 0;
            });
        }
        //return list_genomic_coverage;
        return chromosome;
    };
    //Parsing VCF files
    ParserService.prototype.parse_vcf = function (text) {
        var list_VCF_File = [];
        var line;
        // catch empty string
        if (!text || (text.length === 0)) {
            return [];
        }
        var textSplit = [];
        //Split by line if the text is not an array already
        if (Object.prototype.toString.call(text) !== '[object Array]') {
            textSplit = text.split("\n");
        }
        for (var i = 0; i < textSplit.length - 1; i++) {
            line = textSplit[i];
            if (line.charAt(0) !== "#") {
                line = line.split('\t');
                var information = { chr: this.numberInChromosome(line[0]), pos: line[1], value: line[5], des: line[2], color: "rgb(153,102,0)" };
                list_VCF_File.push(information);
            }
        }
        return list_VCF_File;
    };
    //GFF3 Annotation Parser to Biocircus ARC matrix
    //Parser
    ParserService.prototype.parse_GFF_GTF = function (text) {
        console.log("Parsing  a GTF file.");
        var list_annotation = [];
        var textArray = [];
        // catch empty string
        if (!text || (text.length === 0)) {
            console.log("File is empty");
            return [];
        }
        //Split by line if the text is not an array already
        if (Object.prototype.toString.call(text) !== '[object Array]') {
            textArray = text.split("\n");
        }
        for (var i = 0; i < textArray.length; i++) {
            var line = textArray[i];
            //Check if the line is a header
            if ((line[0] === "#") || (line[0] === ";") || (line[0] === "\n") || (line[0] === undefined)) {
            }
            else {
                line = line.split("\t");
                var pattern = /;Name=[A-Za-z0-9_-]*/;
                var desName = line[8].match(pattern);
                if (!desName || (desName.length === 0)) {
                    desName = ["Des=NA"];
                }
                //Choose color according to the feature type (line[2])
                var colour = "";
                if (line[2] == "gene" || line[2] == "mRNA")
                    colour = "green";
                else
                    colour = "red";
                if (line[2] != "chromosome") {
                    var row = new AnnotationLine(this.numberInChromosome(line[0]), line[3], line[4], colour, desName[0].split("=")[1]);
                    console.log(row.chr + " " + row.start + " " + row.end + " " + row.color + " " + row.des);
                    list_annotation.push(row);
                }
            }
        }
        return list_annotation;
    };
    ParserService.prototype.parse_DIFF = function (text) {
        console.log("Parsing  a diff file.");
        var list_diff = [];
        var textArray;
        // catch empty string
        if (!text || (text.length === 0)) {
            console.log("File is empty");
            return [];
        }
        //Split by line if the text is not an array already
        if (Object.prototype.toString.call(text) !== '[object Array]') {
            textArray = text.split("\n");
        }
        for (var i = 1; i < textArray.length; i++) {
            var line = textArray[i];
            //Check if the line is a header
            line = line.split("\t");
            if (line[line.length - 1] != "no") {
                if (line[3]) {
                    var locus = line[3].split(":");
                    var chromosome = locus[0];
                    var row = new DiffLine(this.numberInChromosome(locus[0]), locus[1].split("-")[0], locus[1].split("-")[1], line[2], line[9]);
                    console.log(row.chr + " " + row.start + " " + row.end + " " + row.name + " " + row.value);
                    list_diff.push(row);
                }
            }
        }
        return list_diff;
    };
    ParserService.prototype.numberInChromosome = function (chromosome) {
        var pattern = /\d*[^.]$/;
        var chromosomeNumber = String(chromosome).match(pattern)[0];
        if (String(chromosomeNumber).charAt(0) === "0") {
            chromosomeNumber = String(chromosomeNumber).charAt(1);
        }
        //console.log(chromosomeNumber);
        return String(chromosomeNumber);
    };
    ParserService = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])()
    ], ParserService);
    return ParserService;
}());

//DiffLine Object
var DiffLine = /** @class */ (function () {
    function DiffLine(chr, start, end, name, value) {
        this.chr = chr;
        this.start = start;
        this.end = end;
        this.name = name;
        this.value = value;
    }
    return DiffLine;
}());
//Annotation Object
var AnnotationLine = /** @class */ (function () {
    function AnnotationLine(chr, start, end, color, des) {
        this.chr = chr;
        this.start = start;
        this.end = end;
        this.color = color;
        this.des = des;
    }
    return AnnotationLine;
}());
var BAMread = /** @class */ (function () {
    function BAMread(chr, pos, depth) {
        this.chr = chr;
        this.pos = pos;
        this.value = depth;
    }
    return BAMread;
}());


/***/ }),

/***/ "./src/app/profile/profile.component.css":
/*!***********************************************!*\
  !*** ./src/app/profile/profile.component.css ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ":root {\n  --header-footer: #24292e;\n  --accent: #a2e785;\n  --background: #eae7ed;\n  --homelogo: #ffffff;\n  --genomeGitWeb: #80c962;\n  --menuItems: #ffffff;\n  --signIn: #ffffff;\n  --foreground: #f6f8fa;\n  --textLight: #ffffff;\n  --textDark: #24292e;\n  --textDarkUnfocused: #889aad;\n  --button-hover: #596470;\n  --shadow: 0 1px 5px rgba(100, 100, 100, 0.5);\n  --searchbarShadow: 0 1px 5px rgba(0, 255, 0, 1);\n  --searchbarShadowHover: 0 1px 15px rgba(0, 255, 0, 1);\n  --searchbarShadowHoverInside: inset 1px 15px rgba(0, 255, 0, 1);\n  --logos: #5f5f5f;\n  --footerText: #80c962;\n}\n\ntable {\n  margin: 2.5%;\n  border-radius: 4px;\n}\n\ntr{\n  border-bottom: 1px solid #ddd;\n}\n\ntr:hover{\n  background-color: lightgray;\n}\n\ntd {\n  padding: 10px;\n}\n\nth {\n  padding: 10px;\n}\n\n#project-headers {\n  /* display: grid; */\n  /* grid-template-columns: 50% 50%; */\n  border-bottom: 1px solid lightgrey;\n  height: 4.9rem;\n  text-align: center;\n  padding-left: 0;\n  padding-top: 1.5vh;\n  /* font-weight: bold; */\n  color: gray;\n  background-color: rgb(250, 251, 250);\n}\n\n.projects {\n  height: 100%;\n  width: 25%;\n  position: fixed;\n  /* z-index: 1; */\n  top: 0;\n  left: 0;\n  overflow-x: hidden;\n  /* padding-top: 10px; */\n  border-right: 1px solid lightgrey;\n  margin-top: 6rem;\n}\n\n/* .project-list:focus {\n      color: aqua;\n  } */\n\n.project-list:hover {\n  cursor: pointer;\n}\n\n.project-list {\n  color: black;\n  /* margin-right: 6rem; */\n  color: rgb(72, 159, 240);\n}\n\n.privacy {\n  float: right;\n  padding-right: 15px;\n}\n\n.rightside-box {\n  width: 75%;\n  float: right;\n  overflow: hidden;\n  /* height: 100%; */\n  /* background: rgb(241, 248, 250); */\n  background: rgb(246, 248, 250);\n  position: absolute;\n  top: 0;\n  /* bottom: 0; */\n  margin-left: 25%;\n  margin-top: 6rem;\n}\n\n.files-div {\n  height: 100%;\n  /* margin-left: 35%; */\n}\n\n.files-table {\n  border-collapse: collapse;\n  width: 95%;\n  border: 1px solid lightgrey;\n  background: white;\n}\n\nthead {\n  padding-top: 12px;\n  padding-bottom: 12px;\n  text-align: left;\n  background-color: rgb(241, 248, 254);\n  color: black;\n  border: 1px solid lightblue;\n  padding: 8px;\n}\n\n.fixed-or-not{\n  float: left;\n}\n\n.format {\n  border-top: 1px solid #ddd;\n  border-bottom: 1px solid #ddd;\n  padding: 8px;\n  color: rgb(88, 96, 104);\n}\n\n.file-name {\n  /* border: 1px solid #ddd; */\n  border-top: 1px solid #ddd;\n  border-bottom: 1px solid #ddd;\n  padding: 8px;\n  color: rgb(11, 88, 161);\n}\n\n.table-row:nth-child(even) {\n  background-color: rgb(255, 255, 255);\n}\n\n.table-row:hover {\n  background-color: rgb(237, 239, 241);\n}\n\n.issues-table {\n  width: 95%;\n  border-collapse: collapse;\n  border: 1px solid lightgray;\n  border-radius: 4px;\n  background: white;\n}\n\n.issues-list {\n  border-bottom: 1px solid #ddd;\n}\n\n.description {\n  color: rgb(88, 96, 104);\n  margin-left: 2.5%;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  font-style: italic;\n}\n\n.noDescriptionForm{\n  width: 95%;\n  border: 1px solid lightgray;\n  border-radius: 4px;\n  margin-left: 2.5%;\n  padding: 3rem;\n  /* height: 21rem; */\n  padding-bottom: 7.5rem;\n  background: white;\n}\n\n.editDescription {\n  /* margin: 0px; */\n  border: 1px solid lightgray;\n  border-radius: 4px;\n  height: 9rem;\n}\n\n.material-icons {\n  cursor: pointer;\n}\n\n.description-button {\n  /* margin: 1rem 3rem; */\n  float: right;\n  margin-top: 2rem;\n  background: var(--genomeGitWeb);\n}\n\n.new-issue {\n  /* margin-top: 20px; */\n  /* width: 95%; */\n  width: calc(100% - 4rem);\n  border: 1px solid lightgrey;\n  margin-left: 2.5%;\n  border-radius: 4px;\n  /* height: 40px; */\n  align-content: flex-end;\n  background: white;\n}\n\n.new-issue-p {\n  /* padding: 20px; */\n  margin-left: 30px;\n  margin-top: 20px;\n  color: gray;\n}\n\nmat-form-field {\n  /* margin: 5rem 2rem 2rem 2rem; */\n  width: calc(100% - 4rem);\n  /* width: 100%; */\n}\n\n.example-form{\n  margin: 5rem 2rem 2rem 2rem;\n}\n\n#project-privacy {\n  padding-left: 34%;\n}\n\n.issue-comment {\n  margin: 2rem;\n  margin-top: 0;\n  width: calc(100% - 4rem);\n  min-height: 100px;\n  border-radius: 4px;\n  border: 1px solid lightgray;\n}\n\n.issue-button {\n  margin: 2rem;\n  margin-top: 0;\n  width: 15%;\n  margin-left: calc(85% - 2rem);\n  background: var(--genomeGitWeb);\n  color: white;\n}\n\n.solved-button{\n  font-size:17px;\n  background: var(--genomeGitWeb);\n  color: white;\n}\n\n.radio-group {\n  border: 1px solid lightgray;\n  padding-right: 20px;\n  padding-left: 20px;\n  padding-bottom: 20px;\n  margin: 2.5%;\n  width: 95%;\n  border-radius: 4px;\n  background: white;\n}\n\n.subhead {\n  border-bottom: 1px solid lightgray;\n  margin-bottom: 16px;\n}\n\n.subhead-heading {\n  font-size: 20px;\n}\n\n::ng-deep\n  .mat-radio-button.mat-accent.mat-radio-checked\n  .mat-radio-outer-circle {\n  border-color: var(--genomeGitWeb);\n}\n\n::ng-deep .mat-radio-button.mat-accent .mat-radio-inner-circle {\n  color: rgb(66, 134, 244);\n  background-color: var(--genomeGitWeb);\n}\n\n::ng-deep .mat-radio-button.mat-accent .mat-radio-ripple .mat-ripple-element {\n  background-color: rgb(255, 37, 37, 0.26);\n}\n\n.collab-table {\n  width: 95%;\n  border-collapse: collapse;\n  border: 1px solid lightgray;\n  border-radius: 4px;\n  z-index: 0;\n  background: white;\n}\n\n.collab-form {\n  /* margin: 2rem; */\n  width: 95%;\n  border-radius: 4px;\n  border: solid 1px lightgray;\n  padding-left: 2rem;\n  margin: 2.5%;\n  display: -ms-grid;\n  display: grid;\n  -ms-grid-columns: 80% 20%;\n      grid-template-columns: 80% 20%;\n  align-items: center;\n  background: white;\n}\n\n::ng-deep .mat-form-field-wrapper {\n  /* background: red; */\n  width: 100%;\n  margin-left:20px;\n  margin-top: 15px;\n  /* margin-bottom: 10px; */\n}\n\n.collab-button {\n  background: var(--genomeGitWeb);\n  float: right;\n  /* margin: 15%; */\n  height: 40px;\n  width: 130px;\n  margin-left: 10px;\n}\n\n::ng-deep .rightside-box .mat-tab-list .mat-tab-labels {\n  background-color: rgb(250, 251, 250);\n}"

/***/ }),

/***/ "./src/app/profile/profile.component.html":
/*!************************************************!*\
  !*** ./src/app/profile/profile.component.html ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<link\n  rel=\"stylesheet\"\n  href=\"https://use.fontawesome.com/releases/v5.8.1/css/all.css\"\n  integrity=\"sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf\"\n  crossorigin=\"anonymous\"\n/>\n<!-- <div class=\"container-page\"> -->\n<form>\n  <div class=\"projects\">\n    <ul id=\"project-headers\">\n      <p>Select a Project</p>\n    </ul>\n    <ul *ngFor=\"let project of userService.projects; let i = index\">\n      <a\n        *ngIf=\"!projectClicked || project.title !== projectSelected.title\"\n        class=\"project-list\"\n        (click)=\"projectChosen(project.id)\"\n        ><b>{{ project.title }}</b></a\n      >\n      <a\n        *ngIf=\"projectClicked && project.title === projectSelected.title\"\n        class=\"project-list\"\n        (click)=\"projectChosen(project.id)\"\n        style=\"color: darkblue\"\n        ><b>{{ project.title }}</b></a\n      >\n      <!-- <i\n        class=\"material-icons\"\n        *ngIf=\"projectClicked && project.title === projectSelected.title\"\n        style=\"font-size: 15px; display: inline; color: #80c962; vertical-align: text-top\"\n        >fiber_manual_record</i\n      > -->\n    </ul>\n  </div>\n  <div class=\"rightside-box\">\n    <mat-tab-group>\n      <mat-tab label=\"Files\">\n        <div *ngIf=\"projectClicked\" class=\"files-div\" class=\"tab\">\n          <ng-container\n            *ngIf=\"\n              projectSelected.description;\n              then isDescription;\n              else noDescription\n            \"\n          ></ng-container>\n          <ng-template #isDescription>\n            <p class=\"description\" #projectDesc>\n              {{ projectSelected.description }}\n              <i\n                class=\"material-icons\"\n                matTooltip=\"Add or Update Project Description\"\n                style=\"margin-left: 2rem;\"\n                (click)=\"updateDescription()\"\n              >\n                edit\n              </i>\n            </p>\n          </ng-template>\n          <ng-template #noDescription>\n            <p class=\"description\">\n              No description provided.\n              <i\n                class=\"material-icons\"\n                matTooltip=\"Edit Project Description\"\n                style=\"margin-left: 2rem\"\n                (click)=\"updateDescription()\"\n              >\n                edit\n              </i>\n            </p>\n          </ng-template>\n          <form *ngIf=\"editDescription\" class=\"noDescriptionForm\">\n            <!-- <mat-form-field> -->\n            <div>\n             <textarea *ngIf=\"projectSelected.description\"\n                matInput\n                class=\"editDescription\"\n                placeholder=\"Add a project description\"\n                type=\"text\"\n                name=\"editDescription\"\n                [(ngModel)]=\"description\"\n                title=\"Add a project description\"\n              >{{projectSelected.description}}</textarea>\n              <textarea *ngIf=\"!projectSelected.description\"\n                matInput\n                class=\"editDescription\"\n                placeholder=\"Add a project description\"\n                [(ngModel)]=\"description\"\n                name=\"editDescription\"\n                type=\"text\"\n                title=\"Add a project description\"\n              ></textarea>\n              <!-- </mat-form-field> -->\n              <button type=\"button\"\n                *ngIf=\"editDescription\"\n                class=\"description-button\"\n                mat-raised-button\n                (click)=\"submitDescription(description, projectID); projectChosen(projectID); descriptionEdited()\"\n              >\n                Submit Description\n              </button>\n            </div>\n          </form>\n          <table class=\"files-table\">\n            <caption style=\"font-size:17px\">Project Files</caption>\n            <thead>\n              <th>File Format</th>\n              <th>File Names</th>\n            </thead>\n            <tbody>\n              <tr class=\"table-row\" *ngFor=\"let fasta of fastaFiles\">\n                <td class=\"format\">{{ fasta.format }}</td>\n                <td class=\"file-name\">{{ fasta.name }}</td>\n              </tr>\n              <tr class=\"table-row\" *ngFor=\"let gff of annotationFiles\">\n                <td class=\"format\">{{ gff.format }}</td>\n                <td class=\"file-name\">{{ gff.name }}</td>\n              </tr>\n              <tr class=\"table-row\" *ngFor=\"let vcf of vcfFiles\">\n                <td class=\"format\">{{ vcf.format }}</td>\n                <td class=\"file-name\">{{ vcf.name }}</td>\n              </tr>\n              <tr class=\"table-row\" *ngFor=\"let def of DEFiles\">\n                <td class=\"format\">{{ def.format }}</td>\n                <td class=\"file-name\">{{ def.name }}</td>\n              </tr>\n              <tr class=\"table-row\" *ngFor=\"let gC of genomicCovFiles\">\n                <td class=\"format\">{{ gC.format }}</td>\n                <td class=\"file-name\">{{ gC.name }}</td>\n              </tr>\n              <tr class=\"table-row\" *ngFor=\"let tC of transcriptomicCovFiles\">\n                <td class=\"format\">{{ tC.format }}</td>\n                <td class=\"file-name\">{{ tC.name }}</td>\n              </tr>\n              <tr class=\"table-row\" *ngFor=\"let ex of expressionFiles\">\n                <td class=\"format\">{{ ex.format }}</td>\n                <td class=\"file-name\">{{ ex.name }}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </mat-tab>\n      <mat-tab label=\"Issues\">\n        <div *ngIf=\"projectClicked\" class=\"tab\">\n         <p class=\"new-issue-p\">Add a New Issue</p>\n          <div class=\"new-issue\">\n            <form class=\"example-form-issues\">\n              <mat-form-field class=\"example-full-width\">\n                <mat-error *ngIf=\"issueFormControl.hasError('required')\"\n                  >Please enter an issue title</mat-error\n                >\n                <input\n                  matInput\n                  [formControl]=\"issueFormControl\"\n                  [errorStateMatcher]=\"matcher\"\n                  class=\"issue-title\"\n                  type=\"text\"\n                  placeholder=\"Title\"\n                  id=\"issue-title\"\n                  #issuetitle\n                  name=\"issue-title\"\n                />\n              </mat-form-field>\n              <textarea\n                class=\"issue-comment\"\n                type=\"text\"\n                placeholder=\"Leave a comment\"\n                id=\"issue-comment\"\n                #issuecomment\n              ></textarea>\n              <button type=\"reset\"\n                [disabled]=\"issueFormControl.hasError('required')\"\n                class=\"issue-button\"\n                mat-raised-button\n                (click)=\"\n                  submitIssue(\n                    issuetitle.value,\n                    issuecomment.value,\n                    projectID,\n                    userID\n                  ); projectChosen(projectID)\n                \"\n              >\n                Submit Issue\n              </button>\n            </form>\n          </div>\n          <ng-container *ngIf=\"projectSelected.issues\">\n              \n            <table class=\"issues-table\">\n                <caption class=\"issues-table-caption\">Project Issues<button class=\"solved-button\"\n                  mat-raised-button (click)=\"viewSolved()\" style=\"float: right; width: auto\">View Solved Issues</button></caption>\n              <thead>\n                <th>Issue</th>\n                <th>Comment</th>\n                <th>Solved</th>\n                <th>Submitted</th>\n                <th>Submitted by</th>\n              </thead>\n              <ng-container\n                *ngFor=\"\n                  let issue of projectSelected.issues.slice().reverse();\n                  let i = index\n                \"\n              >\n                <tr *ngIf=\"!issue.solved\" class=\"issues-list\">\n                  <td class=\"issue\" title=\"{{issue.longTitle}}\">{{ issue.title }}</td>\n                  <td class=\"comment\" title=\"{{ issue.longComment }}\">\n                    {{ issue.comment }}\n                  </td>\n                  <td class=\"fixed-or-not\">\n                    <mat-checkbox\n                      [(ngModel)]=\"issue.solved\"\n                      [ngModelOptions]=\"{ standalone: true }\"\n                      (change)=\"\n                        issueSolved(projectID, issue._id, issue.solved, i)\n                      \"\n                    >\n                    </mat-checkbox>\n                  </td>\n                  <td class=\"date\">{{ issue.date }}</td>\n                  <td class=\"submittedBy\">{{ issue.user }}</td>\n                </tr>\n              </ng-container>\n            </table>\n          </ng-container>\n          \n          <ng-container *ngIf=\"projectSelected.issues && viewSolvedBoolean\">\n            <table class=\"issues-table\">\n                <caption style=\"font-size:17px\">Solved Issues</caption>\n              <thead>\n                <th>Issue</th>\n                <th>Comment</th>\n                <th>Solved</th>\n                <th>Submitted</th>\n                <th>Submitted by</th>\n              </thead>\n              \n              <ng-container\n                *ngFor=\"\n                  let issue of projectSelected.issues.slice().reverse();\n                  let i = index\n                \"\n              >\n                <tr *ngIf=\"issue.solved\" class=\"issues-list\">\n                  <td class=\"issue\" title=\"{{issue.longTitle}}\">{{ issue.title }}</td>\n                  <td class=\"comment\" title=\"{{ issue.longComment }}\">\n                    {{ issue.comment }}\n                  </td>\n                  <td class=\"fixed-or-not\">\n                    <mat-checkbox\n                      [(ngModel)]=\"issue.solved\"\n                      [ngModelOptions]=\"{ standalone: true }\"\n                      (change)=\"\n                        issueSolved(projectID, issue._id, issue.solved, i)\n                      \"\n                    >\n                    </mat-checkbox>\n                  </td>\n                  <td class=\"date\">{{ issue.date }}</td>\n                  <td class=\"submittedBy\">{{ issue.user }}</td>\n                </tr>\n              </ng-container>\n            </table>\n          </ng-container>\n        </div>\n      </mat-tab>\n      <mat-tab label=\"Access Rights\">\n        <div *ngIf=\"projectClicked\" class=\"tab\">\n          <div class=\"radio-group\">\n            <div class=\"subhead\">\n              <h2 class=\"subhead-heading\">Visibility</h2>\n            </div>\n            <mat-radio-group>\n              <mat-radio-button\n                (click)=\"updateProject(true, projectSelected.title)\"\n                value=\"projectSelected.public\"\n                [checked]=\"projectSelected.public\"\n                >Public</mat-radio-button\n              >\n              <p style=\"padding-left: 28px; font-size: 12px; color: #586069\">\n                Anyone can see this project. You choose who can make changes.\n              </p>\n              <br />\n              <mat-radio-button\n                (click)=\"updateProject(false, projectSelected.title)\"\n                value=\"!projectSelected.public\"\n                [checked]=\"!projectSelected.public\"\n                >Private</mat-radio-button\n              >\n              <p style=\"padding-left: 28px; font-size: 12px; color: #586069\">\n                You choose who can see and make changes to this project.\n              </p>\n            </mat-radio-group>\n          </div>\n          <!-- <div class=\"add-collaborator\"> -->\n            <form class=\"collab-form\">\n              <mat-form-field class=\"example-full-width collaborators\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Search Users...\"\n                  aria-label=\"Number\"\n                  matInput\n                  [formControl]=\"collabFormControl\"\n                  [matAutocomplete]=\"auto\"\n                  #collabUsername\n                />\n                <mat-autocomplete #auto=\"matAutocomplete\">\n                  <mat-option\n                    *ngFor=\"let option of (filteredOptions | async)\"\n                    [value]=\"option\"\n                  >\n                    {{ option }}\n                  </mat-option>\n                </mat-autocomplete>\n              </mat-form-field>\n              <button\n            type=\"reset\"\n              [disabled]=\"collabFormControl.hasError('required')\"\n              mat-raised-button\n              class=\"collab-button\"\n              (click)=\"addCollaborator(projectID, collabUsername.value)\"\n            >\n              Add Collaborator\n            </button>\n            </form>\n            \n          <!-- </div> -->\n          <table class=\"collab-table\">\n            <caption style=\"font-size:17px\">Collaborators</caption>\n            \n            <thead>\n              <th>Username</th>\n              <th>Email</th>\n            </thead>\n            <tr *ngFor=\"let user of projectCollabs\">\n              <td>{{ user.username }}</td>\n              <td>{{ user.email }}</td>\n            </tr>\n          </table>\n        </div>\n      </mat-tab>\n    </mat-tab-group>\n  </div>\n</form>\n<!-- </div> -->\n"

/***/ }),

/***/ "./src/app/profile/profile.component.ts":
/*!**********************************************!*\
  !*** ./src/app/profile/profile.component.ts ***!
  \**********************************************/
/*! exports provided: MyErrorStateMatcher, ProfileComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MyErrorStateMatcher", function() { return MyErrorStateMatcher; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProfileComponent", function() { return ProfileComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _user_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../user.service */ "./src/app/user.service.ts");
/* harmony import */ var _toolbar_toolbar_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../toolbar/toolbar.component */ "./src/app/toolbar/toolbar.component.ts");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../environments/environment */ "./src/environments/environment.ts");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm5/http.js");
/* harmony import */ var _common_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common.service */ "./src/app/common.service.ts");
/* harmony import */ var _webcircos_project_panel_project_panel_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../webcircos/project-panel/project-panel.component */ "./src/app/webcircos/project-panel/project-panel.component.ts");
/* harmony import */ var _webcircos_file_management_cdk_tree_nested_example__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../webcircos/file-management/cdk-tree-nested-example */ "./src/app/webcircos/file-management/cdk-tree-nested-example.ts");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _autocomplete_filter_example_autocomplete_filter_example_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../autocomplete-filter-example/autocomplete-filter-example.component */ "./src/app/autocomplete-filter-example/autocomplete-filter-example.component.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};











var MyErrorStateMatcher = /** @class */ (function () {
    function MyErrorStateMatcher() {
    }
    MyErrorStateMatcher.prototype.isErrorState = function (control, form) {
        var isSubmitted = form && form.submitted;
        return !!(control &&
            control.invalid &&
            (control.dirty || control.touched || isSubmitted));
    };
    return MyErrorStateMatcher;
}());

var ProfileComponent = /** @class */ (function () {
    function ProfileComponent(userService, http, commonService //private projectPanelComponenet: ProjectPanelComponent
    ) {
        this.userService = userService;
        this.http = http;
        this.commonService = commonService;
        this.issueFormControl = new _angular_forms__WEBPACK_IMPORTED_MODULE_9__["FormControl"]("", [_angular_forms__WEBPACK_IMPORTED_MODULE_9__["Validators"].required]);
        this.collabFormControl = new _angular_forms__WEBPACK_IMPORTED_MODULE_9__["FormControl"]("", [_angular_forms__WEBPACK_IMPORTED_MODULE_9__["Validators"].required]);
        this.descriptionFormControl = new _angular_forms__WEBPACK_IMPORTED_MODULE_9__["FormControl"]("", [_angular_forms__WEBPACK_IMPORTED_MODULE_9__["Validators"].required]);
        this.editDescription = false;
        this.matcher = new MyErrorStateMatcher();
        this.fastaFiles = [];
        this.vcfFiles = [];
        this.annotationFiles = [];
        this.DEFiles = [];
        this.genomicCovFiles = [];
        this.transcriptomicCovFiles = [];
        this.expressionFiles = [];
        this.selectedFastaIndex = null;
        this.populatePickList = [];
        this.isCharging = true;
        this.projectClicked = false;
        this.viewSolvedBoolean = false;
        this.myControl = new _angular_forms__WEBPACK_IMPORTED_MODULE_9__["FormControl"]();
        this.genomeOptions = [];
        this.userOptions = [];
        this.complete = [];
        this.onProjectSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.onEmittingPopulatedPickList = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.config = this.extend(this.config, {
            maxDistance: null,
            tokenizer: function (s) {
                var result = [];
                if (!s)
                    return result;
                for (var i = 0; i <= s.length - 2; i++) {
                    result.push(s.substr(i, 2));
                }
                return result;
            },
            //tokenizer: function(s) { return s?s.split(''):[]; },
            tokenMatcher: function (t1, t2) {
                return t1 == t2;
            },
            matchingEvaluator: function (t1, t2) {
                return 1;
            },
            localLengthEvaluator: function (local_cs) {
                return local_cs;
            },
            transpositionCostEvaluator: function (c1, c2) {
                return 1;
            },
            transpositionsEvaluator: function (lcss, trans) {
                return lcss - trans;
            }
        });
    }
    ProfileComponent.prototype.showUser = function () {
        this.email = this.userService.getEmail();
        // this.files=this.userService.g
    };
    ProfileComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.email = this.userService.getEmail();
        if (this.userService.getIsSignedIn()) {
            this.getProjects();
            this.userID = this.userService.getusername();
        }
        this.getAllUsers();
        this.commonService.add_subject.subscribe(function (response) {
            _this.getAllUsers();
        });
        this.projectClicked = false;
        this.filteredOptions = this.collabFormControl.valueChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["startWith"])(''), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["map"])(function (value) { return _this._filter(value); }));
    };
    ProfileComponent.prototype._filter = function (value) {
        var filterValue = value.toLowerCase();
        this.output = [];
        this.ranks = [];
        this.complete = [];
        this.results = [];
        for (var x = 0; x < this.userOptions.length; x++) {
            if (this.userOptions[x].toLowerCase().includes(filterValue)) {
                this.output.push(this.userOptions[x]);
            }
        }
        for (var y = 0; y < this.output.length; y++) {
            this.ranks.push(this.sift4(this.output[y].toLowerCase(), filterValue, this.output[y].length, this.config));
            this.complete.push({ key: this.ranks[y], value: this.output[y] });
        }
        this.complete.sort(this.rank);
        for (var z = 0; z < this.complete.length; z++) {
            this.results.push(this.complete[z].value);
        }
        //return filtered options
        //return this.options.filter(option => option.toLowerCase().includes(filterValue));
        return this.results.filter(function (result) {
            return result.toLowerCase().includes(filterValue);
        });
    };
    ProfileComponent.prototype.descriptionEdited = function () {
        this.editDescription = false;
    };
    ProfileComponent.prototype.viewSolved = function () {
        this.viewSolvedBoolean = true;
    };
    ProfileComponent.prototype.timeDifference = function (previous) {
        var current = Date.now();
        var previous1 = Date.parse(previous);
        var msPerMinute = 60 * 1000;
        var msPerHour = msPerMinute * 60;
        var msPerDay = msPerHour * 24;
        var msPerMonth = msPerDay * 30;
        var msPerYear = msPerDay * 365;
        var elapsed = current - previous1;
        if (elapsed < msPerMinute) {
            return Math.round(elapsed / 1000) + ' seconds ago';
        }
        else if (elapsed < msPerHour) {
            return Math.round(elapsed / msPerMinute) + ' minutes ago';
        }
        else if (elapsed < msPerDay) {
            return Math.round(elapsed / msPerHour) + ' hours ago';
        }
        else if (elapsed < msPerMonth) {
            return 'approximately ' + Math.round(elapsed / msPerDay) + ' days ago';
        }
        else if (elapsed < msPerYear) {
            return 'approximately ' + Math.round(elapsed / msPerMonth) + ' months ago';
        }
        else {
            return 'approximately ' + Math.round(elapsed / msPerYear) + ' years ago';
        }
    };
    ProfileComponent.prototype.updateDescription = function () {
        this.editDescription = true;
        console.log("updateDescription() triggered");
    };
    ProfileComponent.prototype.submitDescription = function (description, projectid) {
        console.log("submitDescription triggered: ", description, projectid);
        this.commonService.editDescription(description, projectid).subscribe();
    };
    ProfileComponent.prototype.submitIssue = function (issueTitle, issueComment, id, userID) {
        var _this = this;
        this.commonService
            .submitIssue(issueTitle, issueComment, id, userID)
            .subscribe();
        this.commonService.getIssues(id).subscribe(function (res) {
            _this.issues = res.json().issues;
        });
    };
    ProfileComponent.prototype.getAllUsers = function () {
        var _this = this;
        this.commonService.getUsers().subscribe(function (res) {
            _this.userOptions = [];
            res.json().data.map(function (e) {
                _this.userOptions.push(e.username);
            });
        });
        this.filteredOptions = this.myControl.valueChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["startWith"])(""), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["map"])(function (value) { return _this._filter(value); }));
    };
    ProfileComponent.prototype.rank = function (a, b) {
        var x = a.key;
        var y = b.key;
        if (x > y) {
            return 1;
        }
        else if (x < y) {
            return -1;
        }
        else {
            return 0;
        }
    };
    ProfileComponent.prototype.getProjects = function () {
        var _this = this;
        // this.isCharging = false;
        var url = _environments_environment__WEBPACK_IMPORTED_MODULE_4__["environment"].host +
            "getProjects?email=" +
            this.userService.getEmail() +
            "&token=" +
            this.userService.getToken();
        this.http.get(url).subscribe(function (data) {
            _this.userService.projects = [];
            for (var i = 0; i < data.length; i++) {
                _this.userService.projects.push({
                    title: data[i].title,
                    id: data[i].id,
                    public: data[i].public,
                    files: data[i].files,
                    issues: data[i].issues
                });
            }
        }, function (error) {
            console.log(error);
        });
        // this.isCharging = false;
    };
    ProfileComponent.prototype.updateProject = function (publicPrivate, title) {
        var that = this;
        this.commonService
            .updateProject(title, this.userService.getID(), publicPrivate)
            .subscribe();
    };
    ProfileComponent.prototype.updateIssue = function (solved, projectID, issueID) {
        this.commonService.updateIssue(solved, projectID, issueID).subscribe();
    };
    ProfileComponent.prototype.issueSolved = function (projectID, issueID, solved, issue) {
        var unsolvedIssues = this.projectSelected.issues.length - 1;
        // for (var i = 0; i < this.projectSelected.issues.length; i++){
        //   if (this.projectSelected.issues[i].solved === false){
        //     unsolvedIssues++;
        //   }
        // }
        var solvedIssue = unsolvedIssues - issue;
        console.log(this.projectSelected.issues.length, unsolvedIssues, solvedIssue);
        this.commonService.issueSolved(projectID, issueID, solved, solvedIssue).subscribe();
    };
    ProfileComponent.prototype.projectChosen = function (id) {
        var _this = this;
        // console.log(id);
        this.viewSolvedBoolean = false;
        this.projectID = id;
        this.fastaFiles = [];
        this.vcfFiles = [];
        this.annotationFiles = [];
        this.DEFiles = [];
        this.genomicCovFiles = [];
        this.transcriptomicCovFiles = [];
        this.expressionFiles = [];
        this.populatePickList = [];
        // get project
        this.commonService.getGenome(id).subscribe(function (res) {
            _this.projectSelected = res.json();
            var date = /\..*$/g;
            _this.projectClicked = true;
            if (_this.projectSelected.issues) {
                for (var i = 0; i < _this.projectSelected.issues.length; i++) {
                    _this.projectSelected.issues[i].date = _this.timeDifference(_this.projectSelected.issues[i].date);
                    // this.projectSelected.issues[i].date = this.projectSelected.issues[i].date.replace("T", " ").replace(date, "").replace(/:\d\d$/, "");
                    _this.projectSelected.issues[i].longComment = _this.projectSelected.issues[i].comment;
                    if (_this.projectSelected.issues[i].comment.length > 20) {
                        _this.projectSelected.issues[i].comment = _this.projectSelected.issues[i].comment.slice(0, 20).concat("...");
                    }
                    _this.projectSelected.issues[i].longTitle = _this.projectSelected.issues[i].title;
                    if (_this.projectSelected.issues[i].title.length > 20) {
                        _this.projectSelected.issues[i].title = _this.projectSelected.issues[i].title.slice(0, 20).concat("...");
                    }
                }
            }
            // get collaborators
            if (_this.projectSelected.users) {
                _this.commonService
                    .getCollaborators(id, _this.projectSelected.users)
                    .subscribe(function (res) {
                    _this.projectCollabs = [];
                    for (var i = 0; i < res.json().data.length; i++) {
                        _this.projectCollabs.push({
                            username: res.json().data[i].username,
                            email: res.json().data[i].email
                        });
                    }
                });
            }
            // get issues
            _this.commonService.getIssues(_this.projectSelected._id).subscribe(function (res) {
                _this.issues = res.json().issues;
            });
        });
        // // get collaborators
        // this.commonService
        //   .getCollaborators(id, this.projectSelected.users)
        //   .subscribe(res => {
        //     this.projectCollabs = [];
        //     for (var i = 0; i < res.json().data.length; i++) {
        //       this.projectCollabs.push({
        //         username: res.json().data[i].username,
        //         email: res.json().data[i].email
        //       });
        //     }
        //   });
        var url = _environments_environment__WEBPACK_IMPORTED_MODULE_4__["environment"].host +
            "getFilesNames?id=" +
            id +
            "&token=" +
            this.userService.getToken();
        this.http.get(url).subscribe(function (data) {
            _this.onProjectSelected.emit();
            if (data) {
                for (var i = 0; i < data.length; i++) {
                    if (data[i].format === "fasta") {
                        _this.fastaFiles.push({
                            name: data[i].name,
                            format: data[i].format,
                            id: data[i]._id
                        });
                    }
                    else if (data[i].format === "vcf") {
                        _this.vcfFiles.push({
                            name: data[i].name,
                            format: data[i].format,
                            id: data[i]._id
                        });
                    }
                    else if (data[i].format === "annotation") {
                        _this.annotationFiles.push({
                            name: data[i].name,
                            format: data[i].format,
                            id: data[i]._id
                        });
                    }
                    else if (data[i].format === "diffExp" ||
                        data[i].format === "de") {
                        _this.DEFiles.push({
                            name: data[i].name,
                            format: data[i].format,
                            id: data[i]._id
                        });
                    }
                    else if (data[i].format === "bam" || data[i].format === "bai") {
                        _this.genomicCovFiles.push({
                            name: data[i].name,
                            format: data[i].format,
                            id: data[i]._id
                        });
                    }
                    else if (data[i].format === "bedcov") {
                        _this.transcriptomicCovFiles.push({
                            name: data[i].name,
                            format: data[i].format,
                            id: data[i]._id
                        });
                    }
                    else if (data[i].format === "results") {
                        _this.expressionFiles.push({
                            name: data[i].name,
                            format: data[i].format,
                            id: data[i]._id
                        });
                    }
                }
                if (_this.fastaFiles.length > 0) {
                    _this.selectedFastaIndex = 0;
                }
                _this.populatePickList = _this.fastaFiles.concat(_this.vcfFiles.concat(_this.annotationFiles.concat(_this.DEFiles.concat(_this.genomicCovFiles.concat(_this.transcriptomicCovFiles.concat(_this.expressionFiles))))));
                _this.onEmittingPopulatedPickList.emit(_this.populatePickList);
            }
            _this.isCharging = false;
        }, function (error) {
            console.log(error);
            return false;
        });
    };
    ProfileComponent.prototype.addCollaborator = function (projectID, username) {
        var _this = this;
        this.commonService.getUserId(username).subscribe(function (res) {
            _this.collabID = res.json().data;
            _this.commonService.addCollaborator(projectID, _this.collabID, _this.userService.username).subscribe();
        });
    };
    ProfileComponent.prototype.sift4 = function (s1, s2, maxOffset, options) {
        var t1 = options.tokenizer(s1);
        var t2 = options.tokenizer(s2);
        var l1 = t1.length;
        var l2 = t2.length;
        if (l1 == 0)
            return l2;
        if (l2 == 0)
            return l1;
        var c1 = 0; //cursor for string 1
        var c2 = 0; //cursor for string 2
        var lcss = 0; //largest common subsequence
        var local_cs = 0; //local common substring
        var trans = 0; //number of transpositions ('ab' vs 'ba')
        var offset_arr = []; //offset pair array, for computing the transpositions
        while (c1 < l1 && c2 < l2) {
            if (options.tokenMatcher(t1[c1], t2[c2])) {
                local_cs += options.matchingEvaluator(t1[c1], t2[c2]);
                var isTrans = false;
                //see if current match is a transposition
                var i = 0;
                while (i < offset_arr.length) {
                    var ofs = offset_arr[i];
                    if (c1 <= ofs.c1 || c2 <= ofs.c2) {
                        // when two matches cross, the one considered a transposition is the one with the largest difference in offsets
                        isTrans = Math.abs(c2 - c1) >= Math.abs(ofs.c2 - ofs.c1);
                        if (isTrans) {
                            trans += options.transpositionCostEvaluator(c1, c2);
                        }
                        else {
                            if (!ofs.trans) {
                                ofs.trans = true;
                                trans += options.transpositionCostEvaluator(ofs.c1, ofs.c2);
                            }
                        }
                        break;
                    }
                    else {
                        if (c1 > ofs.c2 && c2 > ofs.c1) {
                            offset_arr.splice(i, 1);
                        }
                        else {
                            i++;
                        }
                    }
                }
                offset_arr.push({
                    c1: c1,
                    c2: c2,
                    trans: isTrans
                });
            }
            else {
                lcss += options.localLengthEvaluator(local_cs);
                local_cs = 0;
                if (c1 != c2) {
                    c1 = c2 = Math.min(c1, c2); //using min allows the computation of transpositions
                }
                //if matching tokens are found, remove 1 from both cursors (they get incremented at the end of the loop)
                //so that we can have only one code block handling matches
                for (var i = 0; i < maxOffset && (c1 + i < l1 || c2 + i < l2); i++) {
                    if (c1 + i < l1 && options.tokenMatcher(t1[c1 + i], t2[c2])) {
                        c1 += i - 1;
                        c2--;
                        break;
                    }
                    if (c2 + i < l2 && options.tokenMatcher(t1[c1], t2[c2 + i])) {
                        c1--;
                        c2 += i - 1;
                        break;
                    }
                }
            }
            c1++;
            c2++;
            if (options.maxDistance) {
                var temporaryDistance = options.localLengthEvaluator(Math.max(c1, c2)) -
                    options.transpositionsEvaluator(lcss, trans);
                if (temporaryDistance >= options.maxDistance)
                    return Math.round(temporaryDistance);
            }
            // this covers the case where the last match is on the last token in list, so that it can compute transpositions correctly
            if (c1 >= l1 || c2 >= l2) {
                lcss += options.localLengthEvaluator(local_cs);
                local_cs = 0;
                c1 = c2 = Math.min(c1, c2);
            }
        }
        lcss += options.localLengthEvaluator(local_cs);
        return Math.round(options.localLengthEvaluator(Math.max(l1, l2)) -
            options.transpositionsEvaluator(lcss, trans)); //add the cost of found transpositions
    };
    ProfileComponent.prototype.extend = function (obj, def) {
        var result = {};
        for (var prop in def) {
            if (!obj || !obj.hasOwnProperty(prop)) {
                result[prop] = def[prop];
            }
            else {
                result[prop] = obj[prop];
            }
        }
        return result;
    };
    // possible values for the options
    // tokenizers:
    ProfileComponent.prototype.nGramTokenizer = function (s, n) {
        //tokenizer:function(s) { return nGramTokenizer(s,2); }
        var result = [];
        if (!s)
            return result;
        for (var i = 0; i <= s.length - n; i++) {
            result.push(s.substr(i, n));
        }
        return result;
    };
    ProfileComponent.prototype.wordSplitTokenizer = function (s) {
        //tokenizer:wordSplitTokenizer
        if (!s)
            return [];
        return s.split(/\s+/);
    };
    ProfileComponent.prototype.characterFrequencyTokenizer = function (s) {
        //tokenizer:characterFrequencyTokenizer (letters only)
        var result = [];
        for (var i = 0; i <= 25; i++) {
            var val = 0;
            if (s) {
                for (var j = 0; j < s.length; j++) {
                    var code = s.charCodeAt(j);
                    if (code == i + 65 || code == i + 97)
                        val++;
                }
            }
            result.push(val);
        }
        return result;
    };
    //tokenMatchers:
    ProfileComponent.prototype.sift4TokenMatcher = function (t1, t2) {
        //tokenMatcher:sift4TokenMatcher
        var similarity = 1 - this.sift4(t1, t2, 5, this.config) / Math.max(t1.length, t2.length);
        return similarity > 0.7;
    };
    //matchingEvaluators:
    ProfileComponent.prototype.sift4MatchingEvaluator = function (t1, t2) {
        //matchingEvaluator:sift4MatchingEvaluator
        var similarity = 1 - this.sift4(t1, t2, 5, this.config) / Math.max(t1.length, t2.length);
        return similarity;
    };
    //localLengthEvaluators:
    ProfileComponent.prototype.rewardLengthEvaluator = function (l) {
        if (l < 1)
            return l; //0 -> 0
        return l - 1 / (l + 1); //1 -> 0.5, 2-> 0.66, 9 -> 0.9
    };
    ProfileComponent.prototype.rewardLengthEvaluator2 = function (l) {
        return Math.pow(l, 1.5); // 0 -> 0, 1 -> 1, 2 -> 2.83, 10 -> 31.62
    };
    //transpositionCostEvaluators:
    ProfileComponent.prototype.longerTranspositionsAreMoreCostly = function (c1, c2) {
        return Math.abs(c2 - c1) / 9 + 1;
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"])
    ], ProfileComponent.prototype, "change", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"])
    ], ProfileComponent.prototype, "change1", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], ProfileComponent.prototype, "onProjectSelected", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], ProfileComponent.prototype, "onEmittingPopulatedPickList", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", _toolbar_toolbar_component__WEBPACK_IMPORTED_MODULE_3__["ToolbarComponent"])
    ], ProfileComponent.prototype, "toolbar", void 0);
    ProfileComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: "app-profile",
            template: __webpack_require__(/*! ./profile.component.html */ "./src/app/profile/profile.component.html"),
            styles: [__webpack_require__(/*! ./profile.component.css */ "./src/app/profile/profile.component.css")],
            providers: [
                _webcircos_file_management_cdk_tree_nested_example__WEBPACK_IMPORTED_MODULE_8__["FileDatabase"],
                _toolbar_toolbar_component__WEBPACK_IMPORTED_MODULE_3__["ToolbarComponent"],
                _webcircos_project_panel_project_panel_component__WEBPACK_IMPORTED_MODULE_7__["ProjectPanelComponent"],
                _autocomplete_filter_example_autocomplete_filter_example_component__WEBPACK_IMPORTED_MODULE_10__["AutocompleteFilterExampleComponent"]
            ]
        }),
        __metadata("design:paramtypes", [_user_service__WEBPACK_IMPORTED_MODULE_2__["UserService"],
            _angular_common_http__WEBPACK_IMPORTED_MODULE_5__["HttpClient"],
            _common_service__WEBPACK_IMPORTED_MODULE_6__["CommonService"] //private projectPanelComponenet: ProjectPanelComponent
        ])
    ], ProfileComponent);
    return ProfileComponent;
}());



/***/ }),

/***/ "./src/app/sign-panel/sign-panel.component.css":
/*!*****************************************************!*\
  !*** ./src/app/sign-panel/sign-panel.component.css ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ":host {\n  height: 100vh;\n  width: 20vw;\n  /* z-index: 1000; */\n}\n\nmat-form-field {\n  margin-top: 20px;\n  margin-bottom: 20px;\n}\n\nform {\n  text-align: center;\n  margin-top: 30px;\n}\n\np-message {\n  display: block;\n  text-align: center;\n  margin-top: 30px;\n}\n"

/***/ }),

/***/ "./src/app/sign-panel/sign-panel.component.html":
/*!******************************************************!*\
  !*** ./src/app/sign-panel/sign-panel.component.html ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\n<!-- ------------------------SIGN IN----------------------------------- -->\n<p-sidebar [(visible)]=\"signInShown\" position=\"right\">\n\n\n  <form class=\"example-form\" style=\"margin-top: 50px\">\n    <mat-form-field class=\"example-full-width\" >\n      <input matInput placeholder=\"Username\" [formControl]=\"usernameFormControlSignIn\" [errorStateMatcher]=\"matcher\" >\n\n      <mat-error *ngIf=\"usernameFormControlSignIn.hasError('required')\">\n        Username is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n\n    <mat-form-field class=\"example-full-width\">\n      <input matInput placeholder=\"Password\" type=\"password\" [formControl]=\"passwordFormControlSignIn\" [errorStateMatcher]=\"matcher\">\n\n      <mat-error *ngIf=\"passwordFormControlSignIn.hasError('required')\">\n        Password is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n    <br/>\n\n    <button mat-button color=\"primary\" (click)=\"submitSignIn()\" [disabled]=\"!usernameFormControlSignIn.valid || !passwordFormControlSignIn.valid\">Sign in</button>\n\n  </form>\n  \n\n  <div align = \"center\">\n      <button mat-button color=\"primary\"  (click)=\"resetClicked()\" style=\"margin-top: 20px\">Change password</button>\n    </div>    \n\n    <br/>\n  <div align = \"center\">\n  <button mat-button color=\"primary\"  (click)=\"forgetClicked\n  ()\" >Forgotten password</button>\n</div>\n\n\n  <p-message #signInMessage [style.visibility]=\"visibilityMessageSignIn\"></p-message><br/>\n\n</p-sidebar>\n\n\n\n<!-- -------------------------------SIGN UP----------------------------- -->\n\n<p-sidebar [(visible)]=\"signUpShown\" position=\"right\">\n\n\n  <form class=\"example-form\">\n    <!-- <script src=\"public\\js\\jquery.min.js\">\n      \n      </script> -->\n<br/>\n    <mat-form-field class=\"example-full-width\">\n      <input matInput placeholder=\"Username\" [formControl]=\"usernameFormControlSignUp\" [errorStateMatcher]=\"matcher\">\n\n      <mat-error *ngIf=\"usernameFormControlSignUp.hasError('required')\">\n        Username is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n    <br/>\n\n    <mat-form-field class=\"example-full-width\">\n      <input matInput placeholder=\"Password\" type=\"password\" [formControl]=\"passwordFormControlSignUp\" [errorStateMatcher]=\"matcher\">\n\n      <mat-error *ngIf=\"passwordFormControlSignUp.hasError('required')\">\n        Password is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n    <br/>\n\n    <mat-form-field class=\"example-full-width\">\n      <input matInput placeholder=\"Email\" [formControl]=\"emailFormControl\" [errorStateMatcher]=\"matcher\">\n      \n      <mat-error *ngIf=\"emailFormControl.hasError('email') && !emailFormControl.hasError('required')\">\n        Please enter a valid email address\n      </mat-error>\n      <mat-error *ngIf=\"emailFormControl.hasError('required')\">\n        Email is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n    <br/>\n\n    <button mat-button color=\"primary\" (click)=\"submitSignUp($event)\" [disabled]=\"!usernameFormControlSignUp.valid || !emailFormControl.valid || !passwordFormControlSignUp.valid\">Sign up</button>\n\n  </form>\n  <br/>\n\n\n\n  <p-message #signUpMessage [style.visibility]=\"visibilityMessageSignUp\"></p-message><br/>\n\n</p-sidebar>\n\n\n\n<!-- --------------------------------FORGET PASSWORD--------------------------------------- -->\n\n<p-sidebar [(visible)]=\"forgetShown\" position=\"right\">\n\n\n    <form class=\"example-form\">\n      <!-- <script src=\"public\\js\\jquery.min.js\">\n        \n        </script> -->\n  \n      \n      <br/>\n  \n      <mat-form-field class=\"example-full-width\">\n        <input matInput placeholder=\"Email\" [formControl]=\"emailFormControlForget\" [errorStateMatcher]=\"matcher\">\n        \n        <mat-error *ngIf=\"emailFormControlForget.hasError('email') && !emailFormControlForget.hasError('required')\">\n          Please enter a valid email address\n        </mat-error>\n        <mat-error *ngIf=\"emailFormControlForget.hasError('required')\">\n          Email is <strong>required</strong>\n        </mat-error>\n      </mat-form-field>\n      <br/>\n  \n      <button mat-button color=\"primary\" (click)=\"submitforget($event)\" [disabled]=\"!emailFormControlForget.valid\">Send Email</button>\n  \n    </form>\n    <br/>\n  \n  \n  \n    <p-message #forgetMessage [style.visibility]=\"visibilityMessageforget\"></p-message><br/>\n  \n  </p-sidebar>\n\n\n<!-- -----------------------------RESET PASSWORD--------------------------------------- -->\n\n  <p-sidebar [(visible)]=\"resetShown\" position=\"right\">\n\n\n      <form class=\"example-form\">\n        <!-- <script src=\"public\\js\\jquery.min.js\">\n          \n          </script> -->\n    <br/>\n        <mat-form-field class=\"example-full-width\">\n          <input matInput placeholder=\"Username\" [formControl]=\"usernameFormControlReset\" [errorStateMatcher]=\"matcher\">\n    \n          <mat-error *ngIf=\"usernameFormControlReset.hasError('required')\">\n            Username is <strong>required</strong>\n          </mat-error>\n        </mat-form-field>\n        <br/>\n    \n        <mat-form-field class=\"example-full-width\">\n          <input matInput placeholder=\"Old Password\" type=\"password\" [formControl]=\"passwordFormControlReset\" [errorStateMatcher]=\"matcher\">\n    \n          <mat-error *ngIf=\"passwordFormControlReset.hasError('required')\">\n            Password is <strong>required</strong>\n          </mat-error>\n        </mat-form-field>\n        <br/>\n    \n        <mat-form-field class=\"example-full-width\">\n          <input matInput placeholder=\"New Password\" type=\"password\" [formControl]=\"newpasswordFormControlReset\" [errorStateMatcher]=\"matcher\">\n\n          <mat-error *ngIf=\"newpasswordFormControlReset.hasError('required')\">\n            New Password is <strong>required</strong>\n          </mat-error>\n        </mat-form-field>\n        <br/>\n    \n        <button mat-button color=\"primary\" (click)=\"submitreset($event)\" [disabled]=\"!usernameFormControlReset.valid || !passwordFormControlReset.valid || !newpasswordFormControlReset.valid\">Reset Password</button>\n    \n      </form>\n      <br/>\n    \n    \n    \n      <p-message #resetMessage [style.visibility]=\"visibilityMessagereset\"></p-message><br/>\n    \n    </p-sidebar>\n"

/***/ }),

/***/ "./src/app/sign-panel/sign-panel.component.ts":
/*!****************************************************!*\
  !*** ./src/app/sign-panel/sign-panel.component.ts ***!
  \****************************************************/
/*! exports provided: MyErrorStateMatcher, SignPanelComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MyErrorStateMatcher", function() { return MyErrorStateMatcher; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SignPanelComponent", function() { return SignPanelComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _user_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../user.service */ "./src/app/user.service.ts");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var MyErrorStateMatcher = /** @class */ (function () {
    function MyErrorStateMatcher() {
    }
    MyErrorStateMatcher.prototype.isErrorState = function (control, form) {
        var isSubmitted = form && form.submitted;
        return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));
    };
    return MyErrorStateMatcher;
}());

var SignPanelComponent = /** @class */ (function () {
    // @ViewChild('verifyemailMessage') verifyemailMessage;
    function SignPanelComponent(userService) {
        this.userService = userService;
        this.emailFormControlSignIn = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', [
            _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required,
            _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].email
        ]);
        this.passwordFormControlSignIn = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', [
            _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required,
        ]);
        this.usernameFormControlSignIn = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', [
            _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required,
        ]);
        //sign up
        this.emailFormControl = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', [
            _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required,
            _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].email
        ]);
        this.passwordFormControlSignUp = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', [
            _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required,
        ]);
        this.usernameFormControlSignUp = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', [
            _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required,
        ]);
        // verifyFormControl = new FormControl('', [
        //   Validators.required,
        // ]);
        //Reset password
        this.usernameFormControlReset = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', [
            _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required,
        ]);
        this.passwordFormControlReset = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', [
            _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required,
        ]);
        this.newpasswordFormControlReset = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', [
            _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required,
        ]);
        //forget password 
        this.emailFormControlForget = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', [
            _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required,
        ]);
        // firstnameFormControl = new FormControl('', [
        //   Validators.required,
        // ]);
        // lastnameFormControl = new FormControl('', [
        //   Validators.required,
        // ]);
        this.matcher = new MyErrorStateMatcher();
        this.signInShown = false;
        this.signUpShown = false;
        this.resetShown = false;
        this.forgetShown = false;
        this.visibilityMessageSignIn = "hidden";
        this.visibilityMessageSignUp = "hidden";
        // visibilityMessageverifyemailMessage: string = "hidden";
        this.visibilityMessagereset = "hidden";
        this.visibilityMessageforget = "hidden";
        this.errorMessageSignup = "hidden";
        this.errorMessageSignupText = "";
        this.successMessageSignup = "hidden";
        this.errorMessageReset = "hidden";
        this.signedIn = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.clicked = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
    }
    SignPanelComponent.prototype.signInClicked = function () {
        this.clicked.emit('signIn');
    };
    SignPanelComponent.prototype.resetClicked = function () {
        this.clicked.emit('resetpassword');
    };
    SignPanelComponent.prototype.forgetClicked = function () {
        this.clicked.emit('forgetpassword');
    };
    SignPanelComponent.prototype.openSignInPanel = function () {
        this.signInShown = true;
        this.signUpShown = false;
        this.resetShown = false;
        this.forgetShown = false;
    };
    SignPanelComponent.prototype.openSignUpPanel = function () {
        this.signUpShown = true;
        this.signInShown = false;
        this.resetShown = false;
        this.forgetShown = false;
    };
    SignPanelComponent.prototype.openResetPanel = function () {
        this.resetShown = true;
        this.signInShown = false;
        this.signUpShown = false;
        this.forgetShown = false;
    };
    SignPanelComponent.prototype.openForgetPanel = function () {
        this.forgetShown = true;
        this.signInShown = false;
        this.signUpShown = false;
        this.resetShown = false;
    };
    //when the user clicks on the button to sign in in the right panel
    SignPanelComponent.prototype.submitSignIn = function () {
        var _this = this;
        var res = this.userService.signIn(this.usernameFormControlSignIn.value, this.passwordFormControlSignIn.value); //call the sign in function in the user service
        var that = this;
        res.subscribe(function (data) {
            if (data.message == "Success") { //if the email and password are correct
                that.signInMessage.text = "Connection successful";
                that.signInMessage.severity = "success";
                that.visibilityMessageSignIn = "visible";
                _this.userService.setUser(data.data); //store the user data
                _this.signedIn.emit('signedIn'); //emit a signal to notify that the user has signed in
                setTimeout(function () {
                    // console.log("aaaa")
                    that.visibilityMessageSignIn = "hidden";
                    that.signInShown = false;
                }, 600);
            }
            else {
                that.signInMessage.text = data.message;
                that.signInMessage.severity = "error";
                that.visibilityMessageSignIn = "visible";
                setTimeout(function () {
                    // console.log("bbbb")
                    console.log("error message:" + data.message);
                    that.visibilityMessageSignIn = "hidden";
                }, 3000);
            }
        }, function (error) {
            that.signInMessage.text = "Connection error";
            that.signInMessage.severity = "error";
            that.visibilityMessageSignIn = "visible";
            setTimeout(function () {
                that.visibilityMessageSignIn = "hidden";
            }, 3000);
        });
    };
    SignPanelComponent.prototype.submitSignUp = function (event) {
        var _this = this;
        var res = this.userService.signUp(this.usernameFormControlSignUp.value, this.emailFormControl.value, this.passwordFormControlSignUp.value);
        var that = this;
        res.subscribe(function (data) {
            if (data.message == "Success") {
                that.signUpMessage.text = "Success";
                that.signUpMessage.severity = "success";
                that.visibilityMessageSignUp = "visible";
                // setTimeout(function() {
                //   that.visibilityMessageSignUp = "hidden";
                //   this.usernameFormControlSignIn.setValue(this.usernameFormControlSignUp);
                //   this.passwordFormControlSignIn.setValue(this.passwordFormControlSignUp);
                //   that.submitSignIn();
                //   that.signUpShown = false;
                // }, 1000);
            }
            else {
                _this.showSignUpError(data.message, 3000);
            }
        }, function (error) {
            _this.showSignUpError("Connection error", 3000);
        });
    };
    SignPanelComponent.prototype.submitreset = function () {
        var _this = this;
        var res = this.userService.resetpassword(this.usernameFormControlReset.value, this.passwordFormControlReset.value, this.newpasswordFormControlReset.value);
        var that = this;
        res.subscribe(function (data) {
            if (data.message == "Success") {
                that.resetMessage.text = "Success";
                that.resetMessage.severity = "success";
                that.visibilityMessagereset = "visible";
                // setTimeout(function() {
                //   that.visibilityMessagereset = "hidden";
                //   this.usernameFormControlSignIn.setValue(this.usernameFormControlReset);
                //   this.passwordFormControlSignIn.setValue(this.newpasswordFormControlReset);
                //   that.submitSignIn();
                //   that.resetShown = false;
                // }, 1000);
            }
            else {
                _this.showresetError(data.message, 3000);
            }
        }, function (error) {
            _this.showresetError("Connection error", 3000);
        });
    };
    SignPanelComponent.prototype.submitforget = function (event) {
        var _this = this;
        var res = this.userService.forgetpassword(this.emailFormControlForget.value);
        var that = this;
        res.subscribe(function (data) {
            if (data.message == "Success") {
                that.forgetMessage.text = "Success";
                that.forgetMessage.severity = "success";
                that.visibilityMessageforget = "visible";
                // setTimeout(function() {
                //   that.visibilityMessageSignUp = "hidden";
                //   this.usernameFormControlSignIn.setValue(this.usernameFormControlSignUp);
                //   this.passwordFormControlSignIn.setValue(this.passwordFormControlSignUp);
                //   that.submitSignIn();
                //   that.signUpShown = false;
                // }, 1000);
            }
            else {
                _this.showforgetError(data.message, 3000);
            }
        }, function (error) {
            _this.showforgetError("Connection error", 3000);
        });
    };
    SignPanelComponent.prototype.showforgetError = function (message, timeout) {
        this.forgetMessage.text = message;
        this.forgetMessage.severity = "error";
        this.visibilityMessageforget = "visible";
        var that = this;
        setTimeout(function () {
            that.visibilityMessageforget = "hidden";
        }, timeout);
    };
    SignPanelComponent.prototype.showresetError = function (message, timeout) {
        this.resetMessage.text = message;
        this.resetMessage.severity = "error";
        this.visibilityMessagereset = "visible";
        var that = this;
        setTimeout(function () {
            that.visibilityMessagereset = "hidden";
        }, timeout);
    };
    SignPanelComponent.prototype.showSignUpError = function (message, timeout) {
        this.signUpMessage.text = message;
        this.signUpMessage.severity = "error";
        this.visibilityMessageSignUp = "visible";
        var that = this;
        setTimeout(function () {
            that.visibilityMessageSignUp = "hidden";
        }, timeout);
    };
    // showverifyemailError(message, timeout) {
    //   this.verifyemailMessage.text = message;
    //   this.verifyemailMessage.severity = "error";
    //   this.visibilityMessageverifyemailMessage = "visible";
    //   const that = this;
    //   setTimeout(function() {
    //     that.visibilityMessageSignUp = "hidden";
    //   }, timeout)
    // }
    SignPanelComponent.prototype.ngOnInit = function () {
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], SignPanelComponent.prototype, "signedIn", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], SignPanelComponent.prototype, "clicked", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('signInMessage'),
        __metadata("design:type", Object)
    ], SignPanelComponent.prototype, "signInMessage", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('signUpMessage'),
        __metadata("design:type", Object)
    ], SignPanelComponent.prototype, "signUpMessage", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('resetMessage'),
        __metadata("design:type", Object)
    ], SignPanelComponent.prototype, "resetMessage", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('forgetMessage'),
        __metadata("design:type", Object)
    ], SignPanelComponent.prototype, "forgetMessage", void 0);
    SignPanelComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'sign-panel',
            template: __webpack_require__(/*! ./sign-panel.component.html */ "./src/app/sign-panel/sign-panel.component.html"),
            styles: [__webpack_require__(/*! ./sign-panel.component.css */ "./src/app/sign-panel/sign-panel.component.css")]
        }),
        __metadata("design:paramtypes", [_user_service__WEBPACK_IMPORTED_MODULE_1__["UserService"]])
    ], SignPanelComponent);
    return SignPanelComponent;
}());

// import { Component, OnInit, Output, EventEmitter, ViewChild } from '@angular/core';
// import { UserService } from '../user.service';
// import { FormControl, FormGroupDirective, NgForm, Validators } from '@angular/forms';
// import { ErrorStateMatcher } from '@angular/material/core';
// export class MyErrorStateMatcher implements ErrorStateMatcher {
//   isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {
//     const isSubmitted = form && form.submitted;
//     return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));
//   }
// }
// @Component({
//   selector: 'sign-panel',
//   templateUrl: './sign-panel.component.html',
//   styleUrls: ['./sign-panel.component.css']
// })
// export class SignPanelComponent implements OnInit {
//   emailFormControlSignIn = new FormControl('', [
//     Validators.required,
//     //Validators.email
//   ]);
//   passwordFormControlSignIn = new FormControl('', [
//     Validators.required,
//   ]);
//   emailFormControlSignUp = new FormControl('', [
//     Validators.required,
//     Validators.email
//   ]);
//   passwordFormControlSignUp = new FormControl('', [
//     Validators.required,
//   ]);
//   firstnameFormControl = new FormControl('', [
//     Validators.required,
//   ]);
//   lastnameFormControl = new FormControl('', [
//     Validators.required,
//   ]);
//   matcher = new MyErrorStateMatcher();
//   public signInShown: boolean = false;
//   public signUpShown: boolean = false;
//   visibilityMessageSignIn: string = "hidden";
//   visibilityMessageSignUp: string = "hidden";
//   errorMessageSignup: string = "hidden";
//   errorMessageSignupText: string = "";
//   successMessageSignup: string = "hidden";
//   @Output()
//   signedIn = new EventEmitter<string>();
//   @ViewChild('signInMessage') signInMessage;
//   @ViewChild('signUpMessage') signUpMessage;
//   constructor(private userService: UserService) { }
//   openSignInPanel() {
//     this.signInShown = true;
//   }
//   openSignUpPanel() {
//     this.signUpShown = true;
//   }
//   //when the user clicks on the button to sign in in the right panel
//   submitSignIn() {
//     console.log("submitSignIn triggered")
//     var res = this.userService.signIn(this.emailFormControlSignIn.value, this.passwordFormControlSignIn.value); //call the sign in function in the user service
//     var that = this;
//     console.log("console loggin res (this.userService.signIn(this.emailFormControlSignIn.value, this.passwordFormControlSignIn.value)): ", res);
//     res.subscribe(data => { //wait for the response
//       console.log(data.message);
//       if (data.message == "Success") { //if the email and password are correct
//         that.signInMessage.text = "Connexion successful";
//         that.signInMessage.severity = "success";
//         that.visibilityMessageSignIn = "visible";
//         this.userService.setUser(data.data); //store the user data
//         this.signedIn.emit('signedIn'); //emit a signal to notify that the user has signed in
//         setTimeout(function() {
//           console.log("aaaa")
//           that.visibilityMessageSignIn = "hidden";
//           that.signInShown = false;
//         }, 600);
//       } else {
//         that.signInMessage.text = data.message;
//         that.signInMessage.severity = "error";
//         that.visibilityMessageSignIn = "visible";
//         setTimeout(function() {
//           console.log("bbbb")
//           console.log("error message:" + data.message);
//           that.visibilityMessageSignIn = "hidden";
//         }, 3000);
//       }
//     },
//       error => {
//         that.signInMessage.text = "Connection error";
//         that.signInMessage.severity = "error";
//         that.visibilityMessageSignIn = "visible";
//         setTimeout(function() {
//           that.visibilityMessageSignIn = "hidden";
//         }, 3000);
//       });
//   }
//   submitSignUp(event) {
//       var res = this.userService.signUp(this.firstnameFormControl.value, this.lastnameFormControl.value, this.emailFormControlSignUp.value, this.passwordFormControlSignUp.value);
//       const that = this;
//       res.subscribe(data => {
//         if (data.message == "Success") {
//           that.signUpMessage.text = "Success";
//           that.signUpMessage.severity = "success";
//           that.visibilityMessageSignUp = "visible";
//           setTimeout(function() {
//             that.visibilityMessageSignUp = "hidden";
//             this.emailFormControlSignIn.setValue(this.emailFormControlSignUp);
//             this.passwordFormControlSignIn.setValue(this.passwordFormControlSignUp);
//             that.submitSignIn();
//             that.signUpShown = false;
//           }, 1000);
//         } else {
//           this.showSignUpError(data.message, 3000);
//         }
//       },
//         error => {
//           this.showSignUpError("Connection error", 3000);
//         }
//       );
//   }
//   showSignUpError(message, timeout) {
//     this.signUpMessage.text = message;
//     this.signUpMessage.severity = "error";
//     this.visibilityMessageSignUp = "visible";
//     const that = this;
//     setTimeout(function() {
//       that.visibilityMessageSignUp = "hidden";
//     }, timeout)
//   }
//   ngOnInit() {
//   }
// }


/***/ }),

/***/ "./src/app/toolbar/toolbar.component.css":
/*!***********************************************!*\
  !*** ./src/app/toolbar/toolbar.component.css ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ":root{\n  --header-footer: #24292e;\n  --accent: #a2e785;\n  --background: #eae7ed;\n  --homelogo: #ffffff;\n  --genomeGitWeb: #80c962;\n  --menuItems: #ffffff;\n  --signIn: #ffffff;\n  --foreground: #f6f8fa;\n  --textLight: #ffffff;\n  --textDark: #24292e;\n  --textDarkUnfocused: #889aad;\n  --button-hover: #596470;\n  --shadow: 0 1px 5px rgba(100, 100, 100, 0.5);\n  --searchbarShadow: 0 1px 5px rgba(0, 255, 0, 1);\n  --searchbarShadowHover: 0 1px 15px rgba(0, 255, 0, 1);\n  --searchbarShadowHoverInside: inset 1px 15px rgba(0, 255, 0, 1);\n  --logos: #5f5f5f;\n  --footerText: #80c962;\n  }\n\n:host {\n  width: 100%;\n  height: 50px;\n  display: block;\n  margin-bottom: 1rem;\n}\n\n.navbar.navbar-default.navbar-fixed-top{\n background: var(--header-footer);\n border-left: solid var(--accent) 0.7vw;\n /* margin-bottom: 1rem; */\n}\n\n.navbar-default.navbar-brand{\n  color: var(--accent);\n}\n\n.navbar-default.navbar-brand:hover{\n  color: white;\n}\n\n.container{\n  padding: 0;\n}\n\n.container:hover{\n  color: white;\n  cursor: pointer;\n}\n\n.container, fa:hover{\n  color: white;\n}\n\n.container,\ni {\n  display: inline-block;\n  vertical-align: middle;\n  width: auto;\n  color: white;\n}\n\n#barsToogle {\n  /* margin-left: 25px; */\n  color: white;\n  cursor: pointer;\n}\n\nh3 {\n  margin: 0;\n}\n\n#signedDiv,\n#signDiv {\n  display: inline-block;\n  vertical-align: centre;\n  text-align: right;\n  padding-right: 25px;\n  float: right;\n  padding-top: 1rem;\n}\n\nspan {\n  color: white;\n  margin-right: 10px;\n  cursor: pointer;\n  font-size: x-large;\n}\n\n#signout {\n  color: white;\n  cursor: pointer;\n}\n\n#home {\n  font-size: 3rem;\n  color: white;\n  cursor: pointer;\n  float: left;\n  padding: 1rem 1rem;\n}\n\na {\n  cursor: pointer;\n}\n\n.navbar-log {\n  float: right;\n}\n\n.dropdown-caret {\n  /* background: lightcoral; */\n  font-size: 1rem;\n  border-bottom: 0 solid transparent;\n  border-left: 4px solid transparent;\n  border-right: 4px solid transparent;\n  border-top-style: solid;\n  border-top-width: 4px;\n  content: \"\";\n  display: inline-block;\n  height: 0;\n  vertical-align: middle;\n  width: 0;\n}\n\n.username{\n  font-size: 1.8rem;\n  border: inset lightgreen;\n  border-radius: 6px;\n  padding: 5px;\n}\n\n.circos{\n  font-size: 1.8rem;\n  border: inset lightgreen;\n  border-radius: 6px;\n  padding: 5px;\n}\n\n.username:hover{\ncolor: lightgreen;\n}\n"

/***/ }),

/***/ "./src/app/toolbar/toolbar.component.html":
/*!************************************************!*\
  !*** ./src/app/toolbar/toolbar.component.html ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.8.1/css/all.css\" integrity=\"sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf\" crossorigin=\"anonymous\">\n\n<nav\n  class=\"navbar navbar-default navbar-fixed-top\"\n>\n<i class=\"material-icons\" id=\"barsToogle\" title=\"Toggle Project Panel\" (click)=\"toogle()\" *ngIf=\"isOnApp\">\n    more_vert\n    </i>\n  <!-- <fa\n    name=\"bars\"\n    id=\"barsToogle\"\n    id=\"signout\"\n    pTooltip=\"Sign out\"\n    size=\"2x\"\n    (click)=\"toogle()\"\n    *ngIf=\"isOnApp\"\n  ></fa> -->\n  <div class=\"container\">\n    <!-- Brand and toggle get grouped for better mobile display -->\n    <div class=\"navbar-header\" style=\"float: left\">\n      <!-- <fa\n        name=\"home\"\n        id=\"home\"\n        pTooltip=\"Sign out\"\n        size=\"2x\"\n        (click)=\"loadHome()\"\n      ></fa> -->\n      <i class=\"material-icons\" id=\"home\" aria-setsize=\"2x\" (click)=\"loadHome()\">home</i>\n      <a class=\"navbar-brand\" (click)=\"loadHome()\">genomeGitWeb</a>\n    </div>\n  </div>\n  <ul\n    class=\"nav navbar-nav navbar-log\"\n    *ngIf=\"!isSigned\"\n    style=\"font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\"\n  >\n    <li style=\"border-right: solid gray 1px\">\n      <a (click)=\"signUpClicked()\" style=\"font-size: 2rem; font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\">Sign up</a>\n    </li>\n    <li >\n        <a (click)=\"signInClicked()\" style=\"font-size: 2rem; font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\">Sign in</a>\n      </li>\n  </ul>\n\n  <div *ngIf=\"isSigned\" id=\"signedDiv\">\n    <span class=\"circos\" (click)=\"plotClicked()\" title=\"Go to Visualisation page\">Plot</span>\n    <span class=\"username\" (click)=\"profileClicked()\" title=\"Go to profile page\">{{username}} <i class=\"fas fa-user-cog\"></i></span>\n    <i class=\"fas fa-sign-out-alt\" (click)=\"signOutClicked()\" style=\"color: white; font-size: 2rem;\" title=\"Log out\"></i>\n  </div>\n</nav>\n"

/***/ }),

/***/ "./src/app/toolbar/toolbar.component.ts":
/*!**********************************************!*\
  !*** ./src/app/toolbar/toolbar.component.ts ***!
  \**********************************************/
/*! exports provided: ToolbarComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ToolbarComponent", function() { return ToolbarComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _user_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../user.service */ "./src/app/user.service.ts");
/* harmony import */ var _common_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common.service */ "./src/app/common.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var ToolbarComponent = /** @class */ (function () {
    function ToolbarComponent(userService, router, commonService) {
        this.userService = userService;
        this.router = router;
        this.commonService = commonService;
        this.isSigned = false;
        this.isOnApp = false;
        this.hello = "hello";
        // event emited when the user clicks on the sign up or sign in button
        this.clicked = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        // event emited when the user clicks on the sign out button
        this.signOut = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.toogleEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        var that = this;
        router.events.subscribe(function (val) {
            var event = val;
            if (event.url === "/app") {
                that.isOnApp = true;
            }
            else if (event.url === "/") {
                that.isOnApp = false;
            }
        });
    }
    ToolbarComponent.prototype.signInClicked = function () {
        this.clicked.emit("signIn");
    };
    ToolbarComponent.prototype.signUpClicked = function () {
        this.clicked.emit("signUp");
    };
    ToolbarComponent.prototype.profileClicked = function () {
        // console.log("profile 2 click is clicked");
        this.router.navigateByUrl("/profile");
    };
    // show the user first name and last name in the toolbar
    ToolbarComponent.prototype.showUser = function () {
        // this.firstName = this.userService.getFirstName();
        // this.lastName = this.userService.getLastName();
        this.username = this.userService.getusername();
        this.email = this.userService.getEmail();
        this.isSigned = true;
        // Need to create getUserName() in user.service once Ya has userName integrated
        // this.userName = this.userService.getUserName();
        // Get selected project
    };
    ToolbarComponent.prototype.ngOnInit = function () {
        // Trying to get toolbars icon to show up when url contains "app", not only when signed in
        var app = "app";
        if (this.router.url.includes(app)) {
            this.isOnApp = true;
        }
    };
    ToolbarComponent.prototype.signOutClicked = function () {
        this.userService.signOut();
        this.isSigned = false;
        this.signOut.emit("signOut");
    };
    ToolbarComponent.prototype.toogle = function () {
        this.toogleEvent.emit();
    };
    ToolbarComponent.prototype.goToApp = function () {
        this.isOnApp = true;
    };
    ToolbarComponent.prototype.loadHome = function () {
        // console.log("This function should show the browse component and search component.")
        this.isOnApp = false;
        this.router.navigateByUrl("");
    };
    ToolbarComponent.prototype.plotClicked = function () {
        this.router.navigateByUrl("/app");
        // need to change url in address bar?
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], ToolbarComponent.prototype, "clicked", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], ToolbarComponent.prototype, "signOut", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], ToolbarComponent.prototype, "toogleEvent", void 0);
    ToolbarComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: "app-toolbar",
            template: __webpack_require__(/*! ./toolbar.component.html */ "./src/app/toolbar/toolbar.component.html"),
            styles: [__webpack_require__(/*! ./toolbar.component.css */ "./src/app/toolbar/toolbar.component.css"), __webpack_require__(/*! ../../../public/css/ionicons.min.css */ "./public/css/ionicons.min.css"), __webpack_require__(/*! ../../../public/css/font-awesome.min.css */ "./public/css/font-awesome.min.css"), __webpack_require__(/*! ../../../public/css/animate.css */ "./public/css/animate.css"), __webpack_require__(/*! ../../../public/css/custom.css */ "./public/css/custom.css")],
            providers: [_common_service__WEBPACK_IMPORTED_MODULE_2__["CommonService"]]
        })
        // interface Project {
        //   title: string;
        //   id: string;
        // }
        ,
        __metadata("design:paramtypes", [_user_service__WEBPACK_IMPORTED_MODULE_1__["UserService"], _angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"], _common_service__WEBPACK_IMPORTED_MODULE_2__["CommonService"]])
    ], ToolbarComponent);
    return ToolbarComponent;
}());



/***/ }),

/***/ "./src/app/user.service.ts":
/*!*********************************!*\
  !*** ./src/app/user.service.ts ***!
  \*********************************/
/*! exports provided: UserService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UserService", function() { return UserService; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm5/http.js");
/* harmony import */ var ngx_cookie_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ngx-cookie-service */ "./node_modules/ngx-cookie-service/index.js");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../environments/environment */ "./src/environments/environment.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var UserService = /** @class */ (function () {
    function UserService(http, cookieService) {
        this.http = http;
        this.cookieService = cookieService;
        this.isSignedIn = false;
        this.selectedProject = null;
    }
    UserService.prototype.signIn = function (username, password) {
        var url = _environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].host +
            "signin?username=" +
            username +
            "&password=" +
            password;
        return this.http.get(url); // sends a request to sign in to the server
    };
    UserService.prototype.signInWithCookies = function () {
        var url = _environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].host +
            "signin?username=" +
            this.cookieService.get("username") +
            "&token=" +
            this.cookieService.get("token");
        return this.http.get(url);
    };
    UserService.prototype.signUp = function (username, email, password) {
        var url = _environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].host +
            "signup?username=" +
            username +
            "&email=" +
            email +
            "&password=" +
            password;
        return this.http.get(url);
    };
    UserService.prototype.resetpassword = function (username, password, newpassword) {
        var url = _environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].host +
            "resetpassword?username=" +
            username +
            "&password=" +
            password +
            "&newpassword=" +
            newpassword;
        return this.http.get(url);
    };
    UserService.prototype.forgetpassword = function (email) {
        var url = _environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].host + "forgetpassword?email=" + email;
        return this.http.get(url);
    };
    UserService.prototype.addUsersToProject = function (emails, projectId) {
        emails = JSON.stringify(emails);
        var url = _environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].host +
            "addUsersToProject?emails=" +
            emails +
            "&project=" +
            projectId;
        return this.http.get(url);
    };
    // once the server has returned the sign up data, store them in the service and create cookies so that the user can auto sign in later
    UserService.prototype.setUser = function (data) {
        this.username = data.username;
        this.email = data.email;
        this.token = data.token;
        this.id = data._id;
        this.isSignedIn = true;
        this.cookieService.set("username", this.username);
        this.cookieService.set("email", this.email);
        this.cookieService.set("token", this.token);
        this.cookieService.set("id", this.id);
    };
    UserService.prototype.getUser = function (email) {
        // var url = environment.host+'signin?email='+this.cookieService.get('email')+'&token='+this.cookieService.get('token');
    };
    UserService.prototype.getusername = function () {
        return this.username;
    };
    UserService.prototype.getEmail = function () {
        return this.email;
    };
    UserService.prototype.getIsSignedIn = function () {
        return this.isSignedIn;
    };
    UserService.prototype.getToken = function () {
        return this.token;
    };
    UserService.prototype.getID = function () {
        return this.id;
    };
    UserService.prototype.getProject = function () {
        return this.selectedProject;
    };
    UserService.prototype.hasCookies = function () {
        // check if there are cookies saved for the application
        if (this.cookieService.get("token")) {
            return true;
        }
        else {
            return false;
        }
    };
    UserService.prototype.signOut = function () {
        // remove the cookies and change the signedIn state to false
        // this.cookieService.delete( 'firstName');
        // this.cookieService.delete( 'lastName');
        this.cookieService.delete("username");
        this.cookieService.delete("email");
        this.cookieService.delete("token");
        this.cookieService.delete("id");
        this.isSignedIn = false;
    };
    UserService = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])(),
        __metadata("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpClient"], ngx_cookie_service__WEBPACK_IMPORTED_MODULE_2__["CookieService"]])
    ], UserService);
    return UserService;
}());



/***/ }),

/***/ "./src/app/webcircos/biocircos/biocircos.component.css":
/*!*************************************************************!*\
  !*** ./src/app/webcircos/biocircos/biocircos.component.css ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#biocircos {\n  width: 100%;\n  height: 100%;\n  display: inline-block;\n  /*vertical-align: top;*/\n  float: left;\n  /*border: 3px solid #73AD21;*/\n}\n\n:host{\n  position: relative;\n}\n\n#verticalLayout{\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n}\n\n#displayCustomiseIcon {\n  cursor: pointer;\n  position: absolute;\n  right: 20%;\n}\n\n#circosSpinnerContainer{\n  flex:1;\n  position:relative;\n}\n\np-progressSpinner {\n  z-index: 2;\n  position: absolute;\n  left: calc(50% - 50px);\n  top: calc(50% - 51px);\n}\n\ncircos-controls {\n  height: 100%;\n  width: 19%;\n  display: inline-block;\n  vertical-align: top;\n  float: right;\n  /*border: 3px solid #73AD21;*/\n}\n\n#boxes div {\n  display: inline-block;\n  vertical-align: bottom;\n  height: 20px;\n  width: 20px;\n  border: 2px solid black;\n}\n\n#annotLow {\n  background: yellow;\n}\n\n#annotHigh {\n  background: red;\n}\n\n#diffLow {\n  background: yellow;\n}\n\n#diffHigh {\n  background: red;\n}\n\n#genomicCoverage {\n  background: #F36800;\n}\n\n#SNPDensity {\n  background: red;\n}\n\n#instructionMessage{\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: #7d7d7d;\n  font-size: xx-large;\n  height: 100%;\n  /* word-break: break-all; */\n  opacity: 0.8;\n  position: absolute;\n  margin-left: 20px;\n  margin-right: 20px;\n  z-index: 10;\n  width: 100%;\n}\n"

/***/ }),

/***/ "./src/app/webcircos/biocircos/biocircos.component.html":
/*!**************************************************************!*\
  !*** ./src/app/webcircos/biocircos/biocircos.component.html ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div style=\"display:inline-block;width:80%; height:100%\">\n  <div id=\"verticalLayout\">\n    <p id=\"instructionMessage\" *ngIf=\"!circosDisplayed\">\n      {{ msg }}\n    </p>\n\n    <div id=\"circosSpinnerContainer\">\n      <fa\n        *ngIf=\"circosDisplayed\"\n        name=\"cogs\"\n        pTooltip=\"Customisation Panel\"\n        size=\"3x\"\n        id=\"displayCustomiseIcon\"\n        (click)=\"openCustomisationPanel()\"\n      ></fa>\n\n      <div #biocircos id=\"biocircos\"></div>\n      <p-progressSpinner\n        #progressSpinner\n        *ngIf=\"loadingService.isCharging\"\n        strokeWidth=\"8\"\n        fill=\"#EEEEEE\"\n        animationDuration=\"10.0s\"\n      ></p-progressSpinner>\n    </div>\n  </div>\n</div>\n\n<circos-controls\n  #circosControls\n  (onGroupAdded)=\"updateGroups($event)\"\n  (onDisplayGroups)=\"displayChromosomeGroups($event)\"\n  (onReorder)=\"reorderTracks($event)\"\n  (onDisplayGroup1)=\"submitDisplayCircos($event, 'single')\"\n  (ClearMessage)=\"clear_messages()\"\n  (CreateMessage)=\"create_msgs($event)\"\n></circos-controls>\n"

/***/ }),

/***/ "./src/app/webcircos/biocircos/biocircos.component.ts":
/*!************************************************************!*\
  !*** ./src/app/webcircos/biocircos/biocircos.component.ts ***!
  \************************************************************/
/*! exports provided: CircosGroup, DataTrack, Chromosome, BiocircosComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CircosGroup", function() { return CircosGroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataTrack", function() { return DataTrack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Chromosome", function() { return Chromosome; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BiocircosComponent", function() { return BiocircosComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm5/http.js");
/* harmony import */ var _user_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../user.service */ "./src/app/user.service.ts");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../environments/environment */ "./src/environments/environment.ts");
/* harmony import */ var _loading_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../loading.service */ "./src/app/loading.service.ts");
/* harmony import */ var _display_settings_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../display-settings.service */ "./src/app/display-settings.service.ts");
/* harmony import */ var _lib_d3_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../lib/d3.js */ "./lib/d3.js");
/* harmony import */ var _lib_d3_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_lib_d3_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _lib_biocircos_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../lib/biocircos.js */ "./lib/biocircos.js");
/* harmony import */ var _lib_biocircos_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_lib_biocircos_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _lib_bam_iobio2_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../lib/bam.iobio2.js */ "./lib/bam.iobio2.js");
/* harmony import */ var _lib_bam_iobio2_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_lib_bam_iobio2_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _routes_binner__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../routes/binner */ "./routes/binner.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};











var CircosGroup = /** @class */ (function () {
    function CircosGroup() {
        this.binned = true;
    }
    return CircosGroup;
}());

var DataTrack = /** @class */ (function () {
    function DataTrack() {
    }
    return DataTrack;
}());

// Chromosome object for the zoom
var Chromosome = /** @class */ (function () {
    function Chromosome() {
    }
    return Chromosome;
}());

var BiocircosComponent = /** @class */ (function () {
    function BiocircosComponent(userService, http, el, loadingService, displaySettingsService) {
        this.userService = userService;
        this.http = http;
        this.el = el;
        this.loadingService = loadingService;
        this.displaySettingsService = displaySettingsService;
        // Messages
        this.msgs = [];
        this.msg = 'Create a new project or select an existing one';
        this.insert_fasta_msgs = [];
        this.create_project_msgs = [];
        this.chromosomes = [];
        this.selectedChromosome = null;
        this.selectedReorderedChromosome = null;
        this.genomeData = null;
        this.BioCircos01 = null;
        this.circosDisplayed = false;
        this.tracksArray = []; // array generated by re-ordering carried by the user
        this.maxRadiusTrack1 = 400;
        this.space = 10;
        this.minRadiusTrack1 = this.maxRadiusTrack1 - this.space;
        this.lastRadius = this.minRadiusTrack1;
        this.trackSize = 30;
        this.highlightedRegionAnnotation = 'genes';
        // Retrieve the slider from the html
        this.anPosition = {};
        this.dataDisplayed = null;
        this.DisplayMessages = true;
        this.showHomoSNP = false;
        this.selectionPos = { start: null, end: null, groupStart: null, groupEnd: null };
        this.graphTypeSelected = 'histogram';
        this.linksBoolean = false;
        this.onGroupListAdded = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.modeChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.onCircosClick = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.openCustomisation = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.TEXT01 = null;
    }
    BiocircosComponent.prototype.showLinksLegend = function (show) {
        this.circosControls.showLinksLegend = show;
    };
    BiocircosComponent.prototype.rescaleValue = function (data) {
        var newData = [];
        for (var i = 0; i < data.length; i++) {
            newData.push({ chr: data[i].chr, pos: data[i].pos, value: 1 / (1 + Math.exp(-data[i].value)) });
        }
        return newData;
    };
    BiocircosComponent.prototype.catchGraphTypeSelection = function (event) {
        var data;
        var mode;
        this.graphTypeSelected = event;
        data = this.dataDisplayed;
        mode = this.mode;
        this.submitDisplayCircos(data, mode);
    };
    BiocircosComponent.prototype.heatmapToARC = function (data, format) {
        var newData = [];
        var startCol = [255, 0, 0];
        var endCol = [0, 205, 0];
        var color;
        for (var i = 0; i < data.length; i++) {
            if (format === 'de' || format === 'diffExp') {
                if (data[i].value === 0) {
                    color = '#ffff00';
                }
                else {
                    color = this.colorGradient(1 / (1 + Math.exp(-data[i].value)), startCol, endCol);
                    color = this.rgb(color[0], color[1], color[2]);
                }
                newData.push({
                    chr: data[i].chr, start: data[i].start - this.circosControls.zoomStart,
                    end: data[i].end - this.circosControls.zoomStart, startTooltip: data[i].start,
                    endTooltip: data[i].end, color: color, des: data[i].name, logFC: data[i].value
                });
            }
            else {
                newData.push({
                    chr: data[i].chr, start: data[i].start - this.circosControls.zoomStart,
                    end: data[i].end - this.circosControls.zoomStart, startTooltip: data[i].start,
                    endTooltip: data[i].end, color: 'blue', des: data[i].des, logFC: ''
                });
            }
        }
        return newData;
    };
    BiocircosComponent.prototype.addBinValueToolTip = function (data, fasta, genomeLength) {
        var bin = this.toMb(genomeLength);
        if (this.circosControls.selectedGroups.length % 2 === 0) {
            var nbBeforeReverse = this.circosControls.selectedGroups.length / 2;
            var lastGrp = void 0;
            if (data[0].chr.split('_')) {
                lastGrp = data[0].chr.split('_')[0];
            }
            else {
                return;
            }
            var newGrp = lastGrp;
            var chrZoomed = void 0;
            var _loop_1 = function (i) {
                if (data[i].chr === this_1.circosControls.chromosomeZoomed) {
                    chrZoomed = 1;
                }
                else {
                    chrZoomed = 0;
                }
                if (nbBeforeReverse > 0) {
                    if (data[i].pos) {
                        data[i].posTooltip = data[i].pos;
                        data[i].pos = data[i].pos - chrZoomed * this_1.circosControls.zoomStart;
                    }
                    else {
                        data[i].startTooltip = data[i].start + chrZoomed * this_1.circosControls.zoomStart;
                        data[i].endTooltip = data[i].end + chrZoomed * this_1.circosControls.zoomStart;
                        data[i].name = bin + 'Kb';
                    }
                }
                else {
                    var chrSize = fasta.find(function (el) { return el[0] === data[i].chr; });
                    chrSize = chrSize[1];
                    if (data[i].pos) {
                        data[i].posTooltip = parseInt(chrSize) - data[i].pos;
                        data[i].pos = data[i].pos - chrZoomed * this_1.circosControls.zoomStart;
                    }
                    else {
                        data[i].startTooltip = parseInt(chrSize) - (data[i].start + chrZoomed * this_1.circosControls.zoomStart);
                        data[i].endTooltip = parseInt(chrSize) - (data[i].end + chrZoomed * this_1.circosControls.zoomStart);
                        data[i].name = bin + 'Kb';
                    }
                }
                newGrp = data[i].chr.split('_')[0];
                if (lastGrp != newGrp) {
                    lastGrp = newGrp;
                    nbBeforeReverse--;
                }
            };
            var this_1 = this;
            for (var i = 0; i < data.length; i++) {
                _loop_1(i);
            }
        }
        else {
            for (var i = 0; i < data.length; i++) {
                if (data[i].pos) {
                    data[i].posTooltip = data[i].pos;
                    data[i].pos = data[i].pos - this.circosControls.zoomStart;
                }
                else {
                    data[i].startTooltip = data[i].start + this.circosControls.zoomStart;
                    data[i].endTooltip = data[i].end + this.circosControls.zoomStart;
                    data[i].name = bin + 'Kb';
                }
            }
        }
        return data;
    };
    BiocircosComponent.prototype.toMb = function (number) {
        number = Math.floor(number / (1000 * 1000));
        return number;
    };
    BiocircosComponent.prototype.ngOnInit = function () {
        this.biocircos.nativeElement.oncontextmenu = function () {
            return false;
        };
        this.TEXT01 = ['TEXT01', {
                x: 0,
                y: 0,
                textSize: 16,
                textColor: 'black',
                textOpacity: 0.8,
                text: ''
            }];
        this.fullImagePath = '/vcfLegend.png';
        this.legendBooleans = {
            fastaChrBoolean: false,
            annotChrBoolean: false,
            diffChrBoolean: false,
            genomCovBoolean: false,
            vcfChrBoolean: false,
            transcriptomicCov: false,
            expressionBoolean: false,
            snpLinkBoolean: false,
        };
        this.create_msgs(['Please Sign In', 'Enter Fasta']);
    };
    BiocircosComponent.prototype.clear_messages = function () {
        this.msgs = [];
    };
    BiocircosComponent.prototype.create_msgs = function (messages) {
        if (this.DisplayMessages === true) {
            this.msgs = [];
            for (var i = 0; i < messages.length; i++) {
                if (messages[i] === 'warning') {
                    //this.msgs.push({ severity: 'warn', summary: 'Warn Message',
                    //detail: 'Be sure to select the correct fasta file before you upload any other file type!' });
                }
                else {
                    //this.msgs.push({ severity: 'info', summary: 'Info Message', detail: messages[i] });
                }
            }
        }
    };
    BiocircosComponent.prototype.ngAfterViewInit = function () {
        this.RegisterMouseDown();
        this.RegisterMouseUp();
    };
    BiocircosComponent.prototype.RegisterMouseDown = function () {
        this.el.nativeElement.removeEventListener('mousedown', this.OnMouseDown.bind(this));
        this.el.nativeElement.addEventListener('mousedown', this.OnMouseDown.bind(this));
    };
    BiocircosComponent.prototype.RegisterMouseUp = function () {
        this.el.nativeElement.removeEventListener('HTMLEvents', this.OnMouseUp.bind(this));
        this.el.nativeElement.addEventListener('HTMLEvents', this.OnMouseUp.bind(this));
    };
    BiocircosComponent.prototype.OnMouseUp = function (event) {
        if (event.target.attributes.class) {
            if (event.target.attributes.class.nodeValue === "BioCircosZOOM_SLIDER") {
                this.selectionPos.end = this.BioCircos01.settings.zoom_end; // add values to object
                this.selectionPos.groupEnd = this.BioCircos01.settings.groupEnd; // event.target.attributes.group.nodeValue;
                // only if start and end are in the same group and chromosome
                var clickedChrGroup = this.selectionPos.groupStart.split("_", 2); // get the group name
                // from the property in clicked svg tag and split at which divides group name and chromosome number
                var clickedGroupName = clickedChrGroup[0];
                var clickedChr = void 0;
                if (!clickedChrGroup[1]) {
                    // only a chomosome number set, no groups so emit to project panel
                    clickedChr = clickedGroupName;
                    clickedGroupName = "Group 1";
                }
                else {
                    clickedChr = clickedChrGroup[1];
                }
                var clickedGroupId = this.circosControls.groups
                    .map(function (e) {
                    return e.name;
                })
                    .indexOf(clickedGroupName); //find the id of the group name in the groups array in circos-controls
                var clickedGroupObj = this.circosControls.groups[clickedGroupId]; //get it as an object too
                var chrId = clickedGroupObj.chromosomes
                    .map(function (e) {
                    return e.id;
                })
                    .indexOf(clickedChr); // get the id of the chromosome that matches the clicked chromosome number
                clickedGroupObj.selectedChromosome = clickedGroupObj.chromosomes[chrId]; // set up the chromosome object
                clickedGroupObj.chromosomeSelected = true;
                clickedGroupObj.range[0] = Math.min(this.selectionPos.start, this.selectionPos.end); // add positions to range array in object
                clickedGroupObj.range[1] = Math.max(this.selectionPos.start, this.selectionPos.end);
                clickedGroupObj.range = JSON.parse(JSON.stringify(clickedGroupObj.range));
                this.circosControls.zoomIn(clickedGroupId, clickedGroupObj);
            }
        }
    };
    BiocircosComponent.prototype.OnMouseDown = function (event) {
        var _this = this;
        if (event.target.attributes.class) {
            if (event.target.attributes.class.nodeValue === "BioCircosZOOM_SLIDER") {
                //console.log('heatmap order: ' + event.target.attributes.order.nodeValue); //to differentiate between heatmap tracks, 0 is outermost, highest number most innermost
                this.selectionPos.start = this.BioCircos01.settings.zoom_start; // set start position and group
                this.selectionPos.groupStart = this.BioCircos01.settings.groupStart; // event.target.attributes.group.nodeValue;
            }
            if (event.target.attributes.class.nodeValue === "BioCircosHEATMAP") {
                //  FOR LINEAR
                if (this.circosControls.selectedGroups.length === 1) {
                    this.selectionPos.groupStart =
                        event.target.attributes.group.nodeValue;
                    var clickedChrGroup = this.selectionPos.groupStart.split("_", 2); //get the group name from the property in clicked svg tag and split at _ which divides group name and chromosome number
                    var clickedGroupName = clickedChrGroup[0];
                    var clickedChr = void 0;
                    if (!clickedChrGroup[1]) {
                        // only a chomosome number set, no groups so emit to project panel
                        clickedChr = clickedGroupName;
                        clickedGroupName = "Group 1";
                    }
                    else {
                        clickedChr = clickedChrGroup[1];
                    }
                    this.anPosition = {};
                    this.anPosition.start = Math.round(event.target.__data__.heatmap_startTooltip);
                    this.anPosition.end = Math.round(event.target.__data__.heatmap_endTooltip);
                    this.anPosition.chr = {
                        id: clickedChr,
                        size: this.dataDisplayed.fasta.data.find(function (el) { return el[0] === _this.selectionPos.groupStart; })[1]
                    };
                    this.anPosition.files = { annotation: [], vcf: [] };
                    for (var _i = 0, _a = this.dataDisplayed.tracks; _i < _a.length; _i++) {
                        var file = _a[_i];
                        if (file.format === "vcf") {
                            this.anPosition.files.vcf.push({
                                id: file.file,
                                name: this.filesNames[file.file]
                            });
                        }
                        else if (file.format === "annotation") {
                            this.anPosition.files.annotation.push({
                                id: file.file,
                                name: this.filesNames[file.file]
                            });
                        }
                    }
                    this.onCircosClick.emit(this.anPosition);
                }
            }
            if (event.target.attributes.class.nodeValue.includes("BioCircosGENOME")) {
                // if the fasta track was clicked
                //let clickedChrGroup = event.target.attributes.group.nodeValue.split("_",2); //get the group name from the property in clicked chromosome svg tag and split at _ which divides group name and chromosome number
                var clickedChrGroup = this.BioCircos01.argumentsBiocircosGenome[event.target.__data__.index][0].split("_");
                var clickedGroupName = clickedChrGroup[0];
                var clickedChr = void 0;
                if (!clickedChrGroup[1]) {
                    // only a chomosome number set, no groups so emit to project panel
                    clickedChr = clickedGroupName;
                    clickedGroupName = "Group 1";
                }
                else {
                    clickedChr = clickedChrGroup[1];
                }
                var clickedGroupId = this.circosControls.groups
                    .map(function (e) {
                    return e.name;
                })
                    .indexOf(clickedGroupName); // find the id of the group name in the groups array in circos-controls
                var clickedGroupObj = this.circosControls.groups[clickedGroupId]; // get it as an object too
                var chrId = clickedGroupObj.chromosomes
                    .map(function (e) {
                    return e.id;
                })
                    .indexOf(clickedChr); //get the id of the chromosome that matches the clicked chromosome number
                clickedGroupObj.selectedChromosome = clickedGroupObj.chromosomes[chrId]; //set up the chromosome object
                clickedGroupObj.chromosomeSelected = true;
                this.circosControls.selectChromosome(clickedGroupId, clickedGroupObj);
            }
        }
    };
    BiocircosComponent.prototype.clear = function () {
        if (this.biocircos.nativeElement.childNodes.length > 0) {
            this.biocircos.nativeElement.removeChild(this.biocircos.nativeElement.childNodes[0]);
            var tooltips = document.getElementsByClassName('BioCircosLINKTooltip'); // remove the link tooltips
            while (tooltips[0]) {
                tooltips[0].parentNode.removeChild(tooltips[0]);
            }
            tooltips = document.getElementsByClassName('BioCircosHISTOGRAMTooltip'); // remove the link tooltips
            while (tooltips[0]) {
                tooltips[0].parentNode.removeChild(tooltips[0]);
            }
            tooltips = document.getElementsByClassName('BioCircosHeatmapTooltip'); // remove the link tooltips
            while (tooltips[0]) {
                tooltips[0].parentNode.removeChild(tooltips[0]);
            }
        }
        this.legendBooleans.fastaChrBoolean = false;
        this.legendBooleans.annotChrBoolean = false;
        this.legendBooleans.diffChrBoolean = false;
        this.legendBooleans.genomCovBoolean = false;
        this.legendBooleans.vcfChrBoolean = false;
        this.legendBooleans.transcriptomicCov = false;
        this.legendBooleans.expressionBoolean = false;
        this.legendBooleans.snpLinkBoolean = false;
        this.dataDisplayed = null;
    };
    BiocircosComponent.prototype.clearProject = function () {
        this.clear();
        this.circosControls.clear();
    };
    BiocircosComponent.prototype.updateGroups = function (data) {
        this.onGroupListAdded.emit(data);
    };
    BiocircosComponent.prototype.createZOOM_SLIDER = function (fasta, genomeLength) {
        var regionSize = genomeLength / 100;
        var zoom_slider = [];
        for (var j = 0; j < fasta.length; j++) {
            for (var k = 0; k < fasta[j][1] / regionSize; k++) {
                if (Math.floor((k + 1) * regionSize) < fasta[j][1]) {
                    zoom_slider.push({
                        chr: fasta[j][0], start: Math.floor(k * regionSize), end: Math.floor((k + 1) * regionSize),
                        actualStart: Math.floor(k * regionSize) + this.circosControls.zoomStart,
                        actualEnd: Math.floor((k + 1) * regionSize) + this.circosControls.zoomStart
                    });
                }
                else {
                    zoom_slider.push({
                        chr: fasta[j][0], start: Math.floor(k * regionSize), end: fasta[j][1],
                        actualStart: Math.floor(k * regionSize) + this.circosControls.zoomStart,
                        actualEnd: fasta[j][1] + this.circosControls.zoomStart
                    });
                }
            }
        }
        return zoom_slider;
    };
    BiocircosComponent.prototype.submitFileList = function (data) {
        this.circosControls.setFileList(data);
    };
    BiocircosComponent.prototype.submitDisplayCircos = function (data, mode) {
        this.clear();
        if (mode === 'comparison') {
            this.mode = 'comparison';
            this.displaySettingsService.mode = 'comparison';
            this.modeChanged.emit('comparison');
        }
        else {
            this.modeChanged.emit('single');
            this.mode = 'single';
            this.displaySettingsService.mode = 'single';
        }
        this.loadingService.isCharging = true;
        this.dataDisplayed = data;
        this.genomeData = data;
        var tracksArray = [];
        var genomeLength = 0;
        for (var i = 0; i < data.fasta.data.length; i++) {
            genomeLength += data.fasta.data[i][1];
            this.totalGenomeSize = genomeLength;
        }
        if (data) {
            if (data.tracks.length === 0 && !this.linksDisplayed) {
                this.circosDisplayed = false;
                this.msg = 'Upload some files or select files from the list to display the circos';
            }
            else {
                this.circosDisplayed = true;
                for (var i = 0; i < data.fasta.data.length; i++) {
                    if (data.fasta) {
                        tracksArray.push('fasta');
                        this.legendBooleans.fastaChrBoolean = true;
                    }
                }
                var nbTracks = data.tracks.length + 3;
                if (data.SNPLinks) {
                    nbTracks++;
                }
                var annotationOrdiff = '';
                this.maxRadiusTrack1 = Math.min((this.biocircos.nativeElement.clientWidth * 0.85 - 20) / 2, (this.biocircos.nativeElement.clientHeight - 60) / 2);
                this.trackSize = Math.round(this.maxRadiusTrack1 / nbTracks);
                this.space = Math.ceil(((40 - nbTracks * 3) / 100) * this.trackSize);
                this.minRadiusTrack1 = this.maxRadiusTrack1 - this.trackSize / 2;
                this.lastRadius = this.minRadiusTrack1 - this.space;
                var modules = [];
                var rest = 0;
                var roundZoomStart = 0;
                this.defineTicks(genomeLength);
                var displayTickText = true;
                if (this.circosControls.selectedGroups.length > 1) {
                    displayTickText = false;
                }
                this.tracksArray = tracksArray;
                var track = void 0;
                if (data.fasta.data.length === this.circosControls.selectedGroups.length) {
                    var zoom_slider = this.createZOOM_SLIDER(data.fasta.data, genomeLength);
                    modules.push(['ZOOM_SLIDER01', {
                            minRadius: this.minRadiusTrack1,
                            maxRadius: this.maxRadiusTrack1,
                        }, zoom_slider]);
                    if (this.circosControls.zoomStart != 0) {
                        rest = this.tickLength - (this.circosControls.zoomStart % this.tickLength);
                        roundZoomStart = Math.round(this.circosControls.zoomStart +
                            (this.tickLength - (this.circosControls.zoomStart % this.tickLength)));
                    }
                }
                this.lastRadius = this.minRadiusTrack1 - this.space;
                for (var i = 0; i < data.tracks.length; i++) { // Go through the whole array element by element and check the nature of the element
                    track = data.tracks[i];
                    if (track.format === 'vcf') { // if the file is a VCF file
                        var vcfData = JSON.parse(JSON.stringify(track.data));
                        tracksArray.push('vcf');
                        this.legendBooleans.vcfChrBoolean = true;
                        if (vcfData[0].pos === undefined) {
                            // here add the if for checking emission
                            if (this.graphTypeSelected === 'lineGraph') {
                                vcfData = this.addBinValueToolTip(vcfData, data.fasta.data, genomeLength);
                                for (var z = 0; z < vcfData.length; z++) {
                                    vcfData[z].pos = (vcfData[z].start + vcfData[z].end) / 2;
                                }
                            }
                            else {
                                vcfData = this.addBinValueToolTip(vcfData, data.fasta.data, genomeLength);
                            }
                            if (this.graphTypeSelected === 'lineGraph') {
                                modules.push(['LINE01', {
                                        minRadius: this.lastRadius - this.trackSize,
                                        maxRadius: this.lastRadius,
                                        LineColor: '#FF6666',
                                        LineWidth: 1
                                    }, vcfData, undefined]);
                            }
                            else {
                                modules.push(['HISTOGRAM01', {
                                        minRadius: this.lastRadius - this.trackSize,
                                        maxRadius: this.lastRadius,
                                        histogramFillColor: '#FF6666',
                                    }, vcfData]);
                            }
                            if (this.showHomoSNP) {
                                var max = 0;
                                for (var j = 0; j < vcfData.length; j++) {
                                    if (vcfData[j].value > max) {
                                        max = vcfData[j].value;
                                    }
                                }
                                var vcfData2 = JSON.parse(JSON.stringify(track.data));
                                for (var j = 0; j < vcfData2.length; j++) {
                                    vcfData2[j].value = vcfData2[j].homo;
                                }
                                vcfData2 = this.addBinValueToolTip(vcfData2, data.fasta.data, genomeLength);
                                if (this.graphTypeSelected === 'lineGraph') {
                                    for (var z = 0; z < vcfData2.length; z++) {
                                        vcfData2[z].pos = (vcfData2[z].start + vcfData2[z].end) / 2;
                                    }
                                    modules.push(['LINE01', {
                                            minRadius: this.lastRadius - this.trackSize,
                                            maxRadius: this.lastRadius,
                                            LineColor: 'green',
                                            LineWidth: 1
                                        }, vcfData2, max]);
                                }
                                else {
                                    modules.push(['HISTOGRAM01', {
                                            minRadius: this.lastRadius - this.trackSize,
                                            maxRadius: this.lastRadius,
                                            histogramFillColor: 'green',
                                        }, vcfData2, max]);
                                }
                            }
                        }
                        else {
                            vcfData = this.addBinValueToolTip(vcfData, data.fasta.data, genomeLength);
                            if (!vcfData[0].color) {
                                var color = void 0;
                                for (var j = 0; j < vcfData.length; j++) {
                                    color = this.colorGradient(vcfData[j].homo, [255, 0, 0], [0, 255, 0]);
                                    vcfData[j].color = this.rgb(color[0], color[1], color[2]);
                                }
                            }
                            modules.push(['SNP01', {
                                    minRadius: this.lastRadius - this.trackSize + this.space / 2,
                                    maxRadius: this.lastRadius - this.space / 2,
                                    SNPFillColor: '#9400D3',
                                    PointType: 'circle',
                                    circleSize: 2,
                                    rectWidth: 2,
                                    rectHeight: 2
                                }, vcfData]);
                        }
                        modules.push(['BACKGROUND01', {
                                BginnerRadius: this.lastRadius - this.trackSize,
                                BgouterRadius: this.lastRadius,
                                BgFillColor: '#F2F2F2',
                                BgborderColor: '#000',
                                BgborderSize: 0.3,
                                axisShow: 'true',
                                axisWidth: 0.1,
                                axisColor: '#000',
                                axisNum: 8
                            }]);
                        this.lastRadius = this.lastRadius - this.trackSize - this.space;
                    }
                    else if (track.format === 'annotation') {
                        var annot = JSON.parse(JSON.stringify(track.data));
                        for (var j = 0; j < annot.length; j++) {
                            //console.log(annot[j])
                            annot[j].value = annot[j][this.highlightedRegionAnnotation];
                            if (annot[j].value == null || annot[j].value === undefined) {
                                annot[j].value = 0;
                            }
                        }
                        tracksArray.push('annotation');
                        this.legendBooleans.annotChrBoolean = true;
                        if (track.isARC) {
                            annot = this.heatmapToARC(annot, track.format);
                            modules.push(['ARC01', {
                                    innerRadius: this.lastRadius - this.maxRadiusTrack1,
                                    outerRadius: this.lastRadius - this.maxRadiusTrack1,
                                }, annot]);
                            modules.push(['BACKGROUND01', {
                                    BginnerRadius: this.lastRadius - this.trackSize / 2,
                                    BgouterRadius: this.lastRadius,
                                    BgFillColor: 'orange',
                                    BgborderColor: '#000',
                                    BgborderSize: 0
                                }]);
                            annotationOrdiff = '<br>';
                        }
                        else {
                            annot = this.addBinValueToolTip(annot, data.fasta.data, genomeLength);
                            modules.push(['HEATMAP01', {
                                    innerRadius: this.lastRadius - this.maxRadiusTrack1,
                                    outerRadius: this.lastRadius - this.maxRadiusTrack1,
                                    maxColor: 'blue',
                                    minColor: 'orange'
                                }, annot]);
                        }
                        this.lastRadius = this.lastRadius - (this.trackSize / 2) - this.space;
                    }
                    else if (track.format === 'diffExp' || track.format === 'de') {
                        tracksArray.push('diffExp');
                        this.legendBooleans.diffChrBoolean = true;
                        var diffTrack = JSON.parse(JSON.stringify(track.data));
                        diffTrack = this.heatmapToARC(diffTrack, track.format);
                        modules.push(['ARC01', {
                                innerRadius: this.lastRadius - this.maxRadiusTrack1,
                                outerRadius: this.lastRadius - this.maxRadiusTrack1,
                            }, diffTrack]);
                        annotationOrdiff = '<br> logFC: ';
                        modules.push(['BACKGROUND01', {
                                BginnerRadius: this.lastRadius - this.trackSize / 2,
                                BgouterRadius: this.lastRadius,
                                BgFillColor: '#ffff00',
                                BgborderColor: '#000',
                                BgborderSize: 0
                            }]);
                        this.lastRadius = this.lastRadius - this.trackSize / 2 - this.space;
                    }
                    else if (track.format === 'transcriptomicCov' || track.format === 'bedcov') {
                        tracksArray.push('transcriptomicCov');
                        this.legendBooleans.transcriptomicCov = true;
                        for (var j = 0; j < track.data.length; j++) {
                            delete track.data[j]._id;
                        }
                        modules.push(['LINE01', {
                                minRadius: this.lastRadius - this.trackSize + this.space / 2,
                                maxRadius: this.lastRadius - this.space / 2,
                                LineColor: '#307E80',
                                LineWidth: 1
                            },
                            this.rescaleValue(track.data)]);
                        modules.push(['BACKGROUND01', {
                                BginnerRadius: this.lastRadius - this.trackSize,
                                BgouterRadius: this.lastRadius,
                                BgFillColor: '#F2F2F2',
                                BgborderColor: '#000',
                                BgborderSize: 0.3
                            }]);
                        this.lastRadius = this.lastRadius - this.trackSize - this.space;
                    }
                    else if (track.format === 'genomicCov' || track.format === 'bam' || track.format === 'bai') {
                        // track.data = this.rescaleValue(track.data)
                        tracksArray.push('genomicCov');
                        this.legendBooleans.genomCovBoolean = true;
                        modules.push(['LINE02', {
                                minRadius: this.lastRadius - this.trackSize,
                                maxRadius: this.lastRadius,
                                LineColor: '#ABCF27',
                                LineWidth: 1
                            },
                            track.data]);
                        modules.push(['BACKGROUND02', {
                                BginnerRadius: this.lastRadius - this.trackSize,
                                BgouterRadius: this.lastRadius,
                                BgFillColor: '#F2F2F2',
                                BgborderColor: '#000',
                                BgborderSize: 0.3
                            }]);
                        this.lastRadius = this.lastRadius - this.trackSize - this.space;
                    }
                    else if (track.format === 'expression' || track.format === 'results') {
                        tracksArray.push('expression');
                        this.legendBooleans.expressionBoolean = true;
                        /*  for (let j = 0; j < track.data.length; j++) {
                            delete track.data[j]._id;
                          }*/
                        modules.push(['LINE03', {
                                minRadius: this.lastRadius - this.trackSize + this.space / 2,
                                maxRadius: this.lastRadius - this.space / 2,
                                LineColor: '#723584',
                                LineWidth: 1
                            },
                            this.rescaleValue(track.data)]);
                        modules.push(['BACKGROUND03', {
                                BginnerRadius: this.lastRadius - this.trackSize,
                                BgouterRadius: this.lastRadius,
                                BgFillColor: '#F2F2F2',
                                BgborderColor: '#000',
                                BgborderSize: 0.3
                            }]);
                        this.lastRadius = this.lastRadius - this.trackSize - this.space;
                    }
                    else if (track.format === "InDelSNP") {
                        var annot = JSON.parse(JSON.stringify(track.data));
                        for (var j = 0; j < annot.length; j++) {
                            annot[j].value = annot[j][this.highlightedRegionAnnotation];
                            if (annot[j].value == null || annot[j].value === undefined) {
                                annot[j].value = 0;
                            }
                        }
                        tracksArray.push('InDelSNP');
                        this.legendBooleans.annotChrBoolean = true;
                        //annot = this.heatmapToARC(annot, track.format);
                        modules.push(['ARC01', {
                                innerRadius: this.lastRadius - this.maxRadiusTrack1,
                                outerRadius: this.lastRadius - this.maxRadiusTrack1,
                            }, annot]);
                        modules.push(['BACKGROUND01', {
                                BginnerRadius: this.lastRadius - this.trackSize / 2,
                                BgouterRadius: this.lastRadius,
                                BgFillColor: '#b0c4de',
                                BgborderColor: '#000',
                                BgborderSize: 0
                            }]);
                        annotationOrdiff = '<br>';
                        this.lastRadius = this.lastRadius - this.trackSize - this.space;
                    }
                }
                for (var p = 0; p < data.tracks.length; p++) {
                    //in case of single group, links contains no data, maybe change later
                    if (data.tracks[p].format === "rearrangment" && data.tracks[p].data) {
                        //set the width of links to correctly represent the fragment length
                        //let totalLength = data.fasta.data.reduce((x, y) => x + y[1],0)
                        //for (let k=0; k<data.tracks[p].data.length; k++) {
                        //  data.tracks[p].data[k].width=Math.trunc(2*Math.PI*(data.tracks[p].data[k].g1end-data.tracks[p].data[k].g1start)/totalLength*this.lastRadius)
                        //}
                        modules.push(['LINK01', {
                                LINKMouseEvent: true,
                                LinkRadius: this.lastRadius,
                                LinkFillColor: '#F26223',
                                displayLinkAxis: false,
                                LinkAxisColor: '#B8B8B8',
                                LinkAxisWidth: 0.5,
                                LinkAxisPad: 3,
                                displayLinkLabel: false,
                                LINKMouseOverDisplay: true,
                                LINKMouseOverOpacity: 1,
                            }, this.filterLinks(data.tracks[p].data)]);
                        this.lastRadius = this.lastRadius - this.trackSize - this.space;
                        //only one links file is permitted
                        break;
                    }
                }
                this.circosControls.updateLegend(this.legendBooleans);
                // Setting the name
                if (data.fasta.data.length > 1 && data.fasta.name) {
                    this.TEXT01[1].text = data.fasta.name.split('.')[0];
                }
                else {
                    this.TEXT01[1].text = 'Chromosome ' + data.fasta.data[0][0];
                }
                this.TEXT01[1].x = -this.TEXT01[1].text.length * 3.8;
                this.TEXT01[1].textSize = 20 - modules.length;
                //  modules.push(this.TEXT01);
                this.BioCircos01 = new BioCircos(modules, data.fasta.data, {
                    // Main configuration
                    target: 'biocircos',
                    svgWidth: this.biocircos.nativeElement.clientWidth,
                    svgHeight: (this.biocircos.nativeElement.clientHeight - 10),
                    chrPad: 0.04,
                    zoom: true,
                    innerRadius: this.minRadiusTrack1,
                    outerRadius: this.maxRadiusTrack1,
                    genomeFillColor: data.fillColor,
                    LINKMouseEvent: true,
                    LINKMouseOverDisplay: true,
                    LINKMouseOverTooltipsHtml01: '',
                    LINKMouseOverTooltipsHtml02: '',
                    LINKMouseOverTooltipsPosition: 'absolute',
                    LINKMouseOverTooltipsBackgroundColor: 'white',
                    LINKMouseOverTooltipsBorderStyle: 'solid',
                    LINKMouseOverTooltipsBorderWidth: 0,
                    LINKMouseOverTooltipsPadding: '3px',
                    LINKMouseOverTooltipsBorderRadius: '3px',
                    LINKMouseOverTooltipsOpacity: 0.8,
                    LINKMouseOutDisplay: true,
                    LINKMouseOutStrokeColor: 'none',
                    LINKMouseOutStrokeWidth: 1,
                    // SNP tooltips
                    SNPMouseOverDisplay: true,
                    SNPMouseOverColor: 'red',
                    SNPMouseOverCircleSize: 5,
                    SNPMouseOverCircleOpacity: 1.0,
                    SNPMouseOverCircleStrokeColor: '#F26223',
                    SNPMouseOverCircleStrokeWidth: 3,
                    SNPMouseOverTooltipsHtml01: 'chr : ',
                    SNPMouseOverTooltipsHtml02: '<br>position : ',
                    SNPMouseOverTooltipsHtml03: '<br>quality : ',
                    SNPMouseOverTooltipsHtml04: '<br>rsid : ',
                    SNPMouseOverTooltipsHtml05: '<br>AF : ',
                    SNPMouseOverTooltipsBorderWidth: 1,
                    SNPMouseOutDisplay: true,
                    SNPMouseOutAnimationTime: 700,
                    SNPMouseOutColor: 'none',
                    SNPMouseOutCircleSize: 'none',
                    SNPMouseOutCircleOpacity: 1.0,
                    SNPMouseOutCircleStrokeWidth: 0,
                    ARCMouseOverTooltipsHtml05: annotationOrdiff,
                    // Histogramm toolt
                    ticks: {
                        'display': true,
                        'len': 5,
                        'rest': rest,
                        'color': '#000',
                        'textSize': 10,
                        'textColor': '#000',
                        'scale': this.tickLength,
                        'zoomStart': roundZoomStart,
                        'displayText': displayTickText
                    }
                });
                this.BioCircos01.draw_genome(this.BioCircos01.genomeLength); // BioCircos.js callback
                this.circosControls.zoomStart = 0;
                this.circosControls.chromosomeZoomed = '';
            }
            this.loadingService.isCharging = false;
        }
    };
    BiocircosComponent.prototype.convertLinksToARC = function (data, chromosomes) {
        var arcData1 = [];
        var arcData2 = [];
        var dataBinner = new _routes_binner__WEBPACK_IMPORTED_MODULE_9__["DataBinner"];
        var adjustedEnds = [];
        var genomeLength = dataBinner.calculateDisplayedGenomeLength(chromosomes.data);
        for (var i = 0; i < data.length; i++) {
            if (parseInt(data[i].g1end) > parseInt(data[i].g1start)) {
                adjustedEnds = dataBinner.adjustFragmentEnds(genomeLength, chromosomes.data, data[i].g1chr, data[i].g1start, data[i].g1end);
                dataBinner.mergeBins(arcData1, data[i].g1chr, adjustedEnds[0], adjustedEnds[1], data[i].color);
                //data[i].g1start=adjustedEnds[0];
                //data[i].g1end==adjustedEnds[1];
            }
            else {
                adjustedEnds = dataBinner.adjustFragmentEnds(genomeLength, chromosomes.data, data[i].g1chr, data[i].g1end, data[i].g1start);
                dataBinner.mergeBins(arcData1, data[i].g1chr, adjustedEnds[0], adjustedEnds[1], data[i].color);
                //data[i].g1start=adjustedEnds[0];
                //data[i].g1end==adjustedEnds[1];
            }
            if (parseInt(data[i].g2end) > parseInt(data[i].g2start)) {
                adjustedEnds = dataBinner.adjustFragmentEnds(genomeLength, chromosomes.data, data[i].g2chr, data[i].g2start, data[i].g2end);
                dataBinner.mergeBins(arcData2, data[i].g2chr, adjustedEnds[0], adjustedEnds[1], data[i].color);
                //data[i].g2start=adjustedEnds[0];
                //data[i].g2end==adjustedEnds[1];
            }
            else {
                adjustedEnds = dataBinner.adjustFragmentEnds(genomeLength, chromosomes.data, data[i].g2chr, data[i].g2end, data[i].g2start);
                dataBinner.mergeBins(arcData2, data[i].g2chr, adjustedEnds[0], adjustedEnds[1], data[i].color);
                //data[i].g2start=adjustedEnds[0];
                //data[i].g2end==adjustedEnds[1];
            }
            //arcData1.push({chr:data[i].g1chr, start:data[i].g1start, end:data[i].g1end, color:data[i].color});
            //arcData2.push({chr:data[i].g2chr, start:data[i].g2start, end:data[i].g2end, color:data[i].color});
        }
        return [arcData1, arcData2];
    };
    BiocircosComponent.prototype.displayChromosomeGroups = function (groups) {
        this.prepareGroupsForDisplay(groups);
    };
    BiocircosComponent.prototype.prepareGroupsForDisplay = function (groups) {
        var fastas = [];
        var tracksMerge = {};
        var singleGroupTracks = [];
        console.log(groups);
        var that = this;
        var fillColor = [];
        var chromosomesLength = {};
        //const colorPalette = ['#44B3C2', '#F1A94E', '#E45641', '#5D4C46', '#7B8D8E', '#F2EDD8'];
        var colorPalette = _environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].colorPalette;
        var fastaIDsGroupNames = [];
        //required to avoid adding links track twice
        var processedLinks = new Set();
        for (var i = 0; i < groups.length; i++) {
            var color = void 0;
            //groups[i].group.items[0] = JSON.parse(JSON.stringify(groups[i].group.items[0]));
            if (i < 6) {
                color = colorPalette[i];
            }
            else {
                color = 'rgb(' + Math.round(Math.random() * 255) + ',' +
                    Math.round(Math.random() * 255) + ',' + Math.round(Math.random() * 255) + ')';
            }
            //rename chromosomes in Fasta file to GroupName_ChromsomeName
            for (var k = 0; k < groups[i].items.length; k++) {
                if (groups[i].items[k].isFasta) {
                    fastaIDsGroupNames.push([groups[i].items[k].fileID, groups[i].name]);
                    var node = groups[i].items[k];
                    for (var j = 0; j < node.data.length; j++) {
                        chromosomesLength[node.data[j][0]] = node.data[j][1]; //creates dictionary of ChromosomeName ChromosomeLenght pairs
                        if (node.data[j][0].indexOf('_') === -1) {
                            node.data[j][0] = groups[i].name.concat('_').concat(node.data[j][0]);
                        }
                        groups[i].items[k].color = color;
                        fillColor.push(color);
                    }
                    if (i !== 0 && !groups[i].isReversed) {
                        fastas = fastas.concat(node.data.reverse());
                    }
                    else {
                        fastas = fastas.concat(node.data);
                    }
                }
            }
            var tracks = [];
            for (var _i = 0, _a = groups[i].items; _i < _a.length; _i++) {
                var nonFasta = _a[_i];
                if (!nonFasta.isFasta) {
                    tracks.push(nonFasta);
                }
            }
            for (var j = 0; j < tracks.length; j++) {
                var track = tracks[j];
                var doMerge = true;
                if (!track.isLink) {
                    this._InsertUnderscoreInTrackChromosomes(track, chromosomesLength, groups[i]);
                }
                else if (groups.length > 1 && !processedLinks.has(track.OldFasta.concat(track.NewFasta))) { //processed doesnt work
                    if (this._InsertUnderscoreInLinksChromosomes(track, chromosomesLength, groups[i], fastaIDsGroupNames)) {
                        processedLinks.add(track.OldFasta.concat(track.NewFasta));
                    }
                    else {
                        doMerge = false;
                    }
                }
                if (doMerge && groups.length > 1) {
                    //doMerge avoids additing the Links track in case there is only one group, may need to change in the future
                    if (!tracksMerge[track.format]) {
                        tracksMerge[track.format] = [];
                    }
                    tracksMerge[track.format] = tracksMerge[track.format].concat((track.isLink) ? track.getLinkData(undefined).data : track.data);
                    tracks[j] = track;
                }
                else if (groups.length === 1) {
                    singleGroupTracks.push({ format: track.format, data: track.data, file: track.fileID });
                }
            }
            //mark group data as reversed to avoid reversing already reversed
            groups[i].isReversed = groups[i].reverse;
        }
        var obj = { fasta: { data: fastas }, tracks: [] };
        if (groups.length === 1) {
            //the if clause is due to original code not permitting multiple same format tracks in case of multiple groups
            //because now groups are used automatically, this is a quick way of overcoming original design limitation
            for (var m = 0; m < singleGroupTracks.length; m++) {
                obj.tracks.push({ format: singleGroupTracks[m].format, data: singleGroupTracks[m].data, file: singleGroupTracks[m].file });
            }
        }
        else {
            for (var format in tracksMerge) {
                if (tracksMerge.hasOwnProperty(format)) {
                    obj.tracks.push({ format: format, data: tracksMerge[format] });
                }
            }
        }
        obj.fillColor = fillColor;
        that.submitDisplayCircos(obj, 'comparison');
    };
    BiocircosComponent.prototype._InsertUnderscoreInTrackChromosomes = function (track, chromosomesLength, group) {
        for (var k = 0; k < track.data.length; k++) {
            if (track.data[k].chr.indexOf('_') === -1) {
                if (group.reverse && !group.isReversed) {
                    if (track.data[k].pos != undefined) {
                        track.data[k].pos = chromosomesLength[track.data[k].chr] - track.data[k].pos;
                    }
                    else {
                        track.data[k].start = chromosomesLength[track.data[k].chr] - track.data[k].start;
                        track.data[k].end = chromosomesLength[track.data[k].chr] - track.data[k].end;
                    }
                }
                track.data[k].chr = group.name + '_' + track.data[k].chr;
            }
        }
    };
    BiocircosComponent.prototype._InsertUnderscoreInLinksChromosomes = function (track, chromosomesLength, group, fastaIDsGroupNames) {
        var oldFastaGroupName = "";
        var newFastaGroupName = "";
        for (var i = 0; i < fastaIDsGroupNames.length; i++) {
            if (fastaIDsGroupNames[i][0] === track.NewFasta) {
                newFastaGroupName = fastaIDsGroupNames[i][1];
            }
            else if (fastaIDsGroupNames[i][0] === track.OldFasta) {
                oldFastaGroupName = fastaIDsGroupNames[i][1];
            }
        }
        //this resolves the problem that when first group is processed, the name of the second group is not known. 
        //ideally, on would process links after fasta chromosomes have been renamed
        if (newFastaGroupName === "" || oldFastaGroupName == "") {
            return false;
        }
        var linkData = track.getLinkData(undefined).data;
        var isLinkDataReversed = track.getLinkData(undefined).isDataReversed;
        var useg1 = (group.name === oldFastaGroupName ? true : false);
        for (var k = 0; k < linkData.length; k++) {
            //reserses the order of values in the data. Hard to change given the structure of original code
            if (group.reverse && !isLinkDataReversed) {
                if (useg1) {
                    linkData[k].g1start = chromosomesLength[linkData[k]._g1chr] - linkData[k].g1start;
                    linkData[k].g1end = chromosomesLength[linkData[k]._g1chr] - linkData[k].g1end;
                }
                else {
                    linkData[k].g2start = chromosomesLength[linkData[k]._g2chr] - linkData[k].g2start;
                    linkData[k].g2end = chromosomesLength[linkData[k]._g2chr] - linkData[k].g2end;
                }
            }
            linkData[k].g1chr = oldFastaGroupName + "_" + linkData[k]._g1chr;
            linkData[k].g2chr = newFastaGroupName + "_" + linkData[k]._g2chr;
            linkData[k].group1Name = oldFastaGroupName;
            linkData[k].group2Name = newFastaGroupName;
        }
        if (group.reverse && !isLinkDataReversed) {
            track.getLinkData(undefined).isDataReversed = true;
        }
        return true;
    };
    BiocircosComponent.prototype.addGroup = function (name) {
        this.circosControls.addGroup(name);
    };
    BiocircosComponent.prototype.defineTicks = function (length) {
        var lengthTick = 10000000;
        while ((length / lengthTick) < 70 && (length / lengthTick)) {
            lengthTick = lengthTick / 10;
        }
        if ((length / lengthTick) > 100) {
            lengthTick = 10 * lengthTick;
        }
        this.tickLength = lengthTick;
    };
    BiocircosComponent.prototype.catchPickListEmittedBiocircos = function (e) {
        this.circosControls.catchPickListEmitted(e);
    };
    BiocircosComponent.prototype.deleteGroup = function (name) {
        this.circosControls.deleteGroup(name);
    };
    BiocircosComponent.prototype.editGroup = function (name) {
        this.circosControls.editGroup(name);
    };
    BiocircosComponent.prototype.changeOnlyHomoSNP = function (checked) {
        this.showHomoSNP = checked;
        if (this.dataDisplayed) {
            this.submitDisplayCircos(this.dataDisplayed, this.mode);
        }
    };
    BiocircosComponent.prototype.rgb = function (r, g, b) {
        return ['rgb(', r, ',', g, ',', b, ')'].join('');
    };
    BiocircosComponent.prototype.colorGradient = function (scale, startColor, endColor) {
        var min = Math.min;
        var max = Math.max;
        var round = Math.round;
        var r = startColor[0] + scale * (endColor[0] - startColor[0]);
        var b = startColor[2] + scale * (endColor[2] - startColor[2]);
        var g = startColor[1] + scale * (endColor[1] - startColor[1]);
        var t = [round(min(255, max(0, r))), round(min(255, max(0, g))), round(min(255, max(0, b)))];
        return t;
    };
    BiocircosComponent.prototype.onChangeDisplayMessage = function (event) {
        this.DisplayMessages = event;
    };
    BiocircosComponent.prototype.updateGroup1 = function (data) {
        this.filesNames = {};
        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
            var track = data_1[_i];
            this.filesNames[track.id] = track.name;
        }
        this.circosControls.updateGroup1(data);
    };
    BiocircosComponent.prototype.reorderTracks = function (event) {
        var order = event.order;
        var orderedTracks = [];
        var tracks = this.dataDisplayed.tracks;
        for (var i = 0; i < order.length; i++) {
            for (var j = 0; j < tracks.length; j++) {
                if (this.mode === 'single') {
                    if (order[i].id === tracks[j].file) {
                        orderedTracks.push(tracks[j]);
                    }
                }
                else {
                    if (order[i].format === tracks[j].format) {
                        orderedTracks.push(tracks[j]);
                    }
                }
            }
        }
        this.dataDisplayed.tracks = orderedTracks;
        this.submitDisplayCircos(this.dataDisplayed, event.mode);
    };
    BiocircosComponent.prototype.catchHighlightGenes = function (event) {
        this.highlightedRegionAnnotation = event;
        this.submitDisplayCircos(this.dataDisplayed, this.mode);
    };
    BiocircosComponent.prototype.showInstructionMessage = function (message) {
        this.msg = message;
    };
    BiocircosComponent.prototype.openCustomisationPanel = function () {
        this.openCustomisation.emit();
    };
    BiocircosComponent.prototype.displayFileLinks = function (data) {
        this.linksDisplayed = data.links;
        this.linksBoolean = true;
        if (this.dataDisplayed) {
            this.submitDisplayCircos(this.dataDisplayed, this.mode);
        }
        else {
            this.updateGroup1(data.fasta);
        }
    };
    BiocircosComponent.prototype.hideLinks = function () {
        this.linksDisplayed = null;
        if (this.dataDisplayed) {
            this.submitDisplayCircos(this.dataDisplayed, this.mode);
        }
    };
    BiocircosComponent.prototype.filterLinks = function (links) {
        var linksFiltered = [];
        var _loop_2 = function (link) {
            if (this_2.dataDisplayed.fasta.data.find(function (el) { return el[0] === link.g1chr; }) &&
                this_2.dataDisplayed.fasta.data.find(function (el) { return el[0] === link.g2chr; })) {
                linksFiltered.push(link);
            }
            else {
                console.log(link);
            }
        };
        var this_2 = this;
        for (var _i = 0, links_1 = links; _i < links_1.length; _i++) {
            var link = links_1[_i];
            _loop_2(link);
        }
        return linksFiltered;
    };
    BiocircosComponent.prototype.redraw = function () {
        if (this.dataDisplayed) {
            this.submitDisplayCircos(this.dataDisplayed, this.mode);
        }
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('biocircos'),
        __metadata("design:type", Object)
    ], BiocircosComponent.prototype, "biocircos", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('circosControls'),
        __metadata("design:type", Object)
    ], BiocircosComponent.prototype, "circosControls", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], BiocircosComponent.prototype, "onGroupListAdded", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], BiocircosComponent.prototype, "modeChanged", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], BiocircosComponent.prototype, "onCircosClick", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], BiocircosComponent.prototype, "openCustomisation", void 0);
    BiocircosComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-biocircos',
            template: __webpack_require__(/*! ./biocircos.component.html */ "./src/app/webcircos/biocircos/biocircos.component.html"),
            styles: [__webpack_require__(/*! ./biocircos.component.css */ "./src/app/webcircos/biocircos/biocircos.component.css")],
            providers: []
        }),
        __metadata("design:paramtypes", [_user_service__WEBPACK_IMPORTED_MODULE_2__["UserService"], _angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpClient"],
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"], _loading_service__WEBPACK_IMPORTED_MODULE_4__["LoadingService"], _display_settings_service__WEBPACK_IMPORTED_MODULE_5__["DisplaySettingsService"]])
    ], BiocircosComponent);
    return BiocircosComponent;
}());



/***/ }),

/***/ "./src/app/webcircos/circos-controls/circos-controls.component.css":
/*!*************************************************************************!*\
  !*** ./src/app/webcircos/circos-controls/circos-controls.component.css ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ":host{\n  overflow-y: scroll;\n  overflow-x: hidden;\n}\n\n#circosControlDiv{\n  /* padding-top: 30px; */\n}\n\n.ui-float-label{\n  display: inline-block;\n}\n\n:host >>> .ui-picklist-target-controls{\n  visibility: hidden;\n}\n\n:host >>> .ui-picklist-source-controls{\n  visibility: hidden;\n}\n\n.groupFile{\n  word-wrap: break-word;\n}\n\n.tracksContainer > div,\n.gu-mirror {\n  margin: 10px;\n  padding: 10px;\n  background-color: rgba(0, 0, 0, 0.2);\n  transition: opacity 0.4s ease-in-out;\n  cursor: grabbing;\n  cursor: -webkit-grabbing;\n}\n\n.tracksContainer > div {\n  cursor: move;\n  cursor: -webkit-grab;\n}\n\n.my-legend {\n  margin: auto;\n  width: 100%;\n  right:0;\n  word-break: break-all;\n  font-family: \"Roboto\", \"Trebuchet MS\", Arial, Helvetica, sans-serif;\n}\n\n.my-legend .legend-title {\n  text-align: center;\n  font-family: \"Roboto\", \"Trebuchet MS\", Arial, Helvetica, sans-serif;\n  margin-bottom: 5px;\n  font-weight: bold;\n  font-size: 90%;\n}\n\n.my-legend .legend-scale ul {\n  text-align: center;\n  font-family: \"Roboto\", \"Trebuchet MS\", Arial, Helvetica, sans-serif;\n  padding: 0;\n  list-style: none;\n}\n\n.my-legend .legend-scale ul li {\n  font-size: 80%;\n  font-family: \"Roboto\", \"Trebuchet MS\", Arial, Helvetica, sans-serif;\n  list-style: none;\n  margin-left: 0;\n  line-height: 18px;\n}\n\n.my-legend ul.legend-labels li span {\n  align: center;\n  display: block;\n  height: 16px;\n  width: 30px;\n  margin-right: auto;\n  margin-left: auto;\n  font-family: \"Roboto\", \"Trebuchet MS\", Arial, Helvetica, sans-serif;\n  border: 1px solid #999;\n}\n\nimg{\n  margin-left: 10px;\n}\n\nlegend {\n  display: block;\n  padding-left: 5px;\n  padding-right: 5px;\n  border: none;\n  font-family: \"Roboto\", \"Trebuchet MS\", Arial, Helvetica, sans-serif;\n  margin-left: 15px;\n}\n\n.my-legend .legend-source {\n  font-size: 70%;\n  color: #999;\n  font-family: \"Roboto\", \"Trebuchet MS\", Arial, Helvetica, sans-serif;\n  clear: both;\n}\n\n.my-legend a {\n  color: #777;\n}\n\n::ng-deep .ui-accordion .ui-accordion-header a {\n  background: #f6f7f9;\n}\n"

/***/ }),

/***/ "./src/app/webcircos/circos-controls/circos-controls.component.html":
/*!**************************************************************************!*\
  !*** ./src/app/webcircos/circos-controls/circos-controls.component.html ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div #circosControlDiv *ngIf=\"userService.selectedProject||!userService.getIsSignedIn()\" id=\"circosControlDiv\">\n    <p-panel header=\"Controls\">\n  <p-accordion [multiple]=\"true\">\n\n    <p-accordionTab header=\"Legend\" [selected]=\"true\">\n      <div *ngIf=\"legendBooleans.fastaChrBoolean\" class='my-legend'>\n        <fieldset>\n          <div class='legend-scale'>\n            <ul class='legend-labels'>\n              <div *ngIf=\"legendBooleans.annotChrBoolean\" class='annot'>\n                <li style='font-weight:bold'> Annotation Track </li>\n                <li>\n                  <div>Coding Region</div><span style='background:blue;'></span></li>\n                <li>\n                  <div>Non Coding Region</div><span style='background:orange;'></span></li>\n              </div>\n              <div *ngIf=\"showLinksLegend\" class='annot' style=\"margin-top: 10px\">\n                <li style='font-weight:bold'> Link </li>\n                <li>\n                  <div>Insertion</div><span style='background:#00ff00;'></span></li>\n                <li>\n                  <div>Deletion</div><span style='background:red;'></span></li>\n                  <li>\n                    <div>SNP</div><span style='background:blue;'></span>\n                  </li>\n              </div>\n              <div *ngIf=\"legendBooleans.diffChrBoolean\" class='diffExp'>\n                <li style='font-weight:bold'>Differential Expression Track </li>\n                <li>\n                  <div>Under expressed Regions</div><span style='background:red;'></span></li>\n                <li>\n                  <div>Over expressed Regions</div><span style='background:#00CD00;'></span> </li>\n                <li>\n                  <div>Equally expressed Regions</div><span style='background:yellow;'></span> </li>\n              </div>\n              <div *ngIf=\"legendBooleans.genomCovBoolean\" class='genomicCov'>\n                <li style='font-weight:bold'>Genomic Coverage Track (nucleotides/region) </li>\n                <li><img src=\"image/genomicCovLegend.png\" width=\"30\" height=\"16\" border=\"1\"></li>\n              </div>\n              <div *ngIf=\"legendBooleans.vcfChrBoolean\" class='vcf'>\n                <li style='font-weight:bold'>SNP Density Track (SNPs/region) [Heterzoygous/Homozygous]</li>\n                <li><img src=\"image/vcfLegend.png\" width=\"30\" height=\"16\" border=\"1\"><img src=\"image/vcfLegend2.png\" width=\"30\" height=\"16\" border=\"1\"></li>\n              </div>\n              <div *ngIf=\"legendBooleans.transcriptomicCov\" class='vcf'>\n                <li style='font-weight:bold'>Transcriptomic Coverage (nucleotides/region) </li>\n                <li><img src=\"image/transcriptomicCovLegend.png\" width=\"30\" height=\"16\" border=\"1\"></li>\n              </div>\n              <div *ngIf=\"legendBooleans.expressionBoolean\" class='vcf'>\n                <li style='font-weight:bold'>Transcriptomic Coverage (nucleotides/region) </li>\n                <li><img src=\"image/expressionLegend.png\" width=\"30\" height=\"16\" border=\"1\"></li>\n              </div>\n              <div *ngIf=\"legendBooleans.snpLinkBoolean\" class='vcf'>\n                <li style='font-weight:bold'>Regions with SNP density higher than {{snpTreshhold}}% [Heterzoygous/Homozygous]</li>\n                <li><img src=\"image/snpLinkLegend.png\" width=\"30\" height=\"16\" border=\"1\"> <img #imgs src=\"image/snpLinkLegend2.png\" width=\"30\" height=\"16\" border=\"1\"></li>\n              </div>\n              <div>\n                <li style='font-weight:bold'>Scale</li>\n                <li>1 tick = {{tickLength}} bp</li>\n              </div>\n            </ul>\n          </div>\n        </fieldset>\n      </div>\n\n    </p-accordionTab>\n\n\n    <p-accordionTab header=\"Groups selection\" [selected]=\"true\">\n        <div *ngFor=\"let group of groups\">\n          <p-checkbox name=\"group\" value=\"{{group.name}}\" label=\"{{group.name}}\" [(ngModel)]=\"selectedGroups\" [disabled]=\"group.items.length==0\" (onChange)=\"changeCheckBoxes(group, $event)\"></p-checkbox>\n        </div>\n      </p-accordionTab>\n\n\n      <p-accordionTab  *ngFor='let group of groups; let i = index;' header='{{group.name}}' [selected]=\"group.name=='Group 1'\" >\n\n        <div class='tracksContainer' [dragula]='group.name' [dragulaModel]=\"group.items\">\n          <div class='placeholder' style=\"background-color:transparent;\" *ngIf='!group.items.length'>Add items to me!</div>\n          <div *ngFor='let item of group.items' class=\"groupFile\">\n            {{item.name}}\n          </div>\n        </div>\n        <p-dropdown *ngIf=\"(group.items.length>0 && group.isChecked && group.isGenomeViewLoaded) || group.name=='Group 1'\" [options]=\"group.chromosomes\" [(ngModel)]=\"group.selectedChromosome\" optionLabel=\"id\" editable=\"false\" pTooltip=\"Select Chromosome\" (onChange)=\"selectChromosome(i)\"></p-dropdown>\n\n        <!-- <nouislider *ngIf=\"group.chromosomeSelected && group.selectedChromosome.id!='All' && group.isChecked\" #slider [min]=\"group.selectedChromosome.start\" [max]=\"group.selectedChromosome.end\" [step]=\"1\" [(ngModel)]=\"group.range\" [tooltips]=\"[ true, true ]\"\n          (end)=\"zoomIn(i)\" style=\"margin-top: 4em;\" [format]=\"sliderFormat\"></nouislider> -->\n\n      </p-accordionTab >\n\n\n  </p-accordion>\n  </p-panel>\n\n\n</div>\n\n\n\n<div #circosControlDiv2 id=\"circosControlDiv2\">\n  <p-sidebar [(visible)]=\"isNewGroupAdded\" position=\"bottom\" styleClass=\"ui-sidebar-md\" blockScroll=\"true\" [modal]=\"false\">\n    <p-pickList [source]=\"pickListSourceArray\" [target]=\"pickListTargetArray\" [responsive]=\"true\" sourceHeader=\"List of Uploaded Files\" targetHeader=\"Files in this Group\"\n     (onMoveToTarget)=\"onMoveToTarget($event)\" (onMoveAllToTarget)=\"onMoveToTarget($event)\"\n      (onMoveToSource)=\"onMoveToSource($event)\" (onMoveAllToSource)=\"onMoveToSource($event)\">\n      <ng-template let-file pTemplate=\"item\">\n        <div class=\"ui-helper-clearfix\">\n          <div style=\"font-size:14px;display:inline-block;margin:15px 5px 0 0\">{{file.format}}</div>\n          <div style=\"font-size:14px;float:right;margin:15px 5px 0 0\">{{file.name}}</div>\n        </div>\n      </ng-template>\n    </p-pickList>\n\n\n    <button pButton type=\"button\" (click)=\"isNewGroupAdded = false\" label=\"Save\" class=\"ui-button-success\"></button>\n    <button pButton type=\"button\" (click)=\"isNewGroupAdded = false\" label=\"Cancel\" class=\"ui-button-secondary\"></button>\n  </p-sidebar>\n\n</div>\n"

/***/ }),

/***/ "./src/app/webcircos/circos-controls/circos-controls.component.ts":
/*!************************************************************************!*\
  !*** ./src/app/webcircos/circos-controls/circos-controls.component.ts ***!
  \************************************************************************/
/*! exports provided: CircosControlsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CircosControlsComponent", function() { return CircosControlsComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var ng2_dragula_ng2_dragula__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ng2-dragula/ng2-dragula */ "./node_modules/ng2-dragula/ng2-dragula.js");
/* harmony import */ var ng2_dragula_ng2_dragula__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(ng2_dragula_ng2_dragula__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../environments/environment */ "./src/environments/environment.ts");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm5/http.js");
/* harmony import */ var _loading_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../loading.service */ "./src/app/loading.service.ts");
/* harmony import */ var _user_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../user.service */ "./src/app/user.service.ts");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm5/ngx-toastr.js");
/* harmony import */ var _display_settings_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../display-settings.service */ "./src/app/display-settings.service.ts");
/* harmony import */ var _biocircos_biocircos_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../biocircos/biocircos.component */ "./src/app/webcircos/biocircos/biocircos.component.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};









// Chromosome object for the zoom
// class Chromosome {
//   id: any;
//   length: any;
//   start: any;
//   end: any;
// }
// interface PickListItems {
//   fasta: string;
//   annotation: string;
//   vcf: string;
//   geneExpression: string;
//   transcriptomicCov: string;
//   genomicCov: string;
// }
var CircosControlsComponent = /** @class */ (function () {
    function CircosControlsComponent(dragula, userService, http, loadingService, toastr, displaySettingsService) {
        this.dragula = dragula;
        this.userService = userService;
        this.http = http;
        this.loadingService = loadingService;
        this.toastr = toastr;
        this.displaySettingsService = displaySettingsService;
        this.groupNames = [];
        this.zoomStart = 0;
        this.chromosomeZoomed = '';
        this.groups = [];
        this.isNewGroupAdded = false;
        this.pickListTargetArray = [];
        this.pickListSourceArray = [];
        this.pickListMasterSourceArray = [];
        this.showLinksLegend = false;
        this.transferingGroup = null;
        this.order = [{ format: 'annotation' }, { format: 'DE' }, { format: 'vcf' },
            { format: 'genomicCov' }, { format: 'transcriptomicCov' }, { format: 'expression' }];
        this.sliderFormat = {
            to: function (value) {
                return Math.round(value / 1000) + 'k';
            },
            from: function (value) {
                if (value.includes('k')) { // if we zoom from the slider
                    return parseInt(value.replace('k', '')) * 1000;
                }
                return parseInt(value); // if we zoom from the circos
            }
        };
        this.legendBooleans = {};
        this.onChromosomeSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"](); // emited when the user clicks on the button to select an element in the chromosome dropdown
        // @Output()
        // onRangeSelected = new EventEmitter<number[]>(); // emited when the user clicks on the button to select a region on the chromosome throught the slider
        this.onGroupAdded = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.onReorder = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.onReorderedChromosomeSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.onReorderedChrBoolean = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.onDisplayGroups = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.onShowAnnotationLink = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.onDisplayGroup1 = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.ClearMessage = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.CreateMessage = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
    }
    CircosControlsComponent.prototype.ngOnInit = function () {
    };
    CircosControlsComponent.prototype.removeGroup = function (event, name) {
        if (event.originalEvent.fromState !== 'void') {
            for (var i = this.groups.length - 1; i >= 0; i--) {
                if (this.groups[i].name === name) {
                    this.groups.splice(i, 1);
                    this.updateGroupNames();
                }
            }
        }
    };
    CircosControlsComponent.prototype.addGroup = function (name) {
    };
    CircosControlsComponent.prototype.getGroupBins = function (fastaFileNode, group) {
        var url = _environments_environment__WEBPACK_IMPORTED_MODULE_2__["environment"].host + 'getBins?files=' + JSON.stringify(fastaFileNode.selectedIDs);
        this.http.get(url).subscribe(function (data) {
            var tracks = data.tracks;
            var orderedTracks = [];
            for (var i = 0; i < group.items.length; i++) {
                for (var j = 0; j < tracks.length; j++) {
                    if (group.items[i].id === tracks[j].file) {
                        orderedTracks.push(tracks[j]);
                    }
                }
            }
            data.tracks = orderedTracks;
            //this.onDisplayGroup1.emit(data);app
        });
    };
    CircosControlsComponent.prototype.updateGroup1 = function (items) {
        this.groups = [];
        this.groupNames = [];
        this.selectedGroups = [];
        var counter = 2;
        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
            var item = items_1[_i];
            if (item.isFasta && item.isSelected) {
                var newGroup = new _biocircos_biocircos_component__WEBPACK_IMPORTED_MODULE_8__["CircosGroup"];
                this.getChromosomes(newGroup, item.fileID);
                //newGroup.items=item.selectedItems;
                newGroup.items = item.selectedItems.concat([item]);
                //newGroup.items.push(item);
                newGroup.name = "Group ".concat(counter.toString());
                newGroup.isChecked = true;
                newGroup.range = [0, 100];
                this.groups.push(newGroup);
                this.groupNames.push(newGroup.name);
                this.selectedGroups.push(newGroup.name);
                this.getGroupBins(item, newGroup);
                counter++;
                //break;
            }
        }
        this.displaySettingsService.groupsChecked = this.selectedGroups;
        this.getGroupsData();
    };
    CircosControlsComponent.prototype.updateGroupNames = function () {
        this.groupNames = [];
        for (var i in this.groups) {
            this.groupNames.push(this.groups[i].name);
        }
        this.onGroupAdded.emit(this.groupNames);
    };
    CircosControlsComponent.prototype.overwriteMerge = function (destinationArray, sourceArray, options) {
        return sourceArray;
    };
    CircosControlsComponent.prototype.setFileList = function (data) {
        for (var i = 0; i < this.groups.length; i++) {
            if (this.groups[i].name === data[0].name) {
                this.groups[i].items = this.groups[i].items.concat(data[0].items);
                break;
            }
        }
    };
    CircosControlsComponent.prototype.catchPickListEmitted = function (e) {
        this.pickListSourceArray = e;
        this.pickListMasterSourceArray = JSON.parse(JSON.stringify(this.pickListSourceArray));
    };
    CircosControlsComponent.prototype.callPickList = function () {
        this.isNewGroupAdded = true;
        this.pickListSourceArray = this.pickListMasterSourceArray.filter(function (el) { return el.format == 'fasta'; }); // the user must first choose a fasta file for the group
    };
    CircosControlsComponent.prototype.deleteGroup = function (name) {
        for (var i = 0; i < this.groups.length; i++) {
            if (this.groups[i].name === name) {
                this.groups.splice(i, 1);
                this.updateGroupNames();
                break;
            }
        }
    };
    CircosControlsComponent.prototype.editGroup = function (name) {
        for (var i = 0; i < this.groups.length; i++) {
            if (this.groups[i].name === name) {
                this.pickListTargetArray = this.groups[i].items;
                this.callPickList();
                break;
            }
        }
    };
    CircosControlsComponent.prototype.onOut = function (groupName) {
        var items;
        var group;
        for (var i = 0; i < this.groups.length; i++) {
            if (this.groups[i].name === groupName) {
                items = this.groups[i].items;
                group = this.groups[i];
                break;
            }
        }
        if (items[0].format !== 'fasta') {
            var itemToMove = items[0];
            items.splice(0, 1);
            var orderIndex = // find where to put the other file that will be replaced by the fasta
             void 0; // find where to put the other file that will be replaced by the fasta
            for (var i = 0; i < this.order.length; i++) {
                if (this.order[i].format === this.getFormatCategory(itemToMove.format)) {
                    orderIndex = i;
                    break;
                }
            }
            var otherOrderIndex = void 0;
            var found = false;
            for (var i = 1; i < items.length; i++) {
                if (found) {
                    break;
                }
                for (var j = 0; j < this.order.length; j++) {
                    if (this.order[j].format === this.getFormatCategory(items[i].format)) {
                        if (j > orderIndex) {
                            otherOrderIndex = i;
                            items.splice(i, 0, itemToMove);
                            found = true;
                            break;
                        }
                    }
                }
            }
            if (!found) {
                items.push(itemToMove);
            }
            group.items = JSON.parse(JSON.stringify(items));
        }
        else {
            var newOrder = []; // get the new track order
            for (var i = 1; i < items.length; i++) {
                newOrder.push({ format: items[i].format, id: items[i].id });
            }
            var found = false;
            for (var i = 0; i < this.order.length; i++) {
                found = false;
                for (var j = 0; j < newOrder.length; j++) {
                    if (this.order[i].format === newOrder[j].format) {
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    newOrder.push(this.order[i]);
                }
            }
            this.order = newOrder;
            if (groupName === 'Group 1' && this.selectedGroups.length === 1) {
                this.onReorder.emit({ order: this.order, mode: 'single' });
            }
            else {
                this.onReorder.emit({ order: this.order, mode: 'comparison' });
            }
            var groupsSelected = [];
            for (var i = 0; i < this.selectedGroups.length; i++) {
                for (var j = 0; j < this.groups.length; j++) {
                    if (this.groups[j].name === this.selectedGroups[i] && this.groups[j].name !== groupName) {
                        groupsSelected.push(this.groups[j]);
                        break;
                    }
                }
            }
            var group_1, tmp = void 0;
            for (var i = 0; i < groupsSelected.length; i++) {
                group_1 = groupsSelected[i];
                for (var j = 1; j < items.length; j++) {
                    for (var k = 1; k < group_1.items.length; k++) {
                        if (items[j].format === group_1.items[k].format) {
                            tmp = group_1.items[j];
                            group_1.items[j] = group_1.items[k];
                            group_1.items[k] = tmp;
                            break;
                        }
                    }
                }
            }
        }
    };
    CircosControlsComponent.prototype.clear = function () {
    };
    CircosControlsComponent.prototype.getGroupsData = function () {
        this.ClearMessage.emit();
        this.CreateMessage.emit(['Select a chromosome for a zoomed view', 'Select Customization Panel to display more information']);
        this.groups.forEach(function (group) {
            group.chromosomeSelected = false;
            group.selectedChromosome = null;
        });
        if (this.selectedGroups.length === 1 && this.selectedGroups[0] === 'Group 1') {
            //obsolete
            this.updateGroup1(this.groups[0].items);
        }
        else {
            if (this.chechGroup1Okay()) {
                this.loadingService.isCharging = true;
                var groupsToSend = [];
                for (var i = 0; i < this.selectedGroups.length; i++) {
                    for (var j = 0; j < this.groups.length; j++) {
                        if (this.selectedGroups[i] == this.groups[j].name) {
                            this.groups[j].loaded = false;
                            if (i < this.selectedGroups.length / 2) {
                                this.groups[j].reverse = false;
                            }
                            else {
                                this.groups[j].reverse = true;
                            }
                            groupsToSend.push(this.groups[j]);
                            this.getGroupData(this.groups[j], groupsToSend);
                        }
                    }
                }
            }
            else {
                this.toastr.error('Error Message', 'Group 1 cannot have more than 2 files of the same type while comparing it to another group', { positionClass: 'toast-bottom-right' });
            }
        }
    };
    CircosControlsComponent.prototype.chechGroup1Okay = function () {
        for (var i = 0; i < this.selectedGroups.length; i++) {
            if (this.selectedGroups[i] == 'Group 1') {
                var items = this.groups[0].items;
                var nbVcf = 0, nbAnnot = 0, nbDE = 0, nbGenomicCovFiles = 0, nbTranscriptomicCovFiles = 0, nbExpressionFiles = 0;
                for (var j = 0; j < items.length; j++) {
                    switch (items[j].format) {
                        case 'vcf':
                            if (++nbVcf === 2) {
                                return false;
                            }
                            break;
                        case 'annotation':
                            if (++nbAnnot === 2) {
                                return false;
                            }
                            break;
                        case 'diffExp':
                            if (++nbDE === 2) {
                                return false;
                            }
                            break;
                        case 'de':
                            if (++nbDE === 2) {
                                return false;
                            }
                            break;
                        case 'bam':
                            if (++nbGenomicCovFiles === 2) {
                                return false;
                            }
                            break;
                        case 'bai':
                            if (++nbGenomicCovFiles === 2) {
                                return false;
                            }
                            break;
                        case 'bedcov':
                            if (++nbTranscriptomicCovFiles === 2) {
                                return false;
                            }
                            if (++nbExpressionFiles === 2) {
                            }
                            break;
                    }
                }
            }
        }
        return true;
    };
    CircosControlsComponent.prototype.getGroupData = function (group, groupsToSend) {
        var _this = this;
        var files = [];
        for (var i = 0; i < group.items.length; i++) {
            files.push(group.items[i].id);
        }
        //const that = this;
        group.isGenomeViewLoaded = true;
        var url = _environments_environment__WEBPACK_IMPORTED_MODULE_2__["environment"].host + 'getBins?files=' + JSON.stringify(files);
        this.http.get(url).subscribe(function (data) {
            var chromosomes = [{ id: 'All', length: null, start: 0, end: 100 }];
            for (var i = 0; i < data.fasta.data.length; i++) {
                chromosomes.push({ id: data.fasta.data[i][0], length: data.fasta.data[i][1], start: 0, end: data.fasta.data[i][1] - 1 });
            }
            var arr = [data.fasta];
            arr = arr.concat(data.tracks);
            for (var i = 0; i < group.items.length; i++) {
                for (var j = 0; j < arr.length; j++) {
                    if (arr[j]._id === group.items[i].id || arr[j].file === group.items[i].id) {
                        group.items[i].data = arr[j].data;
                        group.items[i].dataUnscaled = arr[j].data;
                        group.chromosomes = chromosomes;
                        break;
                    }
                }
            }
            for (var i = 0; i < groupsToSend.length; i++) {
                if (groupsToSend[i].name === group.name) {
                    groupsToSend[i].loaded = true;
                    var canSend = true;
                    for (var j = 0; j < groupsToSend.length; j++) {
                        if (!groupsToSend[j].loaded) {
                            canSend = false;
                            break;
                        }
                    }
                    if (canSend) {
                        _this.onDisplayGroups.emit(groupsToSend);
                    }
                    break;
                }
            }
        }, function (error) {
            console.log(error);
        });
    };
    CircosControlsComponent.prototype.selectChromosome = function (groupIndex, obj) {
        var _this = this;
        this.loadingService.isCharging = true;
        if (this.selectedGroups.length > 1 && !this.groups.find(function (group) { return group.chromosomeSelected === false; })) {
            var group_2;
            for (var i = 0; i < this.groups.length; i++) {
                if (i !== groupIndex) {
                    group_2 = this.groups[i];
                    for (var _i = 0, _a = group_2.items; _i < _a.length; _i++) {
                        var item = _a[_i];
                        item.data = item.dataUnscaled;
                    }
                }
            }
        }
        var files = [];
        var group = this.groups[groupIndex];
        for (var i = 0; i < group.items.length; i++) {
            files.push(group.items[i].id);
        }
        var url;
        if (group.selectedChromosome.id !== 'All') {
            url = _environments_environment__WEBPACK_IMPORTED_MODULE_2__["environment"].host + 'getBins?files=' + JSON.stringify(files) + '&chr=' + group.selectedChromosome.id;
        }
        else {
            url = _environments_environment__WEBPACK_IMPORTED_MODULE_2__["environment"].host + 'getBins?files=' + JSON.stringify(files);
        }
        this.http.get(url).subscribe(function (data) {
            if (group.selectedChromosome.id !== 'All') {
                data.fasta.data = [[group.selectedChromosome.id, group.selectedChromosome.length]];
                group.chromosomeSelected = true;
                group.end = group.selectedChromosome.end - 1;
                group.range[1] = group.selectedChromosome.end - 1;
                group.start = 0;
                group.range[0] = 0;
                group.range = JSON.parse(JSON.stringify(group.range));
            }
            else {
                group.chromosomeSelected = false;
            }
            var arr = [data.fasta];
            arr = arr.concat(data.tracks);
            for (var i = 0; i < group.items.length; i++) {
                for (var j = 0; j < arr.length; j++) {
                    if (arr[j]._id === group.items[i].id || arr[j].file === group.items[i].id) {
                        group.items[i].data = arr[j].data;
                        group.items[i].dataUnscaled = arr[j].data;
                        break;
                    }
                }
            }
            if (_this.selectedGroups.length > 1 && group.selectedChromosome.id !== 'All') {
                _this.rescaleBins(groupIndex);
            }
            if (group.selectedChromosome.id === 'All') {
                for (var i = 0; i < _this.groups.length; i++) {
                    if (i !== groupIndex && _this.groups[i].selectedChromosome.id !== 'All') {
                        _this.rescaleBins(i);
                    }
                }
            }
            if (group.name === 'Group 1' && _this.selectedGroups.length === 1) {
                _this.onDisplayGroup1.emit(data);
            }
            else {
                var groupsToSend = [];
                for (var i = 0; i < _this.selectedGroups.length; i++) {
                    for (var j = 0; j < _this.groups.length; j++) {
                        if (_this.selectedGroups[i] === _this.groups[j].name) {
                            _this.groups[j].loaded = true;
                            if (i < _this.selectedGroups.length / 2) {
                                _this.groups[j].reverse = false;
                            }
                            else {
                                _this.groups[j].reverse = true;
                            }
                            groupsToSend.push(_this.groups[j]);
                        }
                    }
                }
                _this.onDisplayGroups.emit(groupsToSend);
            }
        }, function (error) {
        });
    };
    CircosControlsComponent.prototype.rescaleBins = function (groupIndex) {
        var binSize;
        var group = this.groups[groupIndex];
        //for (let i = 0; i < this.groups.length; i++) {
        //if (i !== groupIndex) {
        for (var _i = 0, _a = this.groups[groupIndex].items; _i < _a.length; _i++) {
            var fileNode = _a[_i];
            if (!fileNode.isFasta && fileNode.data.length > 0) {
                var bins = fileNode.data[0];
                binSize = Math.abs(bins.end - bins.start);
                break;
            }
        }
        //}
        //}
        var scaledBins;
        for (var i = 0; i < group.items.length; i++) {
            if (!group.items[i].isFasta && !group.items[i].isLink) {
                var item = group.items[i];
                scaledBins = [];
                var prototype = void 0;
                for (var i_1 = 0; i_1 < Math.round(group.selectedChromosome.length / binSize); i_1++) {
                    prototype = JSON.parse(JSON.stringify(item.data[0]));
                    for (var property in prototype) {
                        if (prototype.hasOwnProperty(property)) {
                            if (property != "start" && property != "end" && property != "chr" && property != "name") {
                                prototype[property] = 0;
                            }
                        }
                    }
                    prototype.start = i_1 * binSize;
                    prototype.end = (i_1 + 1) * binSize;
                    scaledBins.push(prototype);
                }
                var scaledBin = void 0;
                if (item.format != "InDelSNP") {
                    for (var _b = 0, _c = item.dataUnscaled; _b < _c.length; _b++) {
                        var bin = _c[_b];
                        scaledBin = scaledBins[Math.floor(bin.start / binSize)];
                        for (var property in scaledBin) {
                            if (scaledBin.hasOwnProperty(property)) {
                                if (property !== 'start' && property !== 'end' && property !== 'chr' && property !== 'name') {
                                    scaledBin[property] += bin[property];
                                }
                            }
                        }
                    }
                    item.data = scaledBins;
                }
                else {
                    var newData = [];
                    var alreadyGrouped = false;
                    for (var _d = 0, _e = item.data; _d < _e.length; _d++) {
                        var dataPoint = _e[_d];
                        if (!alreadyGrouped && item.data[0].chr.indexOf("_") != -1) {
                            alreadyGrouped = true;
                        }
                        if (alreadyGrouped) {
                            dataPoint.chr = dataPoint.chr.split("_")[1];
                        }
                        if (group.selectedChromosome.id === dataPoint.chr) {
                            newData.push({ start: dataPoint.start, end: dataPoint.end,
                                chr: dataPoint.chr, des: dataPoint.des, color: dataPoint.color });
                        }
                    }
                    item.data = newData;
                }
            }
        }
    };
    // zoomIn(groupIndex: number, start: number, end: number) {
    //   this.loadingService.isCharging = true;
    //   //if (obj) {  // obj comes from OnMouseUp() in biocircos so is only set for a clicked chromosome
    //     this.groups[groupIndex].range[0]= start// = obj;
    //     this.groups[groupIndex].range[1]= end
    //   //}
    //   let files = [];
    //   let group = this.groups[groupIndex];
    //   let fasta;
    //   for (let i = 0; i < group.items.length; i++) {
    //     if (group.items[i].format !== 'fasta') {
    //       files.push(group.items[i].id);
    //     } else {
    //       fasta = group.items[i];
    //     }
    //   }
    //   const chrData = {
    //     chr: this.groups[groupIndex].selectedChromosome.id, start: this.groups[groupIndex].range[0],
    //     end: this.groups[groupIndex].range[1]
    //   };
    //   this.chromosomeZoomed = chrData.chr;
    //   this.zoomStart = chrData.start;
    //   let isComparison = false;
    //   if (this.selectedGroups.length > 1) {
    //     isComparison = true;
    //   }
    //   const url = environment.host + 'getProjectData?files=' + JSON.stringify(files) +
    //     '&chrData=' + JSON.stringify(chrData) + '&isComparison=' + isComparison;
    //   this.http.get(url).subscribe((data: any) => {
    //     fasta.data = [[this.groups[groupIndex].selectedChromosome.id, this.groups[groupIndex].range[1] - this.groups[groupIndex].range[0]]];
    //     let arr = [fasta];
    //     for (const file in data) {
    //       if (data.hasOwnProperty(file)) {
    //         arr.push(data[file]);
    //       }
    //     }
    //     for (let i = 0; i < group.items.length; i++) {
    //       for (let j = 0; j < arr.length; j++) {
    //         if (arr[j]._id === group.items[i].id || arr[j].file === group.items[i].id) {
    //           group.items[i].data = arr[j].data;
    //           break;
    //         }
    //       }
    //     }
    //     if (group.name === 'Group 1' && this.selectedGroups.length === 1) {
    //       const tracks = [];
    //       for (let file in data) {
    //         if (data.hasOwnProperty(file)) {
    //           tracks.push(data[file]);
    //         }
    //       }
    //       this.onDisplayGroup1.emit({ fasta: fasta, tracks: tracks, start: this.groups[groupIndex].range[0] })
    //     } else {
    //       let groupsToSend: Array<CircosGroup> = [];
    //       for (let i = 0; i < this.selectedGroups.length; i++) {
    //         for (let j = 0; j < this.groups.length; j++) {
    //           if (this.selectedGroups[i] === this.groups[j].name) {
    //             this.groups[j].loaded=true;
    //             if (i < this.selectedGroups.length / 2) {
    //               this.groups[j].reverse= false;
    //             } else {
    //               this.groups[j].reverse= true;
    //             }
    //             groupsToSend.push(this.groups[j])
    //           }
    //         }
    //       }
    //       this.onDisplayGroups.emit(groupsToSend);
    //     }
    //   },
    //     error => {
    //     })
    // }
    // zoomIn(groupIndex: number, start: number, end: number) {
    //   this.loadingService.isCharging = true;
    //   //if (obj) {  // obj comes from OnMouseUp() in biocircos so is only set for a clicked chromosome
    //     this.groups[groupIndex].range[0]= start// = obj;
    //     this.groups[groupIndex].range[1]= end
    //   //}
    //   let files = [];
    //   let group = this.groups[groupIndex];
    //   let fasta;
    //   for (let i = 0; i < group.items.length; i++) {
    //     if (group.items[i].format !== 'fasta') {
    //       files.push(group.items[i].id);
    //     } else {
    //       fasta = group.items[i];
    //     }
    //   }
    //   const chrData = {
    //     chr: this.groups[groupIndex].selectedChromosome.id, start: this.groups[groupIndex].range[0],
    //     end: this.groups[groupIndex].range[1]
    //   };
    //   this.chromosomeZoomed = chrData.chr;
    //   this.zoomStart = chrData.start;
    //   let isComparison = false;
    //   if (this.selectedGroups.length > 1) {
    //     isComparison = true;
    //   }
    //   const url = environment.host + 'getProjectData?files=' + JSON.stringify(files) +
    //     '&chrData=' + JSON.stringify(chrData) + '&isComparison=' + isComparison;
    //   this.http.get(url).subscribe((data: any) => {
    //     fasta.data = [[this.groups[groupIndex].selectedChromosome.id, this.groups[groupIndex].range[1] - this.groups[groupIndex].range[0]]];
    //     let arr = [fasta];
    //     for (const file in data) {
    //       if (data.hasOwnProperty(file)) {
    //         arr.push(data[file]);
    //       }
    //     }
    //     for (let i = 0; i < group.items.length; i++) {
    //       for (let j = 0; j < arr.length; j++) {
    //         if (arr[j]._id === group.items[i].id || arr[j].file === group.items[i].id) {
    //           group.items[i].data = arr[j].data;
    //           break;
    //         }
    //       }
    //     }
    //     if (group.name === 'Group 1' && this.selectedGroups.length === 1) {
    //       const tracks = [];
    //       for (let file in data) {
    //         if (data.hasOwnProperty(file)) {
    //           tracks.push(data[file]);
    //         }
    //       }
    //       this.onDisplayGroup1.emit({ fasta: fasta, tracks: tracks, start: this.groups[groupIndex].range[0] })
    //     } else {
    //       let groupsToSend: Array<CircosGroup> = [];
    //       for (let i = 0; i < this.selectedGroups.length; i++) {
    //         for (let j = 0; j < this.groups.length; j++) {
    //           if (this.selectedGroups[i] === this.groups[j].name) {
    //             this.groups[j].loaded=true;
    //             if (i < this.selectedGroups.length / 2) {
    //               this.groups[j].reverse= false;
    //             } else {
    //               this.groups[j].reverse= true;
    //             }
    //             groupsToSend.push(this.groups[j])
    //           }
    //         }
    //       }
    //       this.onDisplayGroups.emit(groupsToSend);
    //     }
    //   },
    //     error => {
    //     })
    // }
    CircosControlsComponent.prototype.zoomIn = function (groupIndex, obj) {
        var _this = this;
        this.loadingService.isCharging = true;
        if (obj) { // obj comes from OnMouseUp() in biocircos so is only set for a clicked chromosome
            this.groups[groupIndex] = obj;
        }
        var files = [];
        var group = this.groups[groupIndex];
        var fasta;
        for (var i = 0; i < group.items.length; i++) {
            if (group.items[i].format !== 'fasta') {
                files.push(group.items[i].id);
            }
            else {
                fasta = group.items[i];
            }
        }
        var chrData = {
            chr: this.groups[groupIndex].selectedChromosome.id, start: this.groups[groupIndex].range[0],
            end: this.groups[groupIndex].range[1]
        };
        this.chromosomeZoomed = chrData.chr;
        this.zoomStart = chrData.start;
        var isComparison = false;
        if (this.selectedGroups.length > 1) {
            isComparison = true;
        }
        var url = _environments_environment__WEBPACK_IMPORTED_MODULE_2__["environment"].host + 'getProjectData?files=' + JSON.stringify(files) +
            '&chrData=' + JSON.stringify(chrData) + '&isComparison=' + isComparison;
        this.http.get(url).subscribe(function (data) {
            fasta.data = [[_this.groups[groupIndex].selectedChromosome.id, _this.groups[groupIndex].range[1] - _this.groups[groupIndex].range[0]]];
            var arr = [fasta];
            for (var file in data) {
                if (data.hasOwnProperty(file)) {
                    arr.push(data[file]);
                }
            }
            for (var i = 0; i < group.items.length; i++) {
                for (var j = 0; j < arr.length; j++) {
                    if (arr[j]._id === group.items[i].id || arr[j].file === group.items[i].id) {
                        group.items[i].data = arr[j].data;
                        break;
                    }
                }
            }
            if (group.name === 'Group 1' && _this.selectedGroups.length === 1) {
                var tracks = [];
                for (var file in data) {
                    if (data.hasOwnProperty(file)) {
                        tracks.push(data[file]);
                    }
                }
                _this.onDisplayGroup1.emit({ fasta: fasta, tracks: tracks, start: _this.groups[groupIndex].range[0] });
            }
            else {
                var groupsToSend = [];
                for (var i = 0; i < _this.selectedGroups.length; i++) {
                    for (var j = 0; j < _this.groups.length; j++) {
                        if (_this.selectedGroups[i] === _this.groups[j].name) {
                            if (i < _this.selectedGroups.length / 2) {
                                _this.groups[j].loaded = true;
                                _this.groups[j].reverse = false;
                                groupsToSend.push(_this.groups[j]);
                                //groupsToSend.push({ group: this.groups[j], loaded: true, reverse: false });
                            }
                            else {
                                _this.groups[j].loaded = true;
                                _this.groups[j].reverse = true;
                                groupsToSend.push(_this.groups[j]);
                                //groupsToSend.push({ group: this.groups[j], loaded: true, reverse: true });
                            }
                        }
                    }
                }
                _this.onDisplayGroups.emit(groupsToSend);
            }
        }, function (error) {
        });
    };
    CircosControlsComponent.prototype.getChromosomes = function (group, fasta) {
        var url = _environments_environment__WEBPACK_IMPORTED_MODULE_2__["environment"].host + 'getChromosomes?id=' + fasta;
        this.http.get(url).subscribe(function (data) {
            data = data.data;
            var chrs = [];
            for (var i = 0; i < data.length; i++) {
                chrs.push({ id: data[i][0], length: data[i][1], start: 0, end: data[i][1] - 1 });
            }
            group.chromosomes = chrs;
        }, function (error) {
        });
    };
    CircosControlsComponent.prototype.onMoveToTarget = function (event) {
        var fastaFound = false;
        if (event.items[0].format === 'fasta') {
            this.pickListSourceArray = this.pickListMasterSourceArray.filter(function (el) { return el.format != 'fasta'; });
            this.getChromosomes(this.transferingGroup, event.items[0].id);
        }
        else {
            var lastInsertedFormat = this.pickListTargetArray[this.pickListTargetArray.length - 1].format;
            var file = void 0;
            for (var i = this.pickListSourceArray.length - 1; i >= 0; i--) {
                file = this.pickListSourceArray[i];
                if (file.format === lastInsertedFormat) {
                    this.pickListSourceArray.splice(i, 1);
                }
            }
            var newItems = event.items;
            for (var i = 0; i < newItems.length; i++) {
                if (newItems[i].format === 'fasta') {
                    this.getChromosomes(this.transferingGroup, newItems[i].id);
                }
                else {
                    var orderIndex = void 0;
                    var offset = void 0;
                    for (var j = 0; j < this.order.length; j++) {
                        if (newItems[i].format === this.order[j].format) {
                            orderIndex = j;
                            break;
                        }
                    }
                    var inserted = false;
                    for (var j = 0; j < this.pickListTargetArray.length; j++) {
                        if (this.pickListTargetArray[j].id === newItems[i].id || inserted) {
                            break;
                        }
                        else {
                            for (var k = 0; k < this.order.length; k++) {
                                if (this.order[k].format === this.pickListTargetArray[j].format) {
                                    if (k > orderIndex) {
                                        this.pickListTargetArray.splice(this.pickListTargetArray.indexOf(newItems[i]), 1);
                                        this.pickListTargetArray.splice(j, 0, newItems[i]);
                                        inserted = true;
                                    }
                                    break;
                                }
                            }
                        }
                    }
                }
            }
            /*for (let i = 0; i < this.pickListTargetArray.length; i++) {
      
              if (this.pickListTargetArray[i].format == 'fasta') {
                if (fastaFound) {
                  this.pickListTargetArray.splice(i, 1);
                } else {
                  this.getChromosomes(this.transferingGroup, this.pickListTargetArray[i].id);
                  fastaFound = true;
                }
              }
            }*/
        }
    };
    CircosControlsComponent.prototype.onMoveToSource = function (event) {
        if (event.items[0].format === 'fasta') {
            this.pickListSourceArray = this.pickListMasterSourceArray.filter(function (el) { return el.format === 'fasta'; });
            this.transferingGroup.items = [];
            this.pickListTargetArray = this.transferingGroup.items;
        }
        else {
            var isAlreadyInList = void 0;
            for (var i = 0; i < event.items.length; i++) {
                for (var j = 0; j < this.pickListMasterSourceArray.length; j++) {
                    if (this.pickListMasterSourceArray[j].format === event.items[i].format) {
                        isAlreadyInList = false;
                        for (var k = 0; k < this.pickListSourceArray.length; k++) {
                            if (this.pickListMasterSourceArray[j].id === this.pickListSourceArray[k].id) {
                                isAlreadyInList = true;
                                break;
                            }
                        }
                        if (!isAlreadyInList) {
                            this.pickListSourceArray.push(this.pickListMasterSourceArray[j]);
                        }
                    }
                }
            }
        }
    };
    CircosControlsComponent.prototype.changeCheckBoxes = function (group, checked) {
        group.isChecked = checked;
        var groupsChecked = [];
        for (var _i = 0, _a = this.groups; _i < _a.length; _i++) {
            var group_3 = _a[_i];
            if (group_3.isChecked) {
                groupsChecked.push(group_3.name);
            }
        }
        this.displaySettingsService.groupsChecked = groupsChecked;
        this.getGroupsData();
    };
    CircosControlsComponent.prototype.getGroups = function () {
        return this.groups;
    };
    CircosControlsComponent.prototype.getFormatCategory = function (format) {
        switch (format) {
            case 'fasta':
                return 'fasta';
            case 'vcf':
                return 'vcf';
            case 'annotation':
                return 'annotation';
            case 'diffExp':
                return 'DE';
            case 'de':
                return 'DE';
            case 'bam':
                return 'genomicCov';
            case 'bai':
                return 'genomicCov';
            case 'bedcov':
                return 'transcriptomicCov';
            case 'results':
                return 'expression';
        }
    };
    CircosControlsComponent.prototype.updateLegend = function (legend) {
        this.legendBooleans = legend;
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('fileupload'),
        __metadata("design:type", Object)
    ], CircosControlsComponent.prototype, "fileupload", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('slider'),
        __metadata("design:type", Object)
    ], CircosControlsComponent.prototype, "slider", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], CircosControlsComponent.prototype, "onChromosomeSelected", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], CircosControlsComponent.prototype, "onGroupAdded", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], CircosControlsComponent.prototype, "onReorder", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], CircosControlsComponent.prototype, "onReorderedChromosomeSelected", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], CircosControlsComponent.prototype, "onReorderedChrBoolean", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], CircosControlsComponent.prototype, "onDisplayGroups", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], CircosControlsComponent.prototype, "onShowAnnotationLink", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], CircosControlsComponent.prototype, "onDisplayGroup1", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], CircosControlsComponent.prototype, "ClearMessage", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], CircosControlsComponent.prototype, "CreateMessage", void 0);
    CircosControlsComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'circos-controls',
            template: __webpack_require__(/*! ./circos-controls.component.html */ "./src/app/webcircos/circos-controls/circos-controls.component.html"),
            styles: [__webpack_require__(/*! ./circos-controls.component.css */ "./src/app/webcircos/circos-controls/circos-controls.component.css")],
            providers: []
        }),
        __metadata("design:paramtypes", [ng2_dragula_ng2_dragula__WEBPACK_IMPORTED_MODULE_1__["DragulaService"], _user_service__WEBPACK_IMPORTED_MODULE_5__["UserService"], _angular_common_http__WEBPACK_IMPORTED_MODULE_3__["HttpClient"],
            _loading_service__WEBPACK_IMPORTED_MODULE_4__["LoadingService"], ngx_toastr__WEBPACK_IMPORTED_MODULE_6__["ToastrService"], _display_settings_service__WEBPACK_IMPORTED_MODULE_7__["DisplaySettingsService"]])
    ], CircosControlsComponent);
    return CircosControlsComponent;
}());



/***/ }),

/***/ "./src/app/webcircos/customisation-panel/customisation-panel.component.css":
/*!*********************************************************************************!*\
  !*** ./src/app/webcircos/customisation-panel/customisation-panel.component.css ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ":host{\n  height: 100vh;\n  width:20vw;\n  z-index: 1000;\n}\n\n:host >>> .ui-togglebutton{\n  width: 99%;\n}\n\ntab0{ position:absolute; left:25px; }\n\np-sidebar >>> .ui-sidebar{\n  overflow-y: scroll;\n}\n"

/***/ }),

/***/ "./src/app/webcircos/customisation-panel/customisation-panel.component.html":
/*!**********************************************************************************!*\
  !*** ./src/app/webcircos/customisation-panel/customisation-panel.component.html ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<p-sidebar [(visible)]=\"isCustomisationClicked\" position=\"right\">\n\n  <h2> Customisation Panel </h2>\n\n\n<p-panel header=\"Regional Options\">\n  <!--<br><p-radioButton name=\"regions\" label=\"Highlight Genes\" value=\"genes\" [(ngModel)]=\"highlightedRegion\" (onClick)=\"whatToHighlight('genes')\" [disabled]=\"(genesPresent===true)? true : false\"></p-radioButton>\n  <br><p-radioButton name=\"regions\" label=\"Highlight Promoters\" value=\"promoters\" [(ngModel)]=\"highlightedRegion\" (onClick)=\"whatToHighlight('promoters')\" [disabled]=\"(promotersPresent===true)? true : false\"></p-radioButton>\n  <br><p-radioButton name=\"regions\" label=\"Highlight TF Binding Sites\" value=\"TF_binding_sites\" [(ngModel)]=\"highlightedRegion\" (onClick)=\"whatToHighlight('TF_binding_sites')\" [disabled]=\"(TF_binding_sitesPresent===true)? true : false\"></p-radioButton>\n  <br><p-radioButton name=\"regions\" label=\"Highlight enhancers\" value=\"enhancers\" [(ngModel)]=\"highlightedRegion\" (onClick)=\"whatToHighlight('enhancers')\" [disabled]=\"(enhancersPresent===true)? true : false\"></p-radioButton>\n  <br><p-radioButton name=\"regions\" label=\"Highlight tRNAs\" value=\"tRNAs\" [(ngModel)]=\"highlightedRegion\" (onClick)=\"whatToHighlight('tRNAs')\" [disabled]=\"(tRNAsPresent===true)? true : false\"></p-radioButton>\n  <br><p-radioButton name=\"regions\" label=\"Highlight Operons\" value=\"operons\" [(ngModel)]=\"highlightedRegion\" (onClick)=\"whatToHighlight('operons')\" [disabled]=\"(operonsPresent===true)? true : false\"></p-radioButton>-->\n\n\n  <br><p-radioButton name=\"regions\" label=\"Highlight Genes\" value=\"genes\" [(ngModel)]=\"highlightedRegion\" (onClick)=\"whatToHighlight('genes')\" ></p-radioButton>\n  <br><p-radioButton name=\"regions\" label=\"Highlight Promoters\" value=\"promoters\" [(ngModel)]=\"highlightedRegion\" (onClick)=\"whatToHighlight('promoters')\" ></p-radioButton>\n  <br><p-radioButton name=\"regions\" label=\"Highlight TF Binding Sites\" value=\"TF_binding_sites\" [(ngModel)]=\"highlightedRegion\" (onClick)=\"whatToHighlight('TF_binding_sites')\" ></p-radioButton>\n  <br><p-radioButton name=\"regions\" label=\"Highlight enhancers\" value=\"enhancers\" [(ngModel)]=\"highlightedRegion\" (onClick)=\"whatToHighlight('enhancers')\" ></p-radioButton>\n  <br><p-radioButton name=\"regions\" label=\"Highlight tRNAs\" value=\"tRNAs\" [(ngModel)]=\"highlightedRegion\" (onClick)=\"whatToHighlight('tRNAs')\" ></p-radioButton>\n  <br><p-radioButton name=\"regions\" label=\"Highlight Operons\" value=\"operons\" [(ngModel)]=\"highlightedRegion\" (onClick)=\"whatToHighlight('operons')\" ></p-radioButton>\n\n\n\n  <br>\n  <br>\n</p-panel>\n\n\n\n<p-panel header=\"VCF Options\">\n  <h4> Choose a VCF graph type: </h4>\n    <p-radioButton label=\"Line Graph\" name=\"graphType\" value=\"lineGraph\" (onClick)=\"vcfGraphType('lineGraph')\"></p-radioButton>\n    <br><p-radioButton label=\"Histogram\" name=\"graphType\" value=\"histogram\"  (onClick)=\"vcfGraphType('histogram')\"></p-radioButton>\n\n    <h4> Homozygous/Heterzoygous SNPs View: </h4>\n    <p-checkbox name=\"SNPs\" label=\"Display Homozygous SNPs\" value=\"val1\" [(ngModel)]=\"SNPs\" (onChange)=\"changeOnlyHomoSNP($event)\" [(ngModel)]=\"checkboxesDisplayArcs\"></p-checkbox>\n\n</p-panel>\n\n\n</p-sidebar>\n"

/***/ }),

/***/ "./src/app/webcircos/customisation-panel/customisation-panel.component.ts":
/*!********************************************************************************!*\
  !*** ./src/app/webcircos/customisation-panel/customisation-panel.component.ts ***!
  \********************************************************************************/
/*! exports provided: CustomisationPanelComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CustomisationPanelComponent", function() { return CustomisationPanelComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var CustomisationPanelComponent = /** @class */ (function () {
    function CustomisationPanelComponent() {
        this.isCustomisationClicked = false;
        this.highlightedRegion = 'genes';
        this.graphTypeSelected = 'histogram';
        this.onChangeOnlyHomoSNP = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.onHighlightAnnotation = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.onGraphTypeChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.singleDisplay = true;
        this.checkboxesDisplayArcs = [];
        this.SNPs = [];
    }
    CustomisationPanelComponent.prototype.openCustomisationPanel = function () {
        this.isCustomisationClicked = true;
    };
    CustomisationPanelComponent.prototype.whatToHighlight = function (type) {
        this.highlightedRegion = type;
        this.onHighlightAnnotation.emit(this.highlightedRegion);
    };
    CustomisationPanelComponent.prototype.changeOnlyHomoSNP = function (checked) {
        this.onChangeOnlyHomoSNP.emit(checked);
    };
    CustomisationPanelComponent.prototype.setMode = function (mode) {
        this.checkboxesDisplayArcs = [];
        if (mode === 'single') {
            this.singleDisplay = true;
        }
        else {
            this.singleDisplay = false;
        }
    };
    CustomisationPanelComponent.prototype.vcfGraphType = function (type) {
        this.graphTypeSelected = type;
        this.onGraphTypeChange.emit(this.graphTypeSelected);
    };
    CustomisationPanelComponent.prototype.handleSliderChange = function (e) {
    };
    CustomisationPanelComponent.prototype.ngOnInit = function () {
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], CustomisationPanelComponent.prototype, "onChangeOnlyHomoSNP", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], CustomisationPanelComponent.prototype, "onHighlightAnnotation", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], CustomisationPanelComponent.prototype, "onGraphTypeChange", void 0);
    CustomisationPanelComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-customisation-panel',
            template: __webpack_require__(/*! ./customisation-panel.component.html */ "./src/app/webcircos/customisation-panel/customisation-panel.component.html"),
            styles: [__webpack_require__(/*! ./customisation-panel.component.css */ "./src/app/webcircos/customisation-panel/customisation-panel.component.css")]
        }),
        __metadata("design:paramtypes", [])
    ], CustomisationPanelComponent);
    return CustomisationPanelComponent;
}());



/***/ }),

/***/ "./src/app/webcircos/file-management/cdk-tree-nested-example.css":
/*!***********************************************************************!*\
  !*** ./src/app/webcircos/file-management/cdk-tree-nested-example.css ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".example-tree-invisible {\n  display: none;\n}\n\n.example-tree ul,\n.example-tree li {\n  margin-top: 0;\n  margin-bottom: 0;\n  list-style-type: none;\n}\n\n.example-tree-node {\n  display: block;\n  padding-left: 10px;\n}\n"

/***/ }),

/***/ "./src/app/webcircos/file-management/cdk-tree-nested-example.html":
/*!************************************************************************!*\
  !*** ./src/app/webcircos/file-management/cdk-tree-nested-example.html ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<cdk-tree [dataSource]=\"nestedDataSource\" [treeControl]=\"nestedTreeControl\">\n  <cdk-nested-tree-node *cdkTreeNodeDef=\"let node\" class=\"example-tree-node\">\n    <button mat-icon-button disabled></button>\n    {{node.fileName}}:  {{node.type}}\n    <mat-checkbox class=\"checklist-leaf-node\" [checked]=\"node.isSelected\"></mat-checkbox>\n  </cdk-nested-tree-node>\n\n  <cdk-nested-tree-node *cdkTreeNodeDef=\"let node; when: hasNestedChild\" class=\"example-tree-node\">\n\n    <button mat-icon-button [attr.aria-label]=\"'toggle ' + node.fileName\" cdkTreeNodeToggle>\n      <mat-icon class=\"mat-icon-rtl-mirror\">\n        {{nestedTreeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n      </mat-icon>\n    </button>\n    <mat-checkbox class=\"checklist-leaf-node\" [checked]=\"node.isSelected\"></mat-checkbox>\n\n    {{node.fileName}}: {{node.type}}\n\n    <div [class.example-tree-invisible]=\"!nestedTreeControl.isExpanded(node)\">\n      <ng-container cdkTreeNodeOutlet></ng-container>\n    </div>\n\n  </cdk-nested-tree-node>\n\n</cdk-tree>\n"

/***/ }),

/***/ "./src/app/webcircos/file-management/cdk-tree-nested-example.ts":
/*!**********************************************************************!*\
  !*** ./src/app/webcircos/file-management/cdk-tree-nested-example.ts ***!
  \**********************************************************************/
/*! exports provided: FileNode, FileDatabase, CdkTreeNestedExample */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FileNode", function() { return FileNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FileDatabase", function() { return FileDatabase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkTreeNestedExample", function() { return CdkTreeNestedExample; });
/* harmony import */ var _angular_cdk_tree__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/tree */ "./node_modules/@angular/cdk/esm5/tree.es5.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_material_tree__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material/tree */ "./node_modules/@angular/material/esm5/tree.es5.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




/**
 * Json node data with nested structure. Each node has a filename and a value or a list of children
 */
var FileNode = /** @class */ (function () {
    function FileNode() {
    }
    return FileNode;
}());

/**
 * The Json tree data in string. The data could be parsed into Json object
 */
var FileDatabase = /** @class */ (function () {
    function FileDatabase() {
        this.dataChange = new rxjs__WEBPACK_IMPORTED_MODULE_3__["BehaviorSubject"]([]);
        this.initialize();
    }
    Object.defineProperty(FileDatabase.prototype, "data", {
        get: function () { return this.dataChange.value; },
        enumerable: true,
        configurable: true
    });
    FileDatabase.prototype.initialize = function () {
        // Build the tree nodes from Json object. The result is a list of `FileNode` with nested
        //     file node as children.
        var data = this.buildFileTree(null, 0);
        // Notify the change.
        this.dataChange.next(data);
    };
    /**
     * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.
     * The return value is the list of `FileNode`.
     */
    FileDatabase.prototype.buildFileTree = function (obj, level) {
        var nodes = Array();
        var parentNode = new FileNode;
        parentNode.projectID = "5ca38b2b0a24f137ca4e1ed2";
        parentNode.type = "Fasta";
        parentNode.fileID = "5ca38b3a0a24f137ca4e1ed3";
        parentNode.comment = "TAIR 10";
        parentNode.fileName = "Arabidopsis_thaliana.TAIR10.dna.toplevel.fa";
        parentNode.children = Array();
        var childNode = new FileNode;
        childNode.projectID = "5ca38b2b0a24f137ca4e1ed2";
        childNode.type = "annotation";
        childNode.fileID = "5ca4b5b0a7724d02da453aad";
        childNode.comment = "TAIR 10 GFF";
        childNode.fileName = "TAIR10_GFF3_genes.gff";
        parentNode.children.push(childNode);
        childNode = new FileNode;
        childNode.projectID = "5ca38b2b0a24f137ca4e1ed2";
        childNode.type = "annotation";
        childNode.fileID = "5ca4b5b0a7724d02da453aad";
        childNode.comment = "TAIR 11 GFF";
        childNode.fileName = "TAIR11_GFF3_genes.gff";
        parentNode.children.push(childNode);
        nodes.push(parentNode);
        parentNode = new FileNode;
        parentNode.projectID = "5ca38b2b0a24f137ca4e1ed2";
        parentNode.type = "Fasta";
        parentNode.fileID = "5ca48e4defa683021d24cace";
        parentNode.comment = "TAIR 8";
        parentNode.fileName = "tair8.at.chromosomes.fasta";
        parentNode.children = Array();
        childNode = new FileNode;
        childNode.projectID = "5ca38b2b0a24f137ca4e1ed2";
        childNode.type = "annotation";
        childNode.fileID = "5ca4b5d1b89cc102ea258d32";
        childNode.comment = "TAIR 8 GFF";
        childNode.fileName = "TAIR8_GFF3_genes.gff";
        parentNode.children.push(childNode);
        nodes.push(parentNode);
        return nodes;
    };
    FileDatabase = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])(),
        __metadata("design:paramtypes", [])
    ], FileDatabase);
    return FileDatabase;
}());

/**
 * @title Tree with nested nodes
 */
var CdkTreeNestedExample = /** @class */ (function () {
    function CdkTreeNestedExample(database) {
        var _this = this;
        this._getChildren = function (node) { return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["of"])(node.children); };
        this.nestedTreeControl = new _angular_cdk_tree__WEBPACK_IMPORTED_MODULE_0__["NestedTreeControl"](this._getChildren);
        this.nestedDataSource = new _angular_material_tree__WEBPACK_IMPORTED_MODULE_2__["MatTreeNestedDataSource"]();
        database.dataChange.subscribe(function (data) { return _this.nestedDataSource.data = data; });
    }
    //hasNestedChild = (_: number, nodeData: FileNode) => !nodeData.type;
    CdkTreeNestedExample.prototype.hasNestedChild = function (_, nodeData) {
        if (nodeData.children && nodeData.children.length > 0) {
            return true;
        }
        else {
            return false;
        }
    };
    CdkTreeNestedExample = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'cdk-tree-nested-example',
            template: __webpack_require__(/*! ./cdk-tree-nested-example.html */ "./src/app/webcircos/file-management/cdk-tree-nested-example.html"),
            styles: [__webpack_require__(/*! ./cdk-tree-nested-example.css */ "./src/app/webcircos/file-management/cdk-tree-nested-example.css")],
            providers: [FileDatabase]
        }),
        __metadata("design:paramtypes", [FileDatabase])
    ], CdkTreeNestedExample);
    return CdkTreeNestedExample;
}());



/***/ }),

/***/ "./src/app/webcircos/project-panel/link-table/link-table.component.css":
/*!*****************************************************************************!*\
  !*** ./src/app/webcircos/project-panel/link-table/link-table.component.css ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "p-dialog >>> .ui-dialog{\n  width: 80%;\n  left: 10%;\n}\n\np-dialog >>> .ui-dialog-content{\n  min-height: 400px;\n}\n\np-multiSelect >>> .ui-multiselect{\n  width: 100%;\n}\n\np-table >>> .ui-table .ui-table-tbody >>> tr:nth-child(2n).ui-state-highlight, {\n  background-color: #fafafb;\n  color: #222222;\n}\n\np-table >>> .ui-table .ui-table-tbody >>> tr.ui-state-highlight{\n  background-color: #ffffff;\n  color: #222222;\n}\n"

/***/ }),

/***/ "./src/app/webcircos/project-panel/link-table/link-table.component.html":
/*!******************************************************************************!*\
  !*** ./src/app/webcircos/project-panel/link-table/link-table.component.html ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<p-dialog header=\"Links\" [(visible)]=\"displayLinksDialog\">\n  <p-table #dt [columns]=\"columns\" [value]=\"links\" [paginator]=\"true\" [rows]=\"10\"\n  (onFilter)=\"onFilter($event)\">\n\n    <ng-template pTemplate=\"header\" let-columns>\n      <tr>\n        <th>Show</th>\n        <th *ngFor=\"let col of columns\" [pSortableColumn]=\"col.field\">\n          {{col.header}}\n          <p-sortIcon [field]=\"col.field\"></p-sortIcon>\n        </th>\n      </tr>\n      <tr>\n\n        <th style=\"width: 2.25em\">\n          <p-checkbox (onChange)=\"onHeaderCheckboxClick($event)\" [(ngModel)]=\"headerCheckBoxChecked\" binary=\"true\"></p-checkbox>\n          <!--<p-tableHeaderCheckbox></p-tableHeaderCheckbox>-->\n        </th>\n        <th *ngFor=\"let col of columns\" [ngSwitch]=\"col.type\">\n          <input *ngSwitchCase=\"'list'\" pInputText type=\"text\" (input)=\"dt.filter($event.target.value, col.field, col.filterMatchMode)\">\n          <div *ngSwitchCase=\"'numeric'\">\n            Value >= {{col.filterValue}}\n            <p-slider [style]=\"{'width':'100%','margin-top':'8px'}\" [(ngModel)]=\"col.filterValue\" [min]=\"col.min\" [max]=\"col.max\" (onChange)=\"onTableNumberChange($event, dt, col.field)\"></p-slider>\n          </div>\n\n          <p-multiSelect *ngSwitchCase=\"'level'\" [options]=\"col.levels\" defaultLabel=\"All\" (onChange)=\"dt.filter($event.value, col.field, 'in')\"></p-multiSelect>\n        </th>\n      </tr>\n    </ng-template>\n    <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\">\n      <tr >\n        <td>\n          <p-checkbox [(ngModel)]=\"rowData.show\" binary=\"true\" (onChange)=\"onRowToogle($event)\"></p-checkbox>\n          <!--<p-tableCheckbox [value]=\"rowData\"></p-tableCheckbox>-->\n        </td>\n        <td *ngFor=\"let col of columns\">\n          {{rowData[col.field]}}\n        </td>\n      </tr>\n    </ng-template>\n  </p-table>\n</p-dialog>\n"

/***/ }),

/***/ "./src/app/webcircos/project-panel/link-table/link-table.component.ts":
/*!****************************************************************************!*\
  !*** ./src/app/webcircos/project-panel/link-table/link-table.component.ts ***!
  \****************************************************************************/
/*! exports provided: LinkTableComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinkTableComponent", function() { return LinkTableComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var LinkTableComponent = /** @class */ (function () {
    function LinkTableComponent() {
        this.displayLinksDialog = false;
        this.headerCheckBoxChecked = true;
        this.updateLinksDisplayed = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
    }
    LinkTableComponent.prototype.ngOnInit = function () {
    };
    LinkTableComponent.prototype.open = function (file) {
        this.links = file.links;
        this.filteredLinks = this.links;
        this.columns = file.columns;
        this.displayLinksDialog = true;
        this.selectedLinks = JSON.parse(JSON.stringify(this.links));
    };
    LinkTableComponent.prototype.onTableNumberChange = function (event, dt, field) {
        if (this.numberTimeout) {
            clearTimeout(this.numberTimeout);
        }
        this.numberTimeout = setTimeout(function () {
            dt.filter(event.value, field, 'gte');
        }, 250);
    };
    LinkTableComponent.prototype.onRowToogle = function (checked) {
        if (!checked) {
            this.headerCheckBoxChecked = false;
        }
        else {
            this.checkHeaderCheckBox();
        }
        this.updateLinksDisplayed.emit(this.links.filter(function (link) { return link.show; }));
    };
    LinkTableComponent.prototype.onHeaderCheckboxClick = function (checked) {
        for (var _i = 0, _a = this.filteredLinks; _i < _a.length; _i++) {
            var link = _a[_i];
            link.show = checked;
        }
        this.updateLinksDisplayed.emit(this.links.filter(function (link) { return link.show; }));
    };
    LinkTableComponent.prototype.onFilter = function (event) {
        this.filteredLinks = event.filteredValue;
        this.checkHeaderCheckBox();
    };
    LinkTableComponent.prototype.checkHeaderCheckBox = function () {
        var allChecked = true;
        for (var _i = 0, _a = this.filteredLinks; _i < _a.length; _i++) {
            var link = _a[_i];
            if (!link.show) {
                allChecked = false;
                break;
            }
        }
        this.headerCheckBoxChecked = allChecked;
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], LinkTableComponent.prototype, "updateLinksDisplayed", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('dt'),
        __metadata("design:type", Object)
    ], LinkTableComponent.prototype, "dt", void 0);
    LinkTableComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-link-table',
            template: __webpack_require__(/*! ./link-table.component.html */ "./src/app/webcircos/project-panel/link-table/link-table.component.html"),
            styles: [__webpack_require__(/*! ./link-table.component.css */ "./src/app/webcircos/project-panel/link-table/link-table.component.css")]
        }),
        __metadata("design:paramtypes", [])
    ], LinkTableComponent);
    return LinkTableComponent;
}());



/***/ }),

/***/ "./src/app/webcircos/project-panel/project-panel.component.css":
/*!*********************************************************************!*\
  !*** ./src/app/webcircos/project-panel/project-panel.component.css ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ":root{\n  --header-footer: #24292e;\n  --accent: #a2e785;\n  --background: #eae7ed;\n  --homelogo: #ffffff;\n  --genomeGitWeb: #80c962;\n  --menuItems: #ffffff;\n  --signIn: #ffffff;\n  --foreground: #f6f8fa;\n  --textLight: #ffffff;\n  --textDark: #24292e;\n  --textDarkUnfocused: #889aad;\n  --button-hover: #596470;\n  --shadow: 0 1px 5px rgba(100, 100, 100, 0.5);\n  --searchbarShadow: 0 1px 5px rgba(0, 255, 0, 1);\n  --searchbarShadowHover: 0 1px 15px rgba(0, 255, 0, 1);\n  --searchbarShadowHoverInside: inset 1px 15px rgba(0, 255, 0, 1);\n  --logos: #5f5f5f;\n  --footerText: #80c962;\n  }\n\n  ::ng-deep\n    .mat-checkbox-inner-container {\n      height: 14px!important;\n      width: 14px!important;\n      vertical-align: text-bottom!important;\n    \n  }\n\n  ::ng-deep .mat-checkbox-layout{\n    float: right;\n  }\n\n  p-fileUpload {\n  display: none;\n}\n\n  :host {\n  overflow-y: scroll;\n}\n\n  :host >>> .ui-menu {\n  margin-bottom: 20px;\n}\n\n  #buttonDisplay {\n  margin-top: 20px;\n}\n\n  p-dialog >>> .ui-dialog {\n  width: 40vw;\n}\n\n  ul li {\n  display: block;\n}\n\n  i {\n  font-size: 3rem;\n  cursor: pointer;\n  vertical-align: bottom;\n  float: right;\n}\n\n  .file-icons{\nfont-size: 2rem;\n}\n\n  fa{\n font-size: 1.7rem;\n float: right;\n}\n\n  .addFileFa {\n  float: right;\n  margin-right: 15px;\n  font-size: 2rem;\n}\n\n  .hideFileFa {\n  float: right;\n  margin-right: 10px;\n}\n\n  .projectfa {\n  margin: 5px;\n}\n\n  #newGroupSpan {\n  display: inline-block;\n  margin-bottom: 5px;\n}\n\n  #groupContainer {\n  margin-top: 10px;\n}\n\n  .fileTitle {\n  word-break: break-all;\n}\n\n  .radioFile {\n  width: 2.25em;\n}\n\n  td input {\n  margin-right: 0;\n  margin-left: auto;\n}\n\n  :host >>> .ui-radiobutton-icon {\n  font: normal normal normal 10px/1 FontAwesome;\n  display: block;\n  margin-top: 3px;\n}\n\n  .formatInformation {\n  margin-left: 6px;\n  margin-right: 8px;\n}\n\n  .gradientBar {\n  background: linear-gradient(\n    to right,\n    hsl(0, 80%, 50%),\n    hsl(30, 80%, 50%),\n    hsl(50, 80%, 50%),\n    hsl(120, 80%, 50%)\n  );\n  height: 20px;\n}\n\n  .no-header .ui-panel-titlebar{\n  display: none !important;\n}\n\n  .gradientBarContainer,\n.levelsContainer {\n  margin-top: 10px;\n}\n\n  .levelsContainer {\n  text-align: center;\n}\n\n  .gradientBarContainer span {\n  font-size: small;\n}\n\n  .gradientBarContainer .spanRight {\n  float: right;\n}\n\n  .levelsContainer span {\n  margin-right: 5px;\n  margin-left: 5px;\n}\n\n  p-panel{\n  display: inline-block;\n  min-width: 230px;\n  max-width: auto;\n}\n\n  p-accordion >>> .ui-accordion {\n  padding-right: 0;\n  margin-right: 0;\n  /* width: 99%; */\n  /* border-right: solid 1px lightgray; */\n}\n\n  p-accordion >>> .ui-accordion-header a {\n  display: flex;\n}\n\n  ::ng-deep .ui-accordion .ui-accordion-header.ui-state-active{\n  border: none;\n}\n\n  p-accordion >>> .ui-accordion-content {\n  padding-top: 0;\n  /* border-right: solid; */\n}\n\n  p-header {\n  flex-grow: 100;\n}\n\n  :host >>> .ui-toast {\n  background-color: white;\n}\n\n  .fileHeader {\n  margin-top: 8px;\n  margin-bottom: 0;\n  padding: 3px;\n  background: lightgreen;\n}\n\n  p-dropdown{\n  width: 100%;\n  word-wrap: break-word;\n  /* font-size: 1rem; */\n}\n\n  .group{\n  /* text-overflow: ellipsis; */\n  /* border: solid 1px black; */\n  display: block;\n}\n\n  /* Checkbox style */\n\n  ::ng-deep .mat-checkbox .mat-checkbox-frame {\n  border-color: var(--genomeGitWeb);\n}\n\n  ::ng-deep .mat-checkbox-checked.mat-accent .mat-checkbox-background, .mat-checkbox-indeterminate.mat-accent .mat-checkbox-background, .mat-accent .mat-pseudo-checkbox-checked, .mat-accent .mat-pseudo-checkbox-indeterminate, .mat-pseudo-checkbox-checked, .mat-pseudo-checkbox-indeterminate {\n  background-color: var(--genomeGitWeb) !important; /* Red background for example */\n}\n"

/***/ }),

/***/ "./src/app/webcircos/project-panel/project-panel.component.html":
/*!**********************************************************************!*\
  !*** ./src/app/webcircos/project-panel/project-panel.component.html ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div>\n  <!-- *ngIf=\"userService.getIsSignedIn()\" -->\n  <p-panel header=\"Select project\">\n    <p-dropdown *ngIf=\"!userService.selectedProject\" [(options)]=\"userService.projects\"\n      [(ngModel)]=\"userService.selectedProject\" (onChange)=\"getFilesNames()\" optionLabel=\"title\" editable=\"false\">\n    </p-dropdown>\n    <p-dropdown *ngIf=\"userService.selectedProject && !routerLong\" [(options)]=\"userService.projects\"\n      [(ngModel)]=\"userService.selectedProject\" (onChange)=\"getFilesNames()\" optionLabel=\"title\" editable=\"false\">\n    </p-dropdown>\n    <p-dropdown *ngIf=\"routerLong\" [(options)]=\"userService.projects\" [(ngModel)]=\"userService.selectedProject.title\"\n      (onChange)=\"getFilesNames()\" optionLabel=\"title\" editable=\"false\"></p-dropdown>\n    <fa *ngIf=\"userService.getIsSignedIn()\" name=\"plus-circle\" class=\"projectfa\" pTooltip=\"Create a Project\"\n      (click)=\"dialogService.addProjectDialog.next(this)\"></fa>\n    <!-- <fa\n      name=\"copy\"\n      class=\"projectfa\"\n      *ngIf=\"userService.selectedProject\"\n      pTooltip=\"Import file from another Project\"\n      size=\"1.8x\"\n      (click)=\"dialogService.importFileDialog.next(this)\"\n    ></fa> -->\n    <!-- <fa\n      name=\"share-alt\"\n      class=\"projectfa\"\n      *ngIf=\"userService.selectedProject\"\n      pTooltip=\"Share Project\"\n      size=\"1.8x\"\n      (click)=\"dialogService.shareProjectDialog.next()\"\n    ></fa> -->\n    <fa name=\"trash\" class=\"projectfa\" *ngIf=\"userService.selectedProject\" pTooltip=\"Delete Project\" size=\"1.8x\"\n      (click)=\"deleteProject()\"></fa>\n    <fa name=\"refresh\" class=\"projectfa\" *ngIf=\"userService.selectedProject\" pTooltip=\"Refresh Project\" size=\"1.8x\"\n      (click)=\"getFilesNames()\"></fa>\n  </p-panel>\n</div>\n\n<p-fileUpload #fileupload mode=\"basic\" name=\"myfile[]\" auto=\"auto\" customUpload=\"true\"\n  (uploadHandler)=\"uploadFile($event)\"></p-fileUpload>\n\n<div *ngIf=\"userService.selectedProject || !userService.getIsSignedIn()\">\n  <p-progressSpinner *ngIf=\"isCharging && userService.getIsSignedIn()\" [style]=\"{ width: '50px', height: '50px' }\"\n    strokeWidth=\"8\" fill=\"#EEEEEE\" animationDuration=\"10.0s\"></p-progressSpinner>\n  <div>\n    <p-panel header=\"Uploads\" *ngIf=\"uploads.length > 0\">\n      <div *ngFor=\"let upload of uploads\">\n        <span>{{ upload.name }}</span>\n        <p-progressBar value=\"{{ upload.value }}\"></p-progressBar>\n      </div>\n    </p-panel>\n\n    <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\" />\n    <p-panel>\n      <p-header>\n        <div class=\"ui-helper-clearfix\" style=\"border: none\">\n          <span class=\"ui-panel-title\" style=\"font-size:16px;display:inline-block\">Files</span><i class=\"material-icons\"\n            (click)=\"dialogService.fileInfoDialog.next()\" style=\"font-size: 2rem\"\n            title=\"Group and File structure information\">\n            info\n          </i>\n          <!-- <fa\n          id=\"otherFileUp\"\n          class=\"addFileFa\"\n          name=\"plus\"\n          pTooltip=\"Upload File\"\n          (click)=\"onAddFileClick(null)\"\n          style=\"font-size: 1.6rem\"\n        >\n        </fa> -->\n        </div>\n      </p-header>\n      <!-- <p-accordion [multiple]=\"true\"> -->\n      <!-- <p-accordionTab [selected]=\"true\"> -->\n      <!-- <p-header> -->\n      <!-- <div class=\"ui-helper-clearfix\">\n            <span\n              class=\"ui-panel-title\"\n              style=\"font-size:16px;display:inline-block\"\n              >Files</span\n            ><i class=\"material-icons\" (click)=\"dialogService.fileInfoDialog.next()\">\n              info\n              </i>\n            <fa\n              id=\"otherFileUp\"\n              class=\"addFileFa\"\n              name=\"plus\"\n              pTooltip=\"Upload File\"\n              (click)=\"onAddFileClick(null)\"\n            >\n            </fa>\n          </div> -->\n      <!-- </p-header> -->\n      <div>\n        <cdk-tree [dataSource]=\"nestedDataSource\" [treeControl]=\"nestedTreeControl\">\n          <cdk-nested-tree-node *cdkTreeNodeDef=\"let node\">\n            <!-- <li class=\"mat-tree-node\" style=\"font-size: 12px\"> -->\n            <!-- <button mat-icon-button disabled></button> -->\n            <div style=\"padding-left: 3.5rem; width: 100%\">\n              <p *ngIf=\"node.commitInfo\" title=\"{{ node.commitInfo.message }}\">\n                {{ node.commitInfo.created }}\n              </p>\n              <p title=\"{{ node.fileName }}\">\n                {{ node.shortFileName }}: {{ node.type\n                }}<fa name=\"trash\" class=\"projectfa\" *ngIf=\"node.isManual\" pTooltip=\"Delete manually added file\"\n                  size=\"1.5x\" (click)=\"deleteFile(node)\" style=\"float: unset; margin-left: 5px\"></fa>\n                <mat-checkbox (change)=\"toggleSelectedFiles(node)\" [checked]=\"node.isSelected\" style=\"font-size: 12px\">\n                </mat-checkbox>\n              </p>\n\n              <!-- <mat-checkbox\n                    *ngIf=\"node.isLink\"\n                    (change)=\"onChangeLinksViewFormat(node)\"\n                    [checked]=\"node.displayLinkArc\"\n                  ></mat-checkbox> -->\n              <!-- <mat-checkbox *ngIf=\"node.isLink\" class=\"checklist-leaf-node\" (change)=\"onChangeLinksViewFormat(node)\"\n                  [checked]=\"node.displayLinkArc\"></mat-checkbox> -->\n            </div>\n            <!-- </li> -->\n          </cdk-nested-tree-node>\n          <cdk-nested-tree-node *cdkTreeNodeDef=\"let node; when: hasNestedChild\">\n            <div style=\"border-top: solid 6px #80c962; font-size: 12px; margin-bottom: 2rem;\">\n              <button mat-icon-button cdkTreeNodeToggle [cdkTreeNodeToggleRecursive]=\"recursive\"\n                [attr.aria-label]=\"'toggle ' + node.fileName\" style=\"display: contents\" [disableRipple]=\"true\">\n                <mat-icon class=\"mat-icon-rtl-mirror\">\n                  {{\n                    nestedTreeControl.isExpanded(node)\n                      ? \"expand_more\"\n                      : \"chevron_right\"\n                  }} </mat-icon><span *ngIf=\"node.commitInfo\" title=\"Commit message: {{ node.commitInfo.longMessage }}\nCommit date: {{ node.commitInfo.created }}\" style=\"border-bottom: solid 1px lightgray\">{{ node.commitInfo.message }}:\n                  {{ node.commitInfo.created }} <p-fileUpload #fileupload mode=\"basic\" name=\"myfile[]\" auto=\"auto\"\n                    customUpload=\"true\" (uploadHandler)=\"uploadFile($event)\"></p-fileUpload>\n                  <fa id=\"otherFileUp\" class=\"addFileFa\" name=\"plus\" pTooltip=\"Upload File\"\n                    (click)=\"onAddFileClick(node)\" style=\"margin: 0; font-size: 15px;\"></fa>\n                </span>\n              </button>\n              <p title=\"{{ node.fileName }}\" style=\"font-weight: bold; margin-left: 2.5rem\"\n                [ngStyle]=\"{ color: node.color }\">\n                {{ node.shortFileName }}: {{ node.type }}\n                <mat-checkbox style=\"float: right\" (change)=\"toggleSelectedFiles(node)\" [checked]=\"node.isSelected\">\n                </mat-checkbox>\n\n              </p>\n              <!-- <fa\n                  id=\"otherFileUp\"\n                  class=\"addFileFa\"\n                  name=\"plus\"\n                  pTooltip=\"Upload File\"\n                  (click)=\"onAddFileClick(node)\"\n                ></fa> -->\n              <div *ngIf=\"nestedTreeControl.isExpanded(node)\">\n                <ng-container cdkTreeNodeOutlet></ng-container>\n              </div>\n            </div>\n          </cdk-nested-tree-node><br />\n        </cdk-tree>\n\n        <!-- <cdk-tree [dataSource]=\"nestedDataSource\" [treeControl]=\"nestedTreeControl\">\n            <cdk-nested-tree-node *cdkTreeNodeDef=\"let node\" class=\"example-tree-node\">\n              <div class=\"sub-tree\" style=\"padding-left: 2rem; display: inline;\">\n                <p *ngIf=\"node.commitInfo\" title={{node.commitInfo.message}}>{{node.commitInfo.created}}</p>\n                <p title={{node.fileName}}>\n                  <mat-checkbox class=\"checklist-leaf-node\" (change)=\"toggleSelectedFiles(node)\"\n                    [checked]=\"node.isSelected\" ></mat-checkbox>\n                  {{ node.shortFileName }}: {{ node.type }}\n                </p>\n\n              </div>\n              <br />\n            </cdk-nested-tree-node>\n\n            <cdk-nested-tree-node *cdkTreeNodeDef=\"let node; when: hasNestedChild\" class=\"example-tree-node\"\n              style=\"display: inline-block; text-overflow: clip\">\n              <button mat-icon-button [attr.aria-label]=\"'toggle ' + node.fileName\" cdkTreeNodeToggle>\n                <mat-icon class=\"mat-icon-rtl-mirror\">\n                  {{\n                    nestedTreeControl.isExpanded(node)\n                      ? \"expand_more\"\n                      : \"chevron_right\"\n                  }}\n                </mat-icon>\n              </button>\n\n              <div class=\"group\" style=\"border: solid 1px black; max-width: 230px; min-width: 230px; font-size: 12px;\">\n                  <p *ngIf=\"node.commitInfo\"   title={{node.commitInfo.message}}>{{node.commitInfo.created}}</p>\n                <p  title={{node.fileName}} style=\"font-weight: bold\" [ngStyle]=\"{'color': node.color}\">\n                  <mat-checkbox class=\"checklist-leaf-node\" (change)=\"toggleSelectedFiles(node)\"\n                    [checked]=\"node.isSelected\" ></mat-checkbox>\n                  {{ node.shortFileName }}: {{ node.type }}\n                </p>\n                <fa id=\"otherFileUp\" class=\"addFileFa\" name=\"plus\" pTooltip=\"Upload File\"\n                  (click)=\"onAddFileClick(node)\"></fa>\n                <div [class.example-tree-invisible]=\"\n                    !nestedTreeControl.isExpanded(node)\n                  \">\n                  <ng-container cdkTreeNodeOutlet></ng-container>\n                </div>\n              </div>\n            </cdk-nested-tree-node>\n          </cdk-tree> -->\n      </div>\n      <!-- </p-accordionTab> -->\n      <!-- </p-accordion> -->\n    </p-panel>\n    <p-panel header=\"Download\">\n      <p-button label=\"Save as SVG\" (onClick)=\"saveSvg(svg, 'test.svg')\" style=\"font-size: 12px;\"></p-button>\n      <p-button label=\"Save as PNG\" (onClick)=\"savePNG()\" title=\"Download plot as png\"\n        style=\"float: right; font-size: 12px;\"></p-button>\n    </p-panel>\n  </div>\n</div>"

/***/ }),

/***/ "./src/app/webcircos/project-panel/project-panel.component.ts":
/*!********************************************************************!*\
  !*** ./src/app/webcircos/project-panel/project-panel.component.ts ***!
  \********************************************************************/
/*! exports provided: DisplayData, FileNode, FileDatabase, ProjectPanelComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DisplayData", function() { return DisplayData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FileNode", function() { return FileNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FileDatabase", function() { return FileDatabase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProjectPanelComponent", function() { return ProjectPanelComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../environments/environment */ "./src/environments/environment.ts");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm5/ngx-toastr.js");
/* harmony import */ var _display_settings_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../display-settings.service */ "./src/app/display-settings.service.ts");
/* harmony import */ var _user_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../user.service */ "./src/app/user.service.ts");
/* harmony import */ var _parser_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../parser.service */ "./src/app/parser.service.ts");
/* harmony import */ var _loading_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../loading.service */ "./src/app/loading.service.ts");
/* harmony import */ var _dialog_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../dialog.service */ "./src/app/dialog.service.ts");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm5/http.js");
/* harmony import */ var _webcircos_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../webcircos.component */ "./src/app/webcircos/webcircos.component.ts");
/* harmony import */ var _common_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../common.service */ "./src/app/common.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _angular_cdk_tree__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/cdk/tree */ "./node_modules/@angular/cdk/esm5/tree.es5.js");
/* harmony import */ var _angular_material_tree__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/material/tree */ "./node_modules/@angular/material/esm5/tree.es5.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
/* harmony import */ var _public_repositoryParser_parser_types__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../../public/repositoryParser/parser_types */ "./public/repositoryParser/parser_types.ts");
/* harmony import */ var _node_modules_save_svg_as_png_lib_saveSvgAsPng_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../../node_modules/save-svg-as-png/lib/saveSvgAsPng.js */ "./node_modules/save-svg-as-png/lib/saveSvgAsPng.js");
/* harmony import */ var _node_modules_save_svg_as_png_lib_saveSvgAsPng_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(_node_modules_save_svg_as_png_lib_saveSvgAsPng_js__WEBPACK_IMPORTED_MODULE_16__);
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

















// import * as svg from 'save-svg-as-png';

var DisplayData = /** @class */ (function () {
    function DisplayData() {
    }
    Object.defineProperty(DisplayData.prototype, "hasLinks", {
        get: function () { return this.links.length > 0 ? true : false; },
        enumerable: true,
        configurable: true
    });
    return DisplayData;
}());

var FileNode = /** @class */ (function () {
    function FileNode() {
        this.nodeIndex = -1;
        this.isManual = false;
        this.displayLinkArc = false;
        this.color = 'green'; //this is the color of biocircos chromosome band and also file name colour
        this.showArcAndLinks = false;
    }
    Object.defineProperty(FileNode.prototype, "shortFileName", {
        get: function () {
            if (this.fileName.length > 20) {
                return this.fileName.substring(0, 7) + "..." + "" + this.fileName.substring(this.fileName.length - 7, this.fileName.length);
            }
            else {
                return this.fileName;
            }
        },
        enumerable: true,
        configurable: true
    });
    FileNode.prototype.getLinkData = function (linkFileID) {
        if (linkFileID !== undefined) {
            for (var i = 0; i < this.links.length; i++) {
                if (this.links[i].fileID === linkFileID) {
                    return this.links[i];
                }
            }
        }
        else if (this.isLink && this.links && this.links.length > 0) {
            //this works because links FileNode has only one link object in array
            return this.links[0];
        }
        else {
            return new _public_repositoryParser_parser_types__WEBPACK_IMPORTED_MODULE_15__["FastaLink"];
        }
    };
    Object.defineProperty(FileNode.prototype, "isFasta", {
        get: function () { return (this.format === "fasta" ? true : false); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileNode.prototype, "isLink", {
        get: function () { return (this.format === "rearrangment" ? true : false); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileNode.prototype, "id", {
        get: function () { return this.fileID; } //required for backward compatability with the original app
        ,
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileNode.prototype, "name", {
        get: function () { return this.fileName; } //required for backward compatability with the original app
        ,
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileNode.prototype, "selectedIDs", {
        get: function () {
            var result = [];
            if (this.isSelected) {
                result.push(this.fileID);
            }
            for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
                var child = _a[_i];
                if (child.isSelected) {
                    result.push(child.fileID);
                }
            }
            return result;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileNode.prototype, "selectedItems", {
        get: function () {
            var result = [];
            for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
                var child = _a[_i];
                if (child.isSelected) {
                    result.push(child);
                }
            }
            return result;
        },
        enumerable: true,
        configurable: true
    });
    return FileNode;
}());

var FileDatabase = /** @class */ (function () {
    function FileDatabase() {
        this.dataChange = new rxjs__WEBPACK_IMPORTED_MODULE_14__["BehaviorSubject"]([]);
        this.nodes = Array();
        this.initialize();
    }
    Object.defineProperty(FileDatabase.prototype, "data", {
        get: function () { return this.dataChange.value; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileDatabase.prototype, "allNodes", {
        get: function () {
            var result = [];
            for (var _i = 0, _a = this.nodes; _i < _a.length; _i++) {
                var fasta = _a[_i];
                result.push(fasta);
                for (var i = 0; i < fasta.children.length; i++) {
                    result.push(fasta.children[i]);
                }
            }
            return result;
        },
        enumerable: true,
        configurable: true
    });
    FileDatabase.prototype.initialize = function () {
        var data = this.buildFileTree(null, null);
        // Notify the change.
        // this.dataChange.next(data);
    };
    FileDatabase.prototype.buildFileTree = function (obj, commits) {
        this.nodes = [];
        //dict for filename, id
        var parentdict = {};
        var m = 0;
        if (obj !== null) {
            //data has the following format:
            //for fasta files: data{chromosomes as Array}, format{file format as string}, name{filename as string},project{project ids as Array}, _id{fileID}
            //for other files: fasta{fastaID as string}, format{file format as string}, name{filename as string},project{project ids as Array}, _id{fileID}
            if (Array.isArray(obj)) {
                //create links files
                //create fasta Nodes first
                for (var i = 0; i < obj.length; i++) {
                    if (obj[i].format === "fasta") {
                        var parentNode = new FileNode;
                        parentNode.nodeIndex = i;
                        parentNode.projectID = (obj[i].projects.length > 0) ? obj[i].projects[0] : "";
                        parentNode.commitInfo = (commits.has(obj[i].hash)) ? commits.get(obj[i].hash) : new _public_repositoryParser_parser_types__WEBPACK_IMPORTED_MODULE_15__["CommitInfo"];
                        parentNode.format = "fasta";
                        parentNode.fileID = obj[i]._id;
                        parentNode.fileName = obj[i].name;
                        parentNode.children = Array();
                        parentNode.links = Array();
                        //create dict to name children nodes
                        parentdict[obj[i]._id] = obj[i].name;
                        //create child nodes
                        for (var j = 0; j < obj.length; j++) {
                            //create file nodes that are not link files - main reason for difference is links have different data structure
                            var child = new FileNode;
                            if (obj[j].format !== "fasta" && obj[j].format !== "InDelSNP" && obj[j].format !== "rearrangment" && obj[j].fasta === parentNode.fileID) {
                                child.projectID = parentNode.projectID;
                                child.format = obj[j].format;
                                //merging Filtered.snp and Filtered.delta was a wrong decision
                                child.fileID = obj[j]._id;
                                child.fastaID = parentNode.fileID;
                                child.fileName = obj[j].name;
                                child.children = Array();
                                if (obj[j].isManual) {
                                    child.isManual = obj[j].isManual;
                                }
                                parentNode.children.push(child);
                            }
                            if (obj[j].format === "InDelSNP" && (obj[j].OldFasta === parentNode.fileID || obj[j].NewFasta === parentNode.fileID)) {
                                //each link is split into two nodes. One will show (as biocircos heatmap) InDels and SNPs
                                //the othe will show movement of fragments.
                                child.projectID = parentNode.projectID;
                                child.format = obj[j].format;
                                child.fileID = obj[j].fileID;
                                //child.fileName = (obj[j].OldFasta === parentNode.fileID) ? "InDels & SNPs vs newer genome" : "InDels & SNPs vs older genome";
                                child.fastaID = parentNode.fileID;
                                //a bit too nested for my taste
                                this._createFastaInDelLink(obj[j], child, ((obj[j].OldFasta === parentNode.fileID) ? true : false));
                                child.dataUnscaled = child.data;
                                parentNode.children.push(child);
                            }
                            else if (obj[j].format === "rearrangment" && (obj[j].OldFasta === parentNode.fileID || obj[j].NewFasta === parentNode.fileID)) {
                                //create the node to show movements
                                m++;
                                child = new FileNode;
                                child.projectID = parentNode.projectID;
                                child.format = obj[j].format;
                                child.fileID = obj[j].fileID;
                                //child.fileName = (obj[j].OldFasta === parentNode.fileID) ? "Rearrangment vs newer genome" : "Rearrangment vs older genome";
                                child.OldFasta = obj[j].OldFasta;
                                child.NewFasta = obj[j].NewFasta;
                                child.fastaID = parentNode.fileID;
                                child.links = [];
                                //console.log(parentdict[child.fastaID],child.fileID)
                                //console.log(parentdict[child.NewFasta], parentdict[child.OldFasta])
                                //a bit too nested for my taste
                                var link = this._creatRearrangmentLink(obj[j], child);
                                child.links.push(link);
                                parentNode.links.push(link);
                                parentNode.children.push(child);
                            }
                        }
                        this.nodes.push(parentNode);
                    }
                }
            }
            for (var _i = 0, _a = this.allNodes; _i < _a.length; _i++) {
                var file = _a[_i];
                if (file.format === 'fasta') { /*console.log(file.links);console.log(file.fileName, file.fileID)*/ }
                if (file.format === 'rearrangment') {
                    //console.log(file.OldFasta, file.NewFasta)
                    //could change to commit name rather than fasta name
                    file.fileName = (file.OldFasta === file.fastaID) ? "Link: " + parentdict[file.NewFasta] : "Link: " + parentdict[file.OldFasta];
                }
                if (file.format === "InDelSNP") {
                    file.fileName = (file.OldFasta === file.fastaID) ? "InDelSNP: " + parentdict[file.NewFasta] : "InDelSNP: " + parentdict[file.OldFasta];
                }
            }
        }
        console.log(m);
        this.dataChange.next(this.nodes);
    };
    FileDatabase.prototype._creatRearrangmentLink = function (linkData, child) {
        var newLinkFile = new _public_repositoryParser_parser_types__WEBPACK_IMPORTED_MODULE_15__["FastaLink"];
        newLinkFile.NewFasta = linkData.NewFasta;
        newLinkFile.OldFasta = linkData.OldFasta;
        newLinkFile.data = [];
        for (var _i = 0, _a = linkData.data; _i < _a.length; _i++) {
            var value = _a[_i];
            if (value.isDelta) {
                value.color = "#0000ff";
                newLinkFile.data.push(value);
            }
        }
        return newLinkFile;
    };
    FileDatabase.prototype._createFastaInDelLink = function (linkData, child, g1) {
        child.data = [];
        for (var _i = 0, _a = linkData.data; _i < _a.length; _i++) {
            var value = _a[_i];
            if (!value.isDelta) {
                if (g1) {
                    child.data.push({ chr: value.g1chr, start: value.g1start, end: value.g1start + 30000,
                        color: this.getColour(value.g1value, value.g2value), des: value.g2value + ">" + value.g1value });
                }
                else {
                    child.data.push({ chr: value.g2chr, start: value.g2start, end: value.g2start + 30000,
                        color: this.getColour(value.g2value, value.g1value), des: value.g1value + ">" + value.g2value });
                }
            }
        }
    };
    FileDatabase.prototype.getColour = function (val1, val2) {
        if (val1 != "." && val2 != ".") {
            return "#0000ff";
        }
        else if (val1 != ".") {
            return "#ff0000";
        }
        else {
            return "#00ff00";
        }
    };
    FileDatabase.prototype.getSelectedNodes = function () {
        var files = [];
        for (var _i = 0, _a = this.data; _i < _a.length; _i++) {
            var file = _a[_i];
            if (file.isSelected && file.isFasta) {
                files = files.concat(file);
                files = files.concat(file.selectedItems);
            }
        }
        return files;
    };
    FileDatabase = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])(),
        __metadata("design:paramtypes", [])
    ], FileDatabase);
    return FileDatabase;
}());

var ProjectPanelComponent = /** @class */ (function () {
    function ProjectPanelComponent(userService, http, parserService, toastr, loadingService, dialogService, displaySettingsService, commonService, route, database) {
        this.userService = userService;
        this.http = http;
        this.parserService = parserService;
        this.toastr = toastr;
        this.loadingService = loadingService;
        this.dialogService = dialogService;
        this.displaySettingsService = displaySettingsService;
        this.commonService = commonService;
        this.route = route;
        this.linkFiles = [];
        this.showLinksAndArc = false;
        this.displayData = new DisplayData;
        this.selectedFiles = [];
        this.fastaFiles = [];
        this.selectedFastaIndex = null;
        this.vcfFiles = [];
        this.fileForNextLoading = {}; // Name of the file preuploaded and list of the files
        this.genomicCovFiles = [];
        this.transcriptomicCovFiles = [];
        this.annotationFiles = [];
        this.DEFiles = [];
        this.expressionFiles = [];
        this.groupItems = [];
        // ----Import dialog-----------
        this.importDialogVisible = false;
        this.importableFiles = [];
        this.listEmails = [];
        // -----------Booleans --------
        this.isCharging = true;
        this.parsingBool = false;
        this.defaultFasta = true;
        this.uploads = [];
        this.populatePickList = [];
        this.chromosomes = [];
        // -----------groups-------------
        this.newGroupName = "";
        this.groups = [];
        this.isChecked = false;
        this.publicAccess = false;
        this.routerLong = false;
        this.ClearMessage = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.CreateMessage = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.onEmittingPopulatedPickList = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.onAddGroup = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.onDeleteGroup = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.onEditGroup = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.onUpdateGroup1 = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.hasLinks = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.onClear = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.onProjectSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.displayFileLinks = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.onHideLinks = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this._getChildren = function (node) { return Object(rxjs__WEBPACK_IMPORTED_MODULE_14__["of"])(node.children); };
        this.nestedTreeControl = new _angular_cdk_tree__WEBPACK_IMPORTED_MODULE_12__["NestedTreeControl"](this._getChildren);
        this.nestedDataSource = new _angular_material_tree__WEBPACK_IMPORTED_MODULE_13__["MatTreeNestedDataSource"]();
        this.database = database;
        var _this = this;
        database.dataChange.subscribe(function (data) { return _this.nestedDataSource.data = data; });
        //use one object that stores references to all visualisation data
        this.displayData.links = this.linkFiles;
        this.displayData.groups = this.database.data;
    }
    ProjectPanelComponent.prototype.hasNestedChild = function (_, nodeData) {
        if (nodeData.children && nodeData.children.length > 0) {
            return true;
        }
        else {
            return false;
        }
    };
    ProjectPanelComponent.prototype.ngOnInit = function () {
        var _this_1 = this;
        this.userService.selectedProject = null;
        if (this.route.params.subscribe(function (params) { return params["id"]; })) {
            this.route.params.subscribe(function (params) { _this_1.id = params["id"]; });
            this.commonService.getProject(this.id).subscribe(function (res) {
                _this_1.userService.selectedProject = res.json().data;
                _this_1.userService.selectedProject.title = res.json().data.title;
                _this_1.userService.selectedProject.id = res.json().data._id;
                _this_1.routerLong = true;
                _this_1.getFilesNames();
            });
        }
        else {
            this.userService.selectedProject = null;
        }
        if (this.userService.getIsSignedIn()) {
            this.getProjects();
        }
        else {
            this.sub = this.route.params.subscribe(function (params) {
                _this_1.id = params["id"];
            });
            //If user is not signed in
            //Get only genome files from common service GetGenome function
            this.getGenome(this.id);
        }
        this.preLoadedFiles = new Map();
        this.fileForNextLoading = { file: '', list: this.preLoadedFiles };
        this.chromosomeSignature = { begins: '', ends: ' CHROMOSOM' };
    };
    ProjectPanelComponent.prototype.getGenome = function (id) {
        var _this_1 = this;
        this.commonService.getGenome(this.id).subscribe(function (res) {
            _this_1.assembly = res.json();
            _this_1.getProjects();
        });
    };
    ProjectPanelComponent.prototype.toggleSelectedFiles = function (node) {
        //add a clause that deselects second file of the same type when more than one fasta is selected
        //i.e. only one type is selected per group when more than 1 group selected
        //switch selection value
        node.isSelected = !node.isSelected;
        if (node.format === "fasta" && !node.isSelected) {
            //deselect all child items
            var childFastas = [];
            for (var _i = 0, _a = node.children; _i < _a.length; _i++) {
                var value = _a[_i];
                if (value.format === "rearrangment" && value.isSelected) {
                    childFastas = [value.OldFasta, value.NewFasta];
                }
                value.isSelected = false;
            }
            for (var _b = 0, _c = this.database.allNodes; _b < _c.length; _b++) {
                var file = _c[_b];
                if (file.format === "rearrangment" && childFastas.length === 2 && file.NewFasta === childFastas[1] && file.OldFasta === childFastas[0]) {
                    file.isSelected = false;
                }
            }
        }
        else if (node.format === "rearrangment") {
            for (var _d = 0, _e = this.database.allNodes; _d < _e.length; _d++) {
                var file = _e[_d];
                if (file.format === "fasta" && (file.fileID === node.NewFasta || file.fileID === node.OldFasta)) {
                    if (!file.isSelected) {
                        file.isSelected = true;
                    }
                }
                else if (file.format === "rearrangment" && file.NewFasta === node.NewFasta && file.OldFasta === node.OldFasta) {
                    file.isSelected = node.isSelected;
                }
            }
        }
        else if (node.format !== "fasta" && node.isSelected) {
            //check relevant fasta is selected
            //console.log("test")
            for (var _f = 0, _g = this.database.data; _f < _g.length; _f++) {
                var fasta = _g[_f];
                if (fasta.format === "fasta" && fasta.fileID === node.fastaID) {
                    if (!fasta.isSelected) {
                        fasta.isSelected = true;
                    }
                    break;
                }
            }
        }
        //provide the list of FileNodes which are selected including any child nodes
        var files = this.database.getSelectedNodes();
        this.loadingService.isCharging = true;
        var linksBoolean = false;
        for (var _h = 0, files_1 = files; _h < files_1.length; _h++) {
            var file = files_1[_h];
            if (file.format === "InDelSNP") {
                linksBoolean = true;
                break;
            }
        }
        //reset the group names for links objects, otherwise they may potentially 
        //only be displayed on one group
        for (var _j = 0, files_2 = files; _j < files_2.length; _j++) {
            var file = files_2[_j];
            var alreadyGrouped = false;
            if (file.format === "InDelSNP") {
                for (var _k = 0, _l = file.data; _k < _l.length; _k++) {
                    var dataPoint = _l[_k];
                    if (!alreadyGrouped && file.data[0].chr.indexOf("_") != -1) {
                        alreadyGrouped = true;
                    }
                    if (alreadyGrouped) {
                        dataPoint.chr = dataPoint.chr.split("_")[1];
                    }
                }
            }
        }
        this.onUpdateGroup1.emit(files);
        this.hasLinks.emit(linksBoolean);
        this.loadingService.isCharging = false;
    };
    ProjectPanelComponent.prototype.onAddFileClick = function (event) {
        //this.dialogService.paramFastaDialog.next(this);
        if (event.format === "fasta") {
            this.uploadFastaID = event.fileID;
            this.fileupload.el.nativeElement.children[0].children[2].click();
        }
        return true;
    };
    ProjectPanelComponent.prototype.updateGroups = function (data) {
        this.groupItems = [];
        for (var i in data) {
            this.groupItems.push({
                label: data[i], icon: 'fa-plus', command: function (event) {
                }
            });
        }
    };
    ProjectPanelComponent.prototype.reload = function () {
        this.clearProject();
        this.getProjects();
    };
    ProjectPanelComponent.prototype.clear = function () {
        this.userService.projects = [];
        this.userService.selectedProject = null;
        this.clearProject();
    };
    ProjectPanelComponent.prototype.clearProject = function () {
        this.fastaFiles = [];
        this.selectedFastaIndex = null;
        this.genomicCovFiles = [];
        this.transcriptomicCovFiles = [];
        this.annotationFiles = [];
        this.DEFiles = [];
        this.vcfFiles = [];
        this.expressionFiles = [];
        this.groups = [];
        this.chromosomes = [];
        this.selectedFiles = [];
        this.onClear.emit();
    };
    ProjectPanelComponent.prototype.getProjects = function () {
        var _this_1 = this;
        this.isCharging = false;
        var url = _environments_environment__WEBPACK_IMPORTED_MODULE_1__["environment"].host + 'getProjects?email=' + this.userService.getEmail() + '&token=' + this.userService.getToken();
        this.http.get(url).subscribe(function (data) {
            _this_1.userService.projects = [];
            if (_this_1.userService.getIsSignedIn() && _this_1.userService.projects.length < 1) {
                for (var i = 0; i < data.length; i++) {
                    _this_1.userService.projects.push({ title: data[i].title, id: data[i].id });
                }
            }
            else if (!_this_1.userService.getIsSignedIn()) {
                _this_1.getGenome(_this_1.id);
                _this_1.userService.projects.push({ title: _this_1.assembly.title, id: _this_1.assembly.id });
            }
        }, function (error) {
            console.log(error);
        });
        this.isCharging = false;
    };
    ProjectPanelComponent.prototype.getCardTitle = function () {
        if (this.userService.selectedProject) {
            return this.userService.selectedProject.title;
        }
        return 'Project';
    };
    ProjectPanelComponent.prototype.addProject = function (newProjectTitle, publicPrivate, newProjectDescription) {
        var _this_1 = this;
        console.log("add project");
        this.ClearMessage.emit();
        this.CreateMessage.emit('Upload Fasta File');
        var url = _environments_environment__WEBPACK_IMPORTED_MODULE_1__["environment"].host + 'addProject';
        var that = this;
        this.http.post(url, {
            title: newProjectTitle, token: this.userService.getToken(),
            user: this.userService.getID(),
            username: this.userService.getusername(),
            public: publicPrivate,
            description: newProjectDescription
        }).subscribe(function (data) {
            if (data.id === "exists") {
                alert("Project name already exists! Please choose a different name.");
            }
            else {
                _this_1.clearProject();
                var newProject = { title: newProjectTitle, id: data.id, public: publicPrivate };
                var newArray = JSON.parse(JSON.stringify(that.userService.projects));
                newArray.push(newProject);
                that.userService.projects = newArray;
                that.userService.selectedProject = null;
                newProjectTitle = '';
            }
        }, function (error) {
            console.log(error);
        });
    };
    ProjectPanelComponent.prototype.functionName = function (userName, projectName) {
        userName = this.userService.username;
        projectName = this.userService.selectedProject.title;
        this.commonService.functionName(userName, projectName);
    };
    ProjectPanelComponent.prototype.getFilesNames = function () {
        var _this_1 = this;
        this.isCharging = true;
        this.clearProject();
        var url = _environments_environment__WEBPACK_IMPORTED_MODULE_1__["environment"].host + "getFilesNames?id=" + this.userService.selectedProject.id + "&token=" + this.userService.getToken();
        this.http.get(url).subscribe(function (data) {
            _this_1.onProjectSelected.emit();
            if (data) {
                //get commits information, I don't think the database is well structured to handle the 
                //many to one commit-fasta relationship (same fasta can be in many commits, but only one fasta per commit)
                var url_1 = _environments_environment__WEBPACK_IMPORTED_MODULE_1__["environment"].host + "getCommitInfo?id=" + _this_1.userService.selectedProject.id;
                _this_1.http.get(url_1).subscribe(function (commits) {
                    var date = /\..*$/g;
                    //unfortunately, the get/res doesn't seem able to pass Map(), thus the subsequent lines
                    var commitMap = new Map();
                    for (var i = 0; i < commits.length; i++) {
                        var year = commits[i][1].created.match(/\d{4}/);
                        var month = commits[i][1].created.match(/-(\d{1,2})-/);
                        var day = commits[i][1].created.match(/-(\d{1,2})T/)[1].replace("T", "");
                        commits[i][1].created = commits[i][1].created.replace("T", " ").replace(date, "").replace(/:\d\d$/, "").replace(/(\d{4})-(\d{1,2})-(\d{1,2})/, day + "-" + month[1] + "-" + year + " ");
                        commitMap.set(commits[i][0], commits[i][1]);
                        commits[i][1].longMessage = commits[i][1].message;
                        commits[i][1].message = commits[i][1].message.slice(0, 9).concat("... ");
                    }
                    _this_1.database.buildFileTree(data, commitMap);
                    var fastaIDs = [];
                    for (var i = 0; i < data.length; i++) {
                        if (data[i].format === "fasta") {
                            fastaIDs.push(data[i]._id);
                        }
                    }
                }, function (error) {
                    console.log(error);
                    return false;
                });
            }
            _this_1.isCharging = false;
        }, function (error) {
            console.log(error);
            return false;
        });
    };
    ProjectPanelComponent.prototype.getProjectData = function (files, callback) {
        var _this_1 = this;
        var url = _environments_environment__WEBPACK_IMPORTED_MODULE_1__["environment"].host + "getBins?id=" + this.userService.selectedProject.id +
            "&token=" + this.userService.getToken() + "&files=" + JSON.stringify(files);
        this.http.get(url).subscribe(function (data) {
            _this_1.chromosomes = [{ id: 'All', length: null, start: 0, end: 100, range: [0, 100] }];
            for (var i = 0; i < data.fasta.data.length; i++) {
                _this_1.chromosomes.push({
                    id: data.fasta.data[i][0], length: data.fasta.data[i][1], start: 0,
                    end: data.fasta.data[i][1] - 1, range: [0, data.fasta.data[i][1] - 1]
                });
            }
            callback(data);
        }, function (error) {
            console.log(error);
        });
    };
    ProjectPanelComponent.prototype.uploadFile = function (event) {
        this.parsingBool = true;
        var f = event.files[0]; // get the uploaded file
        var _this = this;
        var extension = f.name.split('.');
        extension = extension[extension.length - 1]; // extract the file extension
        if (extension[extension.length - 2])
            var ext2 = extension[extension.length - 2];
        if (!_this.userService.selectedProject) {
            _this.userService.selectedProject = {
                title: "Project",
                id: "",
                public: false
            };
        }
        // creating a new worker
        var worker = new Worker("parser_worker.js");
        // For bedcov uploading, check that an annotation File is selected
        if (extension === "bedcov" ||
            extension === "results" ||
            extension === "de" ||
            extension === "txt" ||
            ext2 === "de") {
            var annotationFound = false;
            var annotationID = void 0;
            for (var i = 0; i < this.selectedFiles.length; i++) {
                if (annotationFound) {
                    break;
                }
                for (var j = 0; j < this.annotationFiles.length; j++) {
                    if (this.selectedFiles[i] == this.annotationFiles[j].id) {
                        annotationFound = true;
                        annotationID = this.selectedFiles[i];
                        _this.fileForNextLoading = { file: annotationID, list: _this.preLoadedFiles };
                        break;
                    }
                }
            }
            if (!annotationFound) {
                alert("Please select an annotation file corresponding to the .bedcov before proceeding");
                _this.fileupload.clear();
                return;
            }
        }
        if (this.uploadFastaID != "") {
            worker.postMessage([f, _this.userService.selectedProject.id, _this.userService.getToken(), this.uploadFastaID, _this.fileForNextLoading, _this.chromosomeSignature, true]);
        }
        else {
            return;
        }
        _this.fileupload.clear();
        worker.onmessage = function (msg) {
            if (msg.data.error) {
                var summary = void 0;
                summary = msg.data.error.severity === 'warn' ? 'Warn Message' : 'Error Message';
                _this.toastr.error(summary, msg.data.error.message, { positionClass: 'toast-bottom-right' });
            }
            else {
                if (msg.data.projectID) {
                    _this.userService.selectedProject.id = msg.data.projectID;
                    _this.userService.selectedProject.title = msg.data.projectTitle;
                }
                else if (msg.data.IsBam) {
                    alert("The BAI file should be uploaded first. You have entered BAM file, please first enter the corresponding BAI, then try again");
                    _this.fileupload.clear();
                }
                else if (msg.data.IsBai) {
                    alert("You have entered BAI file, please now enter the corresponding BAM");
                    _this.preLoadedFiles.set(msg.data.file, msg.data.format);
                    _this.fileForNextLoading = { file: msg.data.file, list: _this.preLoadedFiles };
                    _this.fileupload.clear();
                }
                else if (msg.data.init) {
                    _this.uploads.push({ name: msg.data.name, value: 0 });
                }
                else {
                    for (var i = 0; i < _this.uploads.length; i++) {
                        if (_this.uploads[i].name === msg.data.name) {
                            _this.uploads[i].value = Math.floor(msg.data.value);
                            if (msg.data.value == 100 && msg.data.format) {
                                _this.getFilesNames();
                                // const insertedFile = { name: msg.data.name, format: msg.data.format, id: msg.data.id };
                                // _this.populatePickList.push(insertedFile);
                                // if (msg.data.format === 'fasta') {
                                // _this.fastaFiles.push(insertedFile);
                                // _this.selectedFastaIndex = _this.fastaFiles.length - 1;
                                // _this.toastr.warning('Warning message', 'Be sure to select the correct fasta file before uploading other files', { positionClass: 'toast-top-right' });
                                // } else if (msg.data.format === 'vcf') {
                                // _this.vcfFiles.push(insertedFile)
                                // } else if (msg.data.format === 'annotation') {
                                // _this.annotationFiles.push(insertedFile)
                                // } else if (msg.data.format === 'diff' || msg.data.format === 'de') {
                                // _this.DEFiles.push(insertedFile)
                                // } else if (msg.data.format === 'bam' || msg.data.format === 'bai') {
                                // _this.genomicCovFiles.push(insertedFile)
                                // } else if (msg.data.format === 'bedcov') {
                                // _this.transcriptomicCovFiles.push(insertedFile)
                                // } else if (msg.data.format === 'results') {
                                // _this.expressionFiles.push(insertedFile)
                                // }
                                //_this.onEmittingPopulatedPickList.emit(_this.populatePickList);
                                _this.uploads.splice(i);
                            }
                        }
                    }
                }
            }
        };
    };
    ProjectPanelComponent.prototype.deleteProject = function () {
        var _this_1 = this;
        this.isCharging = true;
        var sure = confirm("Are you sure you want to delete this project ?");
        if (sure) {
            var url = _environments_environment__WEBPACK_IMPORTED_MODULE_1__["environment"].host + "deleteProject";
            this.http
                .post(url, {
                project: this.userService.selectedProject.id,
                user: this.userService.getusername()
            })
                .subscribe(function (data) {
                _this_1.clearProject();
                var index = _this_1.userService.projects.indexOf(_this_1.userService.selectedProject);
                var newArray = _this_1.userService.projects;
                _this_1.userService.projects = [];
                newArray.splice(index, 1);
                _this_1.userService.projects = newArray;
                var that = _this_1;
                setTimeout(function () {
                    that.userService.selectedProject = null;
                    that.reload();
                    this.isCharging = false;
                }, 2000);
            }, function (error) {
                console.log("Error: project couldn't be deleted");
                _this_1.isCharging = false;
            });
        }
    };
    ProjectPanelComponent.prototype.deleteFile = function (file) {
        var _this_1 = this;
        var url = _environments_environment__WEBPACK_IMPORTED_MODULE_1__["environment"].host + "deleteFile?id=" + file.id.toString();
        this.http.get(url).subscribe(function (commits) {
            _this_1.getFilesNames();
        });
    };
    ProjectPanelComponent.prototype.openShareDialog = function () {
        this.sharedialog.open(this.userService.selectedProject.id);
    };
    ProjectPanelComponent.prototype.addEmailToList = function () {
        this.listEmails.push(this.currentEmail);
        // this.sharedialog.open(this.userService.selectedProject.id);
    };
    ProjectPanelComponent.prototype.shareProject = function () {
        var _this_1 = this;
        var rep = this.userService.addUsersToProject(this.listEmails, this.userService.selectedProject.id);
        rep.subscribe(function (data) {
            if (data.complete) {
                _this_1.toastr.success("Success", "Project Shared !", {
                    positionClass: "toast-top-right"
                });
            }
            else {
                _this_1.toastr.error("Warn Message", "User not found, project not shared.", { positionClass: "toast-bottom-right" });
            }
            _this_1.listEmails = [];
            _this_1.currentEmail = "";
        });
    };
    ProjectPanelComponent.prototype.saveSvg = function (svgEl, name) {
        var svg = document.getElementById("biocircos");
        svg.setAttribute("xmlns", _environments_environment__WEBPACK_IMPORTED_MODULE_1__["environment"].host);
        var svgData = svg.outerHTML;
        console.log(svgData);
        var preface = '<?xml version="1.0" standalone="no"?>\r\n';
        var svgBlob = new Blob([preface, svgData], {
            type: "image/svg+xml;charset=utf-8"
        });
        var svgUrl = URL.createObjectURL(svgBlob);
        var downloadLink = document.createElement("a");
        downloadLink.href = svgUrl;
        downloadLink.download = name;
        document.body.appendChild(downloadLink);
        downloadLink.click();
        document.body.removeChild(downloadLink);
    };
    ProjectPanelComponent.prototype.savePng = function (svgEl, name) {
        var svg = document.getElementById("biocircos");
        svg.setAttribute("xmlns", _environments_environment__WEBPACK_IMPORTED_MODULE_1__["environment"].host);
        var svgData = svg.outerHTML;
        //saveSvgAsPng(svgData, "diagram.png");
    };
    ProjectPanelComponent.prototype.savePNG = function (pngEl, name) {
        var canvas = document.getElementsByTagName("svg");
        _node_modules_save_svg_as_png_lib_saveSvgAsPng_js__WEBPACK_IMPORTED_MODULE_16__["saveSvgAsPng"](document.getElementById("biocircos").firstChild, "biocircos.png");
        // saveSvgAsPng(document.getElementById("biocircos"), "biocircos.png");
        // var img = canvas.to
        // svg.saveSvgAsPng(document.getElementById("biocircos"), "test.png")
    };
    ProjectPanelComponent.prototype.addGroup = function () {
        var files = this.database.getSelectedNodes();
        this.onAddGroup.emit(this.newGroupName);
    };
    ProjectPanelComponent.prototype.deleteGroup = function (group) {
        this.onDeleteGroup.emit(group);
        this.groups.splice(this.groups.indexOf(group), 1);
    };
    ProjectPanelComponent.prototype.editGroup = function (group) {
        this.onEditGroup.emit(group);
    };
    ProjectPanelComponent.prototype.onSelectedFilesChange = function (fastaIndex) {
        if (fastaIndex == undefined) {
            fastaIndex = this.selectedFastaIndex;
        }
        this.loadingService.isCharging = true;
        var tracks = JSON.parse(JSON.stringify(this.selectedFiles));
        var files = [this.fastaFiles[fastaIndex]];
        for (var i = 0; i < tracks.length; i++) {
            files.push(this.findFile(tracks[i]));
        }
        this.onUpdateGroup1.emit(files);
        tracks.push(this.fastaFiles[fastaIndex].id);
        var _this = this;
        this.ClearMessage.emit();
        this.CreateMessage.emit(['Select Chromosome to Visualise as the whole Circos']);
        this.loadingService.isCharging = false;
    };
    ProjectPanelComponent.prototype.findFile = function (id) {
        for (var i = 0; i < this.vcfFiles.length; i++) {
            if (this.vcfFiles[i].id === id) {
                return this.vcfFiles[i];
            }
        }
        for (var i = 0; i < this.annotationFiles.length; i++) {
            if (this.annotationFiles[i].id === id) {
                return this.annotationFiles[i];
            }
        }
        for (var i = 0; i < this.DEFiles.length; i++) {
            if (this.DEFiles[i].id === id) {
                return this.DEFiles[i];
            }
        }
        for (var i = 0; i < this.expressionFiles.length; i++) {
            if (this.expressionFiles[i].id === id) {
                return this.expressionFiles[i];
            }
        }
        for (var i = 0; i < this.genomicCovFiles.length; i++) {
            if (this.genomicCovFiles[i].id === id) {
                return this.genomicCovFiles[i];
            }
        }
        for (var i = 0; i < this.transcriptomicCovFiles.length; i++) {
            if (this.transcriptomicCovFiles[i].id === id) {
                return this.transcriptomicCovFiles[i];
            }
        }
    };
    ProjectPanelComponent.prototype.checkGenomeSize = function (fasta, tracks) {
        var track;
        for (var i = 0; i < tracks.length; i++) {
            track = tracks[i];
            if (track.format !== 'fasta') {
                if (track.data[track.data.length - 1].chr !== fasta.data[fasta.data.length - 1][0]) {
                    this.toastr.warning('There was an issue with the chromosomes indexing, please reupload the "." ' +
                        track.format + ' file with the correct .fasta reference', 'Warning message', { positionClass: 'toast-bottom-right' });
                }
            }
        }
    };
    ProjectPanelComponent.prototype.onAddFileLinkClick = function () {
        this.fileLinkUpload.el.nativeElement.children[0].children[2].click();
    };
    ProjectPanelComponent.prototype.uploadFileLink = function (event) {
        var f = event.files[0];
        var newFile = {
            filename: f.name, data: { additionalColumns: [] }, selectedColumnForColor: { label: 'Color', value: 'color' },
            project: this.userService.selectedProject.id
        };
        var worker = new Worker('linkfileWorker.js');
        var that = this;
        worker.onmessage = function (msg) {
            if (msg.data.error) {
                that.toastr.error(msg.data.error, 'Error', { positionClass: 'toast-bottom-right' });
                worker.terminate();
                that.fileLinkUpload.clear();
            }
            else if (msg.data.code === 1) {
                that.dialogService.columnTypeLinkDialog.next({ projectPanel: that, columns: msg.data.columns, worker: worker });
            }
        };
        worker.postMessage({ step: 'start', file: f });
    };
    ProjectPanelComponent.prototype.confirmLinksType = function (linkWorder, additionalColumns) {
        linkWorder.postMessage(additionalColumns);
    };
    ProjectPanelComponent.prototype.saveLinks = function (links) {
        var _this_1 = this;
        var url = _environments_environment__WEBPACK_IMPORTED_MODULE_1__["environment"].host + 'addLinkFile';
        this.http.post(url, links).subscribe(function (data) {
        }, function (error) {
            console.log('Error: file couldn\'t be uploaded');
            _this_1.isCharging = false;
        });
    };
    ProjectPanelComponent.prototype.showFileLinks = function (file, index) {
        var error = false;
        if (file.data.mode === 'comparison' && this.displaySettingsService.mode !== 'comparison') {
            this.toastr.error('Please create and display the groups corresponding to the files', 'Error', { positionClass: 'toast-bottom-right' });
            error = true;
        }
        if (file.data.mode === 'comparison' && (this.displaySettingsService.groupsChecked.indexOf(file.data.g1) === -1 ||
            this.displaySettingsService.groupsChecked.indexOf(file.data.g2) === -1)) {
            this.toastr.error('Please use the same group names as those in the link file', 'Error', { positionClass: 'toast-bottom-right' });
            error = true;
        }
        if (error) {
            this.selectedFileLinksIndex = null;
        }
        else {
            this.selectedFileLinksIndex = index;
            var selectedFasta = [this.fastaFiles[this.selectedFastaIndex]];
            this.displayFileLinks.emit({ links: file.data.links, fasta: selectedFasta });
        }
    };
    ProjectPanelComponent.prototype.hideLinks = function () {
        this.selectedFileLinksIndex = null;
        this.onHideLinks.emit();
    };
    ProjectPanelComponent.prototype.onLinksUpdate = function (links) {
        this.displayFileLinks.emit({ links: links });
    };
    ProjectPanelComponent.prototype.changeLinkFileColorColumn = function (columnName, f) {
        var file = JSON.parse(JSON.stringify(f.data));
        var column = file.columns.find(function (col) { return col.field === columnName; });
        f.selectedColumnForColor = column;
        if (column && column.type === 'level') {
            var colors = ['#9ACD32', '#377DB8', '#F5DEB3', '#EE82EE', '#40E0D0', '#FF6347', '#D8BFD8', '#D2B48C',
                '#4682B4', '#00FF7F', '#FFFAFA', '#708090', '#708090', '#6A5ACD', '#87CEEB', '#A0522D', '#FFF5EE', '#2E8B57', '#F4A460', '#FA8072'];
            var levelsColour = {}; // TODO: generate random color if number of levels bigger than number of colors
            for (var i = 0; i < column.levels.length; i++) {
                levelsColour[column.levels[i].value] = colors[i];
            }
            f.levelsColour = levelsColour;
            for (var i = 0; i < file.links.length; i++) {
                file.links[i].color = levelsColour[file.links[i][columnName]];
            }
        }
        else if (column && column.type === 'numeric') {
            var scale = 120 / (column.max - column.min);
            for (var i = 0; i < file.links.length; i++) {
                file.links[i].color = this.hslToHex((file.links[i][columnName] - column.min) * scale, 80, 50);
            }
        }
        this.displayFileLinks.emit({ links: file.links });
    };
    ProjectPanelComponent.prototype.deleteLinkFile = function (index) {
        var _this_1 = this;
        var url = _environments_environment__WEBPACK_IMPORTED_MODULE_1__["environment"].host + 'deleteLinkFile';
        this.http.post(url, { project: this.userService.selectedProject.id }).subscribe(function (data) {
            _this_1.linkFiles.splice(index, 1);
        }, function (error) {
            console.log(error);
        });
    };
    ProjectPanelComponent.prototype.hslToHex = function (h, s, l) {
        h /= 360;
        s /= 100;
        l /= 100;
        var r, g, b;
        if (s === 0) {
            r = g = b = l; // achromatic
        }
        else {
            var hue2rgb = function (p, q, t) {
                if (t < 0)
                    t += 1;
                if (t > 1)
                    t -= 1;
                if (t < 1 / 6)
                    return p + (q - p) * 6 * t;
                if (t < 1 / 2)
                    return q;
                if (t < 2 / 3)
                    return p + (q - p) * (2 / 3 - t) * 6;
                return p;
            };
            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
            var p = 2 * l - q;
            r = hue2rgb(p, q, h + 1 / 3);
            g = hue2rgb(p, q, h);
            b = hue2rgb(p, q, h - 1 / 3);
        }
        var toHex = function (x) {
            var hex = Math.round(x * 255).toString(16);
            return hex.length === 1 ? '0' + hex : hex;
        };
        return '#' + toHex(r) + toHex(g) + toHex(b);
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])("cdkTreeNestedExample"),
        __metadata("design:type", Object)
    ], ProjectPanelComponent.prototype, "CdkTreeNestedExample", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])("fileupload"),
        __metadata("design:type", Object)
    ], ProjectPanelComponent.prototype, "fileupload", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])("fileLinkUpload"),
        __metadata("design:type", Object)
    ], ProjectPanelComponent.prototype, "fileLinkUpload", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])("sharedialog"),
        __metadata("design:type", Object)
    ], ProjectPanelComponent.prototype, "sharedialog", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])("uploadPanel"),
        __metadata("design:type", Object)
    ], ProjectPanelComponent.prototype, "uploadPanel", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], ProjectPanelComponent.prototype, "ClearMessage", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], ProjectPanelComponent.prototype, "CreateMessage", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], ProjectPanelComponent.prototype, "onEmittingPopulatedPickList", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], ProjectPanelComponent.prototype, "onAddGroup", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], ProjectPanelComponent.prototype, "onDeleteGroup", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], ProjectPanelComponent.prototype, "onEditGroup", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], ProjectPanelComponent.prototype, "onUpdateGroup1", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], ProjectPanelComponent.prototype, "hasLinks", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], ProjectPanelComponent.prototype, "onClear", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], ProjectPanelComponent.prototype, "onProjectSelected", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], ProjectPanelComponent.prototype, "displayFileLinks", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], ProjectPanelComponent.prototype, "onHideLinks", void 0);
    ProjectPanelComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'project-panel',
            template: __webpack_require__(/*! ./project-panel.component.html */ "./src/app/webcircos/project-panel/project-panel.component.html"),
            styles: [__webpack_require__(/*! ./project-panel.component.css */ "./src/app/webcircos/project-panel/project-panel.component.css")],
            providers: [FileDatabase, _webcircos_component__WEBPACK_IMPORTED_MODULE_9__["WebcircosComponent"], _common_service__WEBPACK_IMPORTED_MODULE_10__["CommonService"]]
        }),
        __metadata("design:paramtypes", [_user_service__WEBPACK_IMPORTED_MODULE_4__["UserService"],
            _angular_common_http__WEBPACK_IMPORTED_MODULE_8__["HttpClient"],
            _parser_service__WEBPACK_IMPORTED_MODULE_5__["ParserService"],
            ngx_toastr__WEBPACK_IMPORTED_MODULE_2__["ToastrService"],
            _loading_service__WEBPACK_IMPORTED_MODULE_6__["LoadingService"],
            _dialog_service__WEBPACK_IMPORTED_MODULE_7__["DialogService"],
            _display_settings_service__WEBPACK_IMPORTED_MODULE_3__["DisplaySettingsService"],
            _common_service__WEBPACK_IMPORTED_MODULE_10__["CommonService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_11__["ActivatedRoute"], FileDatabase])
    ], ProjectPanelComponent);
    return ProjectPanelComponent;
}());



/***/ }),

/***/ "./src/app/webcircos/webcircos.component.css":
/*!***************************************************!*\
  !*** ./src/app/webcircos/webcircos.component.css ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#root {\n}\n\n#mainPanel {\n  height: calc(100vh - 50px);\n}\n\nproject-panel {\n  /* height: 100%; */\n  width: 100%;\n  /* display: inline-block; */\n  vertical-align: top;\n}\n\n#circosLinearContainer {\n  height: 100%;\n  width: 100%;\n  vertical-align: top;\n  display: inline-block;\n}\n\nbiocircos {\n  height: 95%;\n  width: 100%;\n  display: block;\n}\n\napp-linear {\n  width: 100%;\n  height: 100%;\n  display: block;\n}\n\nmat-sidenav-container {\n  height: 100%;\n}\n\nmat-sidenav {\n  width: 25%;\n  overflow-y: hidden;\n  overflow-x: hidden;\n  z-index: 0;\n  background: rgb(250,250,250);\n}\n\nmat-sidenav-content {\n  overflow-y: hidden;\n  overflow-x: hidden;\n  z-index: 5;\n}\n\nmat-drawer-container {\n  z-index: 0;\n}\n"

/***/ }),

/***/ "./src/app/webcircos/webcircos.component.html":
/*!****************************************************!*\
  !*** ./src/app/webcircos/webcircos.component.html ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div id=\"root\" #root>\n\n  <div id=\"mainPanel\">\n\n    <mat-sidenav-container autosize>\n      <mat-sidenav [opened]=\"projectPanelOpened\" mode=\"side\">\n        <project-panel #projectPanel (displayRequest)=\"displayCircos($event)\" (displayFileList)=\"sendFileList($event)\" (onEmittingPopulatedPickList)=\"catchPickListEmittedApp($event)\" (ClearMessage)=\"clear_message()\" (CreateMessage)=\"create_message($event)\"\n          (onAddGroup)=\"addGroup($event)\" (onDeleteGroup)=\"deleteGroup($event)\" (onEditGroup)=editGroup($event) (onClear)=\"clear()\"\n           (onUpdateGroup1)=\"onUpdateGroup1($event)\" (hasLinks)=\"hasLinks($event)\" (onProjectSelected)=\"onProjectSelected()\"\n           (displayFileLinks)=\"biocircos.displayFileLinks($event)\" (onHideLinks)=\"biocircos.hideLinks()\"></project-panel>\n      </mat-sidenav>\n      <mat-sidenav-content>\n        <div id=\"circosLinearContainer\">\n          <app-biocircos #biocircos (onGroupListAdded)=\"updateGroups($event)\" (onCircosClick)='passClickToLinear($event)'\n          (openCustomisation)=customisation.openCustomisationPanel()\n          (modeChanged)=customisation.setMode($event)></app-biocircos>\n        </div>\n      </mat-sidenav-content>\n    </mat-sidenav-container>\n\n\n  </div>\n\n\n\n  <genoverse #genoverse></genoverse>\n\n\n  <app-customisation-panel #customisation (onHighlightAnnotation)=\"catchHighlightGenes($event)\"  (onChangeOnlyHomoSNP)=\"changeOnlyHomoSNP($event)\" (onMessageChange)=\"onChangeDisplayMessage($event)\"\n    (onGraphTypeChange)=\"catchGraphTypeSelection($event)\"> </app-customisation-panel>\n\n</div>\n\n<app-dialog-container></app-dialog-container>\n"

/***/ }),

/***/ "./src/app/webcircos/webcircos.component.ts":
/*!**************************************************!*\
  !*** ./src/app/webcircos/webcircos.component.ts ***!
  \**************************************************/
/*! exports provided: WebcircosComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WebcircosComponent", function() { return WebcircosComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var primeng_components_common_messageservice__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! primeng/components/common/messageservice */ "./node_modules/primeng/components/common/messageservice.js");
/* harmony import */ var primeng_components_common_messageservice__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(primeng_components_common_messageservice__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _user_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../user.service */ "./src/app/user.service.ts");
/* harmony import */ var _common_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common.service */ "./src/app/common.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





var WebcircosComponent = /** @class */ (function () {
    function WebcircosComponent(userService, messageService, commonService, route) {
        this.userService = userService;
        this.commonService = commonService;
        this.route = route;
        this.triedCookies = false;
        this.message = null;
        this.projectPanelOpened = true;
    }
    WebcircosComponent.prototype.ngOnInit = function () {
        var _this = this;
        var that = this;
        var timeout;
        window.onresize = function () {
            clearTimeout(timeout);
            timeout = setTimeout(function () {
                that.biocircos.redraw();
            }, 50);
        };
        this.getAllGenomes();
        this.commonService.add_subject.subscribe(function (response) {
            _this.getAllGenomes();
        });
        this.sub = this.route.params.subscribe(function (params) {
            _this.id = params["id"];
        });
        this.getGenome(this.id);
        // console.log(this.id);
        this.commonService.add_subject.subscribe(function (response) {
            _this.getGenome(_this.id);
        });
    };
    WebcircosComponent.prototype.ngOnDestroy = function () {
        this.sub.unsubscribe();
    };
    WebcircosComponent.prototype.getAllGenomes = function () {
        var _this = this;
        this.commonService.getGenomes().subscribe(function (res) {
            _this.assemblyList = [];
            res.json().data.map(function (e) {
                _this.assemblyList.push(e);
            });
            // console.log(this.assemblyList);
        });
    };
    WebcircosComponent.prototype.getGenome = function (id) {
        var _this = this;
        // console.log("ID at getGenome(id) webcircos line 81",id);
        this.commonService.getGenome(id).subscribe(function (res) {
            _this.id = null;
            _this.assembly = [];
            // console.log(res.json()._id);
            if (res.json()) {
                _this.assembly = res.json();
                _this.userService.projects = [];
                _this.userService.projects.push({ title: res.json().title, id: res.json()._id });
                // console.log(this.userService.projects);
            }
            // console.log(this.assembly);
        });
    };
    WebcircosComponent.prototype.updateGroups = function (data) {
        this.projectPanel.updateGroups(data);
    };
    WebcircosComponent.prototype.clear_message = function () {
        this.biocircos.clear_messages();
    };
    WebcircosComponent.prototype.create_message = function (Xi) {
        for (var i = 0; i < Xi.length; i++) {
            this.biocircos.create_msgs([Xi]);
        }
    };
    WebcircosComponent.prototype.clear = function () {
        this.biocircos.clearProject();
    };
    WebcircosComponent.prototype.sendFileList = function (data) {
        this.biocircos.submitFileList(data);
    };
    WebcircosComponent.prototype.displayCircos = function (event) {
        this.biocircos.submitDisplayCircos(event.data, event.mode);
    };
    WebcircosComponent.prototype.catchPickListEmittedApp = function (e) {
        this.biocircos.catchPickListEmittedBiocircos(e);
    };
    WebcircosComponent.prototype.addGroup = function (name) {
        this.biocircos.addGroup(name);
    };
    WebcircosComponent.prototype.deleteGroup = function (name) {
        this.biocircos.deleteGroup(name);
    };
    WebcircosComponent.prototype.editGroup = function (name) {
        this.biocircos.editGroup(name);
    };
    WebcircosComponent.prototype.onUpdateGroup1 = function (data) {
        this.biocircos.updateGroup1(data);
    };
    WebcircosComponent.prototype.hasLinks = function (data) {
        this.biocircos.showLinksLegend(data);
    };
    WebcircosComponent.prototype.onProjectSelected = function () {
        this.biocircos.showInstructionMessage("Upload some files or select files from the list to display the circos");
    };
    WebcircosComponent.prototype.passClickToLinear = function (event) {
        this.genoverse.reset(event);
    };
    WebcircosComponent.prototype.toogleProjectPanel = function () {
        this.projectPanelOpened = !this.projectPanelOpened;
        var that = this;
        setTimeout(function () {
            that.biocircos.redraw();
        }, 350);
    };
    WebcircosComponent.prototype.catchHighlightGenes = function (event) {
        this.biocircos.catchHighlightGenes(event);
    };
    WebcircosComponent.prototype.onChangeDisplayMessage = function (event) {
        this.biocircos.onChangeDisplayMessage(event);
    };
    WebcircosComponent.prototype.catchGraphTypeSelection = function (event) {
        this.biocircos.catchGraphTypeSelection(event);
    };
    WebcircosComponent.prototype.changeOnlyHomoSNP = function (event) {
        this.biocircos.changeOnlyHomoSNP(event);
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])("projectPanel"),
        __metadata("design:type", Object)
    ], WebcircosComponent.prototype, "projectPanel", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])("biocircos"),
        __metadata("design:type", Object)
    ], WebcircosComponent.prototype, "biocircos", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])("genoverse"),
        __metadata("design:type", Object)
    ], WebcircosComponent.prototype, "genoverse", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])("customisation"),
        __metadata("design:type", Object)
    ], WebcircosComponent.prototype, "customisation", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])("sharedialog"),
        __metadata("design:type", Object)
    ], WebcircosComponent.prototype, "sharedialog", void 0);
    WebcircosComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: "webcircos",
            template: __webpack_require__(/*! ./webcircos.component.html */ "./src/app/webcircos/webcircos.component.html"),
            styles: [__webpack_require__(/*! ./webcircos.component.css */ "./src/app/webcircos/webcircos.component.css")],
            providers: [primeng_components_common_messageservice__WEBPACK_IMPORTED_MODULE_1__["MessageService"], _common_service__WEBPACK_IMPORTED_MODULE_3__["CommonService"]]
        }),
        __metadata("design:paramtypes", [_user_service__WEBPACK_IMPORTED_MODULE_2__["UserService"],
            primeng_components_common_messageservice__WEBPACK_IMPORTED_MODULE_1__["MessageService"],
            _common_service__WEBPACK_IMPORTED_MODULE_3__["CommonService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_4__["ActivatedRoute"]])
    ], WebcircosComponent);
    return WebcircosComponent;
}());



/***/ }),

/***/ "./src/app/welcome/welcome.component.css":
/*!***********************************************!*\
  !*** ./src/app/welcome/welcome.component.css ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ":root {\n  --header-footer: #24292e;\n  --accent: #6cc644;\n  --background: #eae7ed;\n  --homelogo: #ffffff;\n  --genomeGitWeb: #80c962;\n  --menuItems: #ffffff;\n  --signIn: #ffffff;\n  --foreground: #f6f8fa;\n  --textLight: #ffffff;\n  --textDark: #24292e;\n  --textDarkUnfocused: #889aad;\n  --button-hover: #596470;\n  --shadow: 0 1px 5px rgba(100, 100, 100, 0.5);\n  --searchbarShadow: 0 1px 5px rgba(0, 255, 0, 1);\n  --searchbarShadowHover: 0 1px 15px rgba(0, 255, 0, 1);\n  --searchbarShadowHoverInside: inset 1px 15px rgba(0, 255, 0, 1);\n  --logos: #5f5f5f;\n  --footerText: #80c962;\n}\n\n.tooltip {\n  position: relative;\n  display: inline-block;\n  border-bottom: 1px dotted black; /* If you want dots under the hoverable text */\n}\n\n/* Tooltip text */\n\n.tooltiptext {\n  visibility: hidden;\n  width: 120px;\n  background-color: #555;\n  color: #fff;\n  text-align: center;\n  padding: 5px 0;\n  border-radius: 6px;\n\n  /* Position the tooltip text */\n  position: absolute;\n  z-index: 1;\n  bottom: 125%;\n  left: 50%;\n  margin-left: -60px;\n\n  /* Fade in tooltip */\n  opacity: 0;\n  transition: opacity 0.3s;\n}\n\n/* Tooltip arrow */\n\n.tooltip .tooltiptext::after {\n  content: \"\";\n  position: absolute;\n  top: 100%;\n  left: 50%;\n  margin-left: -5px;\n  border-width: 5px;\n  border-style: solid;\n  border-color: #555 transparent transparent transparent;\n}\n\n/* Show the tooltip text when you mouse over the tooltip container */\n\n.tooltip:hover .tooltiptext {\n  visibility: visible;\n  opacity: 1;\n}\n\nimg {\n  width: 100%;\n  height: 100%;\n}\n\n.list-group-item {\n  box-shadow: var(--searchbarShadow);\n  /* min-height: 170px; */\n  /* max-height: 150px; */\n  overflow: hidden;\n}\n\n.list-group-item:last-child {\n  margin-right: 20px;\n}\n\n.box {\n  /* height: 400px; */\n  display: inline-block;\n  vertical-align: middle;\n  word-break: break-all;\n  max-width: 40%;\n}\n\n.imageExample {\n  width: 400px;\n  height: 400px;\n  display: inline-block;\n  vertical-align: middle;\n}\n\n.right {\n  float: right;\n  margin-right: 10%;\n  margin-top: 20px;\n}\n\n.left {\n  margin-left: 10%;\n  margin-top: 20px;\n}\n\n.browse-container {\n  display: -ms-grid;\n  display: grid;\n  grid-gap: 1rem;\n}\n\n.fas.fa-dna {\n  color: var(--accent);\n}\n\n/* Card-like projects view */\n\n[class*=\"col-\"] {\n  float: left;\n  padding-right: 2vw;\n  padding-bottom: 2vw;\n}\n\n[class*=\"col-\"]:last-of-type {\n  margin-right: 20px;\n  max-width: 23%;\n}\n\n*,\n*:after,\n*:before {\n  box-sizing: border-box;\n}\n\n/* h4 {\n  position: relative;\n  padding-top: 0;\n  padding-bottom: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n} */\n\n.card-headings{\n  padding:15px 0px 0px;\n}\n\n.card-description{\n  font-size: 15px;\n  float: left;\n  color: var(--accent);\n}\n\n.card-no-description{\n  font-size: 15px;\n  float: left;\n  font-style: italic; \n  color: lightgray\n}\n\n.grid {\n  margin: 0;\n}\n\n.col-1-4 {\n  width: 23%;\n}\n\n/* p {\n  float: left;\n  padding: 0;\n  margin: 0;\n  color: var(--accent);\n} */\n\n.module {\n  /* padding: 20px; */\n  box-shadow: var(--searchbarShadow);\n  text-align: center;\n  color: white;\n  background: var(--button-hover);\n  max-height: 160px;\n  min-height: 160px;\n  overflow: hidden;\n  min-width: 100%;\n  border-radius: 4px;\n}\n\n.module:hover {\n  background: #eee;\n  cursor: pointer;\n  color: #607d8b;\n}\n\n.module:hover p {\n  color: #24292e;\n}\n\n.grid-pad {\n  padding: 10px;\n}\n\n.grid-pad > [class*=\"col\"]:last-of-type {\n  padding-right: 20px;\n}\n\n@media (max-width: 600px) {\n  .module {\n    font-size: 10px;\n    min-height: 75px;\n  }\n}\n\n@media (max-width: 1024px) {\n  .grid {\n    margin: 0;\n  }\n  .module {\n    min-width: 60px;\n  }\n}\n"

/***/ }),

/***/ "./src/app/welcome/welcome.component.html":
/*!************************************************!*\
  !*** ./src/app/welcome/welcome.component.html ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"browse-container\">\n    <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\n    rel=\"stylesheet\">\n  <autocomplete-filter-example></autocomplete-filter-example>\n  <div class=\"listContainer\">\n    <h3 style=\"margin-left: 1rem; margin-top: 6px; margin-left: 1.3%; margin-bottom: 20px\">Browse Popular Projects <i class=\"material-icons\" title=\"Projects are sorted by the number of files they contain. Hover over a project to view the full description.\">info</i></h3>   \n    <div class=\"card\">\n        <ul\n        class=\"list-group col-1-4\"\n        *ngFor=\"let item of assemblyList | slice:0:4\"\n        style=\"margin-bottom: 1rem; margin-left: 2rem\"\n      >\n        <li class=\"list-group-item module\" [routerLink]=\"['/app', item._id]\" title=\"{{item.description}}\">\n          <h4 class=\"card-headings\">{{item.title}}</h4>\n          <p *ngIf=\"item.description\" class=\"card-description\" title=\"{{item.description}}\">{{item.description.slice(0,50).concat(\"...\")}}</p>\n          <p *ngIf=\"!item.description\" class=\"card-no-description\" >No description provided.</p>\n        </li>\n      </ul>\n    </div>\n  </div>\n</div>\n-"

/***/ }),

/***/ "./src/app/welcome/welcome.component.ts":
/*!**********************************************!*\
  !*** ./src/app/welcome/welcome.component.ts ***!
  \**********************************************/
/*! exports provided: WelcomeComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WelcomeComponent", function() { return WelcomeComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _common_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common.service */ "./src/app/common.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var WelcomeComponent = /** @class */ (function () {
    function WelcomeComponent(commonService) {
        this.commonService = commonService;
    }
    WelcomeComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.getAllGenomes();
        this.commonService.add_subject.subscribe(function (response) {
            _this.getAllGenomes();
        });
        // new WOW().init();
    };
    WelcomeComponent.prototype.getAllGenomes = function () {
        var _this = this;
        this.commonService.getGenomes().subscribe(function (res) {
            _this.assemblyList = [];
            res.json().data.map(function (e) {
                _this.assemblyList.push(e);
                // this.assemblyList.shortDescription.push(e.description.slice(0,75).concat("..."));
            });
            _this.assemblyList.sort(function (a, b) {
                if (a.files.length < b.files.length) {
                    return 1;
                }
                else if (a.files.length > b.files.length) {
                    return -1;
                }
                else {
                    return 0;
                }
            });
            for (var i = 0; i > _this.assemblyList.length; i++) {
                _this.assemblyList[i].shortDescription = _this.assemblyList[i].description.slice(0, 75).concat("...");
            }
            // console.log(this.assemblyList);
        });
    };
    WelcomeComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: "app-welcome",
            template: __webpack_require__(/*! ./welcome.component.html */ "./src/app/welcome/welcome.component.html"),
            styles: [__webpack_require__(/*! ./welcome.component.css */ "./src/app/welcome/welcome.component.css"), __webpack_require__(/*! ../../../public/css/ionicons.min.css */ "./public/css/ionicons.min.css"), __webpack_require__(/*! ../../../public/css/font-awesome.min.css */ "./public/css/font-awesome.min.css"), __webpack_require__(/*! ../../../public/css/animate.css */ "./public/css/animate.css"), __webpack_require__(/*! ../../../public/css/custom.css */ "./public/css/custom.css")],
            providers: [_common_service__WEBPACK_IMPORTED_MODULE_1__["CommonService"]]
        }),
        __metadata("design:paramtypes", [_common_service__WEBPACK_IMPORTED_MODULE_1__["CommonService"]])
    ], WelcomeComponent);
    return WelcomeComponent;
}());



/***/ }),

/***/ "./src/environments/environment.ts":
/*!*****************************************!*\
  !*** ./src/environments/environment.ts ***!
  \*****************************************/
/*! exports provided: environment */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "environment", function() { return environment; });
// The file contents for the current environment will overwrite these during build.
// The build system defaults to the dev environment which uses `environment.ts`, but if you do
// `ng build --env=prod` then `environment.prod.ts` will be used instead.
// The list of which env maps to which file can be found in `.angular-cli.json`.
var environment = {
    production: false,
    host: "http://localhost:3000/",
    colorPalette: ['#44B3C2', '#F1A94E', '#E45641', '#5D4C46', '#7B8D8E', '#F2EDD8'],
    parserSleep: 2000,
    gitDirectory: "/Users/cranfieldbix/ggWRepo/"
};


/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/platform-browser-dynamic */ "./node_modules/@angular/platform-browser-dynamic/fesm5/platform-browser-dynamic.js");
/* harmony import */ var _app_app_module__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./app/app.module */ "./src/app/app.module.ts");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./environments/environment */ "./src/environments/environment.ts");




if (_environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].production) {
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["enableProdMode"])();
}
Object(_angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_1__["platformBrowserDynamic"])().bootstrapModule(_app_app_module__WEBPACK_IMPORTED_MODULE_2__["AppModule"])
    .catch(function (err) { return console.log(err); });


/***/ }),

/***/ 0:
/*!***************************!*\
  !*** multi ./src/main.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /Users/cranfieldbix/gGW-master/src/main.ts */"./src/main.ts");


/***/ })

},[[0,"runtime","vendor"]]]);
//# sourceMappingURL=main.js.map